// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"faceto-ai/internal/data/ent/link"
	"faceto-ai/internal/data/schema"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Link is the model entity for the Link schema.
type Link struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// RoomName holds the value of the "room_name" field.
	RoomName string `json:"room_name,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// ChatAPI holds the value of the "chat_api" field.
	ChatAPI string `json:"chat_api,omitempty"`
	// ChatAPIKey holds the value of the "chat_api_key" field.
	ChatAPIKey string `json:"chat_api_key,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Config holds the value of the "config" field.
	Config *schema.RoomConfig `json:"config,omitempty"`
	// Webhook holds the value of the "webhook" field.
	Webhook *schema.Webhook `json:"webhook,omitempty"`
	// Prompt holds the value of the "prompt" field.
	Prompt       *schema.Prompt `json:"prompt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Link) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case link.FieldConfig, link.FieldWebhook, link.FieldPrompt:
			values[i] = new([]byte)
		case link.FieldID:
			values[i] = new(sql.NullInt64)
		case link.FieldUUID, link.FieldRoomName, link.FieldLink, link.FieldChatAPI, link.FieldChatAPIKey, link.FieldToken:
			values[i] = new(sql.NullString)
		case link.FieldCreatedAt, link.FieldUpdatedAt, link.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Link fields.
func (l *Link) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case link.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = uint64(value.Int64)
		case link.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				l.UUID = value.String
			}
		case link.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case link.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case link.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = value.Time
			}
		case link.FieldRoomName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_name", values[i])
			} else if value.Valid {
				l.RoomName = value.String
			}
		case link.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				l.Link = value.String
			}
		case link.FieldChatAPI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_api", values[i])
			} else if value.Valid {
				l.ChatAPI = value.String
			}
		case link.FieldChatAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_api_key", values[i])
			} else if value.Valid {
				l.ChatAPIKey = value.String
			}
		case link.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				l.Token = value.String
			}
		case link.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &l.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case link.FieldWebhook:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field webhook", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &l.Webhook); err != nil {
					return fmt.Errorf("unmarshal field webhook: %w", err)
				}
			}
		case link.FieldPrompt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field prompt", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &l.Prompt); err != nil {
					return fmt.Errorf("unmarshal field prompt: %w", err)
				}
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Link.
// This includes values selected through modifiers, order, etc.
func (l *Link) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// Update returns a builder for updating this Link.
// Note that you need to call Link.Unwrap() before calling this method if this Link
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Link) Update() *LinkUpdateOne {
	return NewLinkClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Link entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Link) Unwrap() *Link {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Link is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Link) String() string {
	var builder strings.Builder
	builder.WriteString("Link(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("uuid=")
	builder.WriteString(l.UUID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(l.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("room_name=")
	builder.WriteString(l.RoomName)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(l.Link)
	builder.WriteString(", ")
	builder.WriteString("chat_api=")
	builder.WriteString(l.ChatAPI)
	builder.WriteString(", ")
	builder.WriteString("chat_api_key=")
	builder.WriteString(l.ChatAPIKey)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(l.Token)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", l.Config))
	builder.WriteString(", ")
	builder.WriteString("webhook=")
	builder.WriteString(fmt.Sprintf("%v", l.Webhook))
	builder.WriteString(", ")
	builder.WriteString("prompt=")
	builder.WriteString(fmt.Sprintf("%v", l.Prompt))
	builder.WriteByte(')')
	return builder.String()
}

// Links is a parsable slice of Link.
type Links []*Link
