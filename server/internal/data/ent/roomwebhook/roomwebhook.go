// Code generated by ent, DO NOT EDIT.

package roomwebhook

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the roomwebhook type in the database.
	Label = "room_webhook"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSid holds the string denoting the sid field in the database.
	FieldSid = "sid"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldEventTime holds the string denoting the event_time field in the database.
	FieldEventTime = "event_time"
	// FieldRoom holds the string denoting the room field in the database.
	FieldRoom = "room"
	// FieldParticipant holds the string denoting the participant field in the database.
	FieldParticipant = "participant"
	// FieldTrack holds the string denoting the track field in the database.
	FieldTrack = "track"
	// FieldEgressInfo holds the string denoting the egressinfo field in the database.
	FieldEgressInfo = "egress_info"
	// FieldIngressInfo holds the string denoting the ingressinfo field in the database.
	FieldIngressInfo = "ingress_info"
	// Table holds the table name of the roomwebhook in the database.
	Table = "room_webhook"
)

// Columns holds all SQL columns for roomwebhook fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldSid,
	FieldEvent,
	FieldEventTime,
	FieldRoom,
	FieldParticipant,
	FieldTrack,
	FieldEgressInfo,
	FieldIngressInfo,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultSid holds the default value on creation for the "sid" field.
	DefaultSid string
	// DefaultEvent holds the default value on creation for the "event" field.
	DefaultEvent string
)

// OrderOption defines the ordering options for the RoomWebhook queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySid orders the results by the sid field.
func BySid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSid, opts...).ToFunc()
}

// ByEvent orders the results by the event field.
func ByEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvent, opts...).ToFunc()
}

// ByEventTime orders the results by the event_time field.
func ByEventTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventTime, opts...).ToFunc()
}
