// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"faceto-ai/internal/data/ent/roomwebhook"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/livekit/protocol/livekit"
)

// RoomWebhook is the model entity for the RoomWebhook schema.
type RoomWebhook struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Sid holds the value of the "sid" field.
	Sid string `json:"sid,omitempty"`
	// Event holds the value of the "event" field.
	Event string `json:"event,omitempty"`
	// EventTime holds the value of the "event_time" field.
	EventTime time.Time `json:"event_time,omitempty"`
	// Room holds the value of the "room" field.
	Room *livekit.Room `json:"room,omitempty"`
	// Participant holds the value of the "participant" field.
	Participant *livekit.ParticipantInfo `json:"participant,omitempty"`
	// Track holds the value of the "track" field.
	Track *livekit.TrackInfo `json:"track,omitempty"`
	// EgressInfo holds the value of the "egressInfo" field.
	EgressInfo *livekit.EgressInfo `json:"egressInfo,omitempty"`
	// IngressInfo holds the value of the "ingressInfo" field.
	IngressInfo  *livekit.IngressInfo `json:"ingressInfo,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoomWebhook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roomwebhook.FieldRoom, roomwebhook.FieldParticipant, roomwebhook.FieldTrack, roomwebhook.FieldEgressInfo, roomwebhook.FieldIngressInfo:
			values[i] = new([]byte)
		case roomwebhook.FieldID:
			values[i] = new(sql.NullInt64)
		case roomwebhook.FieldUUID, roomwebhook.FieldName, roomwebhook.FieldSid, roomwebhook.FieldEvent:
			values[i] = new(sql.NullString)
		case roomwebhook.FieldCreatedAt, roomwebhook.FieldUpdatedAt, roomwebhook.FieldDeletedAt, roomwebhook.FieldEventTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoomWebhook fields.
func (rw *RoomWebhook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roomwebhook.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rw.ID = uint64(value.Int64)
		case roomwebhook.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				rw.UUID = value.String
			}
		case roomwebhook.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rw.CreatedAt = value.Time
			}
		case roomwebhook.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rw.UpdatedAt = value.Time
			}
		case roomwebhook.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rw.DeletedAt = value.Time
			}
		case roomwebhook.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rw.Name = value.String
			}
		case roomwebhook.FieldSid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sid", values[i])
			} else if value.Valid {
				rw.Sid = value.String
			}
		case roomwebhook.FieldEvent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event", values[i])
			} else if value.Valid {
				rw.Event = value.String
			}
		case roomwebhook.FieldEventTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field event_time", values[i])
			} else if value.Valid {
				rw.EventTime = value.Time
			}
		case roomwebhook.FieldRoom:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field room", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rw.Room); err != nil {
					return fmt.Errorf("unmarshal field room: %w", err)
				}
			}
		case roomwebhook.FieldParticipant:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field participant", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rw.Participant); err != nil {
					return fmt.Errorf("unmarshal field participant: %w", err)
				}
			}
		case roomwebhook.FieldTrack:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field track", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rw.Track); err != nil {
					return fmt.Errorf("unmarshal field track: %w", err)
				}
			}
		case roomwebhook.FieldEgressInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field egressInfo", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rw.EgressInfo); err != nil {
					return fmt.Errorf("unmarshal field egressInfo: %w", err)
				}
			}
		case roomwebhook.FieldIngressInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ingressInfo", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rw.IngressInfo); err != nil {
					return fmt.Errorf("unmarshal field ingressInfo: %w", err)
				}
			}
		default:
			rw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoomWebhook.
// This includes values selected through modifiers, order, etc.
func (rw *RoomWebhook) Value(name string) (ent.Value, error) {
	return rw.selectValues.Get(name)
}

// Update returns a builder for updating this RoomWebhook.
// Note that you need to call RoomWebhook.Unwrap() before calling this method if this RoomWebhook
// was returned from a transaction, and the transaction was committed or rolled back.
func (rw *RoomWebhook) Update() *RoomWebhookUpdateOne {
	return NewRoomWebhookClient(rw.config).UpdateOne(rw)
}

// Unwrap unwraps the RoomWebhook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rw *RoomWebhook) Unwrap() *RoomWebhook {
	_tx, ok := rw.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoomWebhook is not a transactional entity")
	}
	rw.config.driver = _tx.drv
	return rw
}

// String implements the fmt.Stringer.
func (rw *RoomWebhook) String() string {
	var builder strings.Builder
	builder.WriteString("RoomWebhook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rw.ID))
	builder.WriteString("uuid=")
	builder.WriteString(rw.UUID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rw.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(rw.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rw.Name)
	builder.WriteString(", ")
	builder.WriteString("sid=")
	builder.WriteString(rw.Sid)
	builder.WriteString(", ")
	builder.WriteString("event=")
	builder.WriteString(rw.Event)
	builder.WriteString(", ")
	builder.WriteString("event_time=")
	builder.WriteString(rw.EventTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("room=")
	builder.WriteString(fmt.Sprintf("%v", rw.Room))
	builder.WriteString(", ")
	builder.WriteString("participant=")
	builder.WriteString(fmt.Sprintf("%v", rw.Participant))
	builder.WriteString(", ")
	builder.WriteString("track=")
	builder.WriteString(fmt.Sprintf("%v", rw.Track))
	builder.WriteString(", ")
	builder.WriteString("egressInfo=")
	builder.WriteString(fmt.Sprintf("%v", rw.EgressInfo))
	builder.WriteString(", ")
	builder.WriteString("ingressInfo=")
	builder.WriteString(fmt.Sprintf("%v", rw.IngressInfo))
	builder.WriteByte(')')
	return builder.String()
}

// RoomWebhooks is a parsable slice of RoomWebhook.
type RoomWebhooks []*RoomWebhook
