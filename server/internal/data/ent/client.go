// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"faceto-ai/internal/data/ent/migrate"

	"faceto-ai/internal/data/ent/auth"
	"faceto-ai/internal/data/ent/authtoken"
	"faceto-ai/internal/data/ent/link"
	"faceto-ai/internal/data/ent/room"
	"faceto-ai/internal/data/ent/roommessage"
	"faceto-ai/internal/data/ent/roomvod"
	"faceto-ai/internal/data/ent/roomwebhook"
	"faceto-ai/internal/data/ent/servicewebhooklog"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Auth is the client for interacting with the Auth builders.
	Auth *AuthClient
	// AuthToken is the client for interacting with the AuthToken builders.
	AuthToken *AuthTokenClient
	// Link is the client for interacting with the Link builders.
	Link *LinkClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// RoomMessage is the client for interacting with the RoomMessage builders.
	RoomMessage *RoomMessageClient
	// RoomVod is the client for interacting with the RoomVod builders.
	RoomVod *RoomVodClient
	// RoomWebhook is the client for interacting with the RoomWebhook builders.
	RoomWebhook *RoomWebhookClient
	// ServiceWebhookLog is the client for interacting with the ServiceWebhookLog builders.
	ServiceWebhookLog *ServiceWebhookLogClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Auth = NewAuthClient(c.config)
	c.AuthToken = NewAuthTokenClient(c.config)
	c.Link = NewLinkClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.RoomMessage = NewRoomMessageClient(c.config)
	c.RoomVod = NewRoomVodClient(c.config)
	c.RoomWebhook = NewRoomWebhookClient(c.config)
	c.ServiceWebhookLog = NewServiceWebhookLogClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Auth:              NewAuthClient(cfg),
		AuthToken:         NewAuthTokenClient(cfg),
		Link:              NewLinkClient(cfg),
		Room:              NewRoomClient(cfg),
		RoomMessage:       NewRoomMessageClient(cfg),
		RoomVod:           NewRoomVodClient(cfg),
		RoomWebhook:       NewRoomWebhookClient(cfg),
		ServiceWebhookLog: NewServiceWebhookLogClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Auth:              NewAuthClient(cfg),
		AuthToken:         NewAuthTokenClient(cfg),
		Link:              NewLinkClient(cfg),
		Room:              NewRoomClient(cfg),
		RoomMessage:       NewRoomMessageClient(cfg),
		RoomVod:           NewRoomVodClient(cfg),
		RoomWebhook:       NewRoomWebhookClient(cfg),
		ServiceWebhookLog: NewServiceWebhookLogClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Auth.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Auth, c.AuthToken, c.Link, c.Room, c.RoomMessage, c.RoomVod, c.RoomWebhook,
		c.ServiceWebhookLog,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Auth, c.AuthToken, c.Link, c.Room, c.RoomMessage, c.RoomVod, c.RoomWebhook,
		c.ServiceWebhookLog,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthMutation:
		return c.Auth.mutate(ctx, m)
	case *AuthTokenMutation:
		return c.AuthToken.mutate(ctx, m)
	case *LinkMutation:
		return c.Link.mutate(ctx, m)
	case *RoomMutation:
		return c.Room.mutate(ctx, m)
	case *RoomMessageMutation:
		return c.RoomMessage.mutate(ctx, m)
	case *RoomVodMutation:
		return c.RoomVod.mutate(ctx, m)
	case *RoomWebhookMutation:
		return c.RoomWebhook.mutate(ctx, m)
	case *ServiceWebhookLogMutation:
		return c.ServiceWebhookLog.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuthClient is a client for the Auth schema.
type AuthClient struct {
	config
}

// NewAuthClient returns a client for the Auth from the given config.
func NewAuthClient(c config) *AuthClient {
	return &AuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auth.Hooks(f(g(h())))`.
func (c *AuthClient) Use(hooks ...Hook) {
	c.hooks.Auth = append(c.hooks.Auth, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auth.Intercept(f(g(h())))`.
func (c *AuthClient) Intercept(interceptors ...Interceptor) {
	c.inters.Auth = append(c.inters.Auth, interceptors...)
}

// Create returns a builder for creating a Auth entity.
func (c *AuthClient) Create() *AuthCreate {
	mutation := newAuthMutation(c.config, OpCreate)
	return &AuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Auth entities.
func (c *AuthClient) CreateBulk(builders ...*AuthCreate) *AuthCreateBulk {
	return &AuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Auth.
func (c *AuthClient) Update() *AuthUpdate {
	mutation := newAuthMutation(c.config, OpUpdate)
	return &AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthClient) UpdateOne(a *Auth) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuth(a))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthClient) UpdateOneID(id uint64) *AuthUpdateOne {
	mutation := newAuthMutation(c.config, OpUpdateOne, withAuthID(id))
	return &AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Auth.
func (c *AuthClient) Delete() *AuthDelete {
	mutation := newAuthMutation(c.config, OpDelete)
	return &AuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthClient) DeleteOne(a *Auth) *AuthDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthClient) DeleteOneID(id uint64) *AuthDeleteOne {
	builder := c.Delete().Where(auth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthDeleteOne{builder}
}

// Query returns a query builder for Auth.
func (c *AuthClient) Query() *AuthQuery {
	return &AuthQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuth},
		inters: c.Interceptors(),
	}
}

// Get returns a Auth entity by its id.
func (c *AuthClient) Get(ctx context.Context, id uint64) (*Auth, error) {
	return c.Query().Where(auth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthClient) GetX(ctx context.Context, id uint64) *Auth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthClient) Hooks() []Hook {
	return c.hooks.Auth
}

// Interceptors returns the client interceptors.
func (c *AuthClient) Interceptors() []Interceptor {
	return c.inters.Auth
}

func (c *AuthClient) mutate(ctx context.Context, m *AuthMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Auth mutation op: %q", m.Op())
	}
}

// AuthTokenClient is a client for the AuthToken schema.
type AuthTokenClient struct {
	config
}

// NewAuthTokenClient returns a client for the AuthToken from the given config.
func NewAuthTokenClient(c config) *AuthTokenClient {
	return &AuthTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authtoken.Hooks(f(g(h())))`.
func (c *AuthTokenClient) Use(hooks ...Hook) {
	c.hooks.AuthToken = append(c.hooks.AuthToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authtoken.Intercept(f(g(h())))`.
func (c *AuthTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthToken = append(c.inters.AuthToken, interceptors...)
}

// Create returns a builder for creating a AuthToken entity.
func (c *AuthTokenClient) Create() *AuthTokenCreate {
	mutation := newAuthTokenMutation(c.config, OpCreate)
	return &AuthTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthToken entities.
func (c *AuthTokenClient) CreateBulk(builders ...*AuthTokenCreate) *AuthTokenCreateBulk {
	return &AuthTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthToken.
func (c *AuthTokenClient) Update() *AuthTokenUpdate {
	mutation := newAuthTokenMutation(c.config, OpUpdate)
	return &AuthTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthTokenClient) UpdateOne(at *AuthToken) *AuthTokenUpdateOne {
	mutation := newAuthTokenMutation(c.config, OpUpdateOne, withAuthToken(at))
	return &AuthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthTokenClient) UpdateOneID(id uint64) *AuthTokenUpdateOne {
	mutation := newAuthTokenMutation(c.config, OpUpdateOne, withAuthTokenID(id))
	return &AuthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthToken.
func (c *AuthTokenClient) Delete() *AuthTokenDelete {
	mutation := newAuthTokenMutation(c.config, OpDelete)
	return &AuthTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthTokenClient) DeleteOne(at *AuthToken) *AuthTokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthTokenClient) DeleteOneID(id uint64) *AuthTokenDeleteOne {
	builder := c.Delete().Where(authtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthTokenDeleteOne{builder}
}

// Query returns a query builder for AuthToken.
func (c *AuthTokenClient) Query() *AuthTokenQuery {
	return &AuthTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthToken},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthToken entity by its id.
func (c *AuthTokenClient) Get(ctx context.Context, id uint64) (*AuthToken, error) {
	return c.Query().Where(authtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthTokenClient) GetX(ctx context.Context, id uint64) *AuthToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthTokenClient) Hooks() []Hook {
	return c.hooks.AuthToken
}

// Interceptors returns the client interceptors.
func (c *AuthTokenClient) Interceptors() []Interceptor {
	return c.inters.AuthToken
}

func (c *AuthTokenClient) mutate(ctx context.Context, m *AuthTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuthToken mutation op: %q", m.Op())
	}
}

// LinkClient is a client for the Link schema.
type LinkClient struct {
	config
}

// NewLinkClient returns a client for the Link from the given config.
func NewLinkClient(c config) *LinkClient {
	return &LinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `link.Hooks(f(g(h())))`.
func (c *LinkClient) Use(hooks ...Hook) {
	c.hooks.Link = append(c.hooks.Link, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `link.Intercept(f(g(h())))`.
func (c *LinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.Link = append(c.inters.Link, interceptors...)
}

// Create returns a builder for creating a Link entity.
func (c *LinkClient) Create() *LinkCreate {
	mutation := newLinkMutation(c.config, OpCreate)
	return &LinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Link entities.
func (c *LinkClient) CreateBulk(builders ...*LinkCreate) *LinkCreateBulk {
	return &LinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Link.
func (c *LinkClient) Update() *LinkUpdate {
	mutation := newLinkMutation(c.config, OpUpdate)
	return &LinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinkClient) UpdateOne(l *Link) *LinkUpdateOne {
	mutation := newLinkMutation(c.config, OpUpdateOne, withLink(l))
	return &LinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinkClient) UpdateOneID(id uint64) *LinkUpdateOne {
	mutation := newLinkMutation(c.config, OpUpdateOne, withLinkID(id))
	return &LinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Link.
func (c *LinkClient) Delete() *LinkDelete {
	mutation := newLinkMutation(c.config, OpDelete)
	return &LinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LinkClient) DeleteOne(l *Link) *LinkDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LinkClient) DeleteOneID(id uint64) *LinkDeleteOne {
	builder := c.Delete().Where(link.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinkDeleteOne{builder}
}

// Query returns a query builder for Link.
func (c *LinkClient) Query() *LinkQuery {
	return &LinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLink},
		inters: c.Interceptors(),
	}
}

// Get returns a Link entity by its id.
func (c *LinkClient) Get(ctx context.Context, id uint64) (*Link, error) {
	return c.Query().Where(link.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinkClient) GetX(ctx context.Context, id uint64) *Link {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LinkClient) Hooks() []Hook {
	return c.hooks.Link
}

// Interceptors returns the client interceptors.
func (c *LinkClient) Interceptors() []Interceptor {
	return c.inters.Link
}

func (c *LinkClient) mutate(ctx context.Context, m *LinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Link mutation op: %q", m.Op())
	}
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `room.Intercept(f(g(h())))`.
func (c *RoomClient) Intercept(interceptors ...Interceptor) {
	c.inters.Room = append(c.inters.Room, interceptors...)
}

// Create returns a builder for creating a Room entity.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Room entities.
func (c *RoomClient) CreateBulk(builders ...*RoomCreate) *RoomCreateBulk {
	return &RoomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id uint64) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoomClient) DeleteOneID(id uint64) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Query returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoom},
		inters: c.Interceptors(),
	}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id uint64) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id uint64) *Room {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// Interceptors returns the client interceptors.
func (c *RoomClient) Interceptors() []Interceptor {
	return c.inters.Room
}

func (c *RoomClient) mutate(ctx context.Context, m *RoomMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoomCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoomDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Room mutation op: %q", m.Op())
	}
}

// RoomMessageClient is a client for the RoomMessage schema.
type RoomMessageClient struct {
	config
}

// NewRoomMessageClient returns a client for the RoomMessage from the given config.
func NewRoomMessageClient(c config) *RoomMessageClient {
	return &RoomMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roommessage.Hooks(f(g(h())))`.
func (c *RoomMessageClient) Use(hooks ...Hook) {
	c.hooks.RoomMessage = append(c.hooks.RoomMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `roommessage.Intercept(f(g(h())))`.
func (c *RoomMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoomMessage = append(c.inters.RoomMessage, interceptors...)
}

// Create returns a builder for creating a RoomMessage entity.
func (c *RoomMessageClient) Create() *RoomMessageCreate {
	mutation := newRoomMessageMutation(c.config, OpCreate)
	return &RoomMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoomMessage entities.
func (c *RoomMessageClient) CreateBulk(builders ...*RoomMessageCreate) *RoomMessageCreateBulk {
	return &RoomMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoomMessage.
func (c *RoomMessageClient) Update() *RoomMessageUpdate {
	mutation := newRoomMessageMutation(c.config, OpUpdate)
	return &RoomMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomMessageClient) UpdateOne(rm *RoomMessage) *RoomMessageUpdateOne {
	mutation := newRoomMessageMutation(c.config, OpUpdateOne, withRoomMessage(rm))
	return &RoomMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomMessageClient) UpdateOneID(id uint64) *RoomMessageUpdateOne {
	mutation := newRoomMessageMutation(c.config, OpUpdateOne, withRoomMessageID(id))
	return &RoomMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomMessage.
func (c *RoomMessageClient) Delete() *RoomMessageDelete {
	mutation := newRoomMessageMutation(c.config, OpDelete)
	return &RoomMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoomMessageClient) DeleteOne(rm *RoomMessage) *RoomMessageDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoomMessageClient) DeleteOneID(id uint64) *RoomMessageDeleteOne {
	builder := c.Delete().Where(roommessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomMessageDeleteOne{builder}
}

// Query returns a query builder for RoomMessage.
func (c *RoomMessageClient) Query() *RoomMessageQuery {
	return &RoomMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoomMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a RoomMessage entity by its id.
func (c *RoomMessageClient) Get(ctx context.Context, id uint64) (*RoomMessage, error) {
	return c.Query().Where(roommessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomMessageClient) GetX(ctx context.Context, id uint64) *RoomMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoomMessageClient) Hooks() []Hook {
	return c.hooks.RoomMessage
}

// Interceptors returns the client interceptors.
func (c *RoomMessageClient) Interceptors() []Interceptor {
	return c.inters.RoomMessage
}

func (c *RoomMessageClient) mutate(ctx context.Context, m *RoomMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoomMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoomMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoomMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoomMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoomMessage mutation op: %q", m.Op())
	}
}

// RoomVodClient is a client for the RoomVod schema.
type RoomVodClient struct {
	config
}

// NewRoomVodClient returns a client for the RoomVod from the given config.
func NewRoomVodClient(c config) *RoomVodClient {
	return &RoomVodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomvod.Hooks(f(g(h())))`.
func (c *RoomVodClient) Use(hooks ...Hook) {
	c.hooks.RoomVod = append(c.hooks.RoomVod, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `roomvod.Intercept(f(g(h())))`.
func (c *RoomVodClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoomVod = append(c.inters.RoomVod, interceptors...)
}

// Create returns a builder for creating a RoomVod entity.
func (c *RoomVodClient) Create() *RoomVodCreate {
	mutation := newRoomVodMutation(c.config, OpCreate)
	return &RoomVodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoomVod entities.
func (c *RoomVodClient) CreateBulk(builders ...*RoomVodCreate) *RoomVodCreateBulk {
	return &RoomVodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoomVod.
func (c *RoomVodClient) Update() *RoomVodUpdate {
	mutation := newRoomVodMutation(c.config, OpUpdate)
	return &RoomVodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomVodClient) UpdateOne(rv *RoomVod) *RoomVodUpdateOne {
	mutation := newRoomVodMutation(c.config, OpUpdateOne, withRoomVod(rv))
	return &RoomVodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomVodClient) UpdateOneID(id uint64) *RoomVodUpdateOne {
	mutation := newRoomVodMutation(c.config, OpUpdateOne, withRoomVodID(id))
	return &RoomVodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomVod.
func (c *RoomVodClient) Delete() *RoomVodDelete {
	mutation := newRoomVodMutation(c.config, OpDelete)
	return &RoomVodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoomVodClient) DeleteOne(rv *RoomVod) *RoomVodDeleteOne {
	return c.DeleteOneID(rv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoomVodClient) DeleteOneID(id uint64) *RoomVodDeleteOne {
	builder := c.Delete().Where(roomvod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomVodDeleteOne{builder}
}

// Query returns a query builder for RoomVod.
func (c *RoomVodClient) Query() *RoomVodQuery {
	return &RoomVodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoomVod},
		inters: c.Interceptors(),
	}
}

// Get returns a RoomVod entity by its id.
func (c *RoomVodClient) Get(ctx context.Context, id uint64) (*RoomVod, error) {
	return c.Query().Where(roomvod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomVodClient) GetX(ctx context.Context, id uint64) *RoomVod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoomVodClient) Hooks() []Hook {
	return c.hooks.RoomVod
}

// Interceptors returns the client interceptors.
func (c *RoomVodClient) Interceptors() []Interceptor {
	return c.inters.RoomVod
}

func (c *RoomVodClient) mutate(ctx context.Context, m *RoomVodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoomVodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoomVodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoomVodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoomVodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoomVod mutation op: %q", m.Op())
	}
}

// RoomWebhookClient is a client for the RoomWebhook schema.
type RoomWebhookClient struct {
	config
}

// NewRoomWebhookClient returns a client for the RoomWebhook from the given config.
func NewRoomWebhookClient(c config) *RoomWebhookClient {
	return &RoomWebhookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomwebhook.Hooks(f(g(h())))`.
func (c *RoomWebhookClient) Use(hooks ...Hook) {
	c.hooks.RoomWebhook = append(c.hooks.RoomWebhook, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `roomwebhook.Intercept(f(g(h())))`.
func (c *RoomWebhookClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoomWebhook = append(c.inters.RoomWebhook, interceptors...)
}

// Create returns a builder for creating a RoomWebhook entity.
func (c *RoomWebhookClient) Create() *RoomWebhookCreate {
	mutation := newRoomWebhookMutation(c.config, OpCreate)
	return &RoomWebhookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoomWebhook entities.
func (c *RoomWebhookClient) CreateBulk(builders ...*RoomWebhookCreate) *RoomWebhookCreateBulk {
	return &RoomWebhookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoomWebhook.
func (c *RoomWebhookClient) Update() *RoomWebhookUpdate {
	mutation := newRoomWebhookMutation(c.config, OpUpdate)
	return &RoomWebhookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomWebhookClient) UpdateOne(rw *RoomWebhook) *RoomWebhookUpdateOne {
	mutation := newRoomWebhookMutation(c.config, OpUpdateOne, withRoomWebhook(rw))
	return &RoomWebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomWebhookClient) UpdateOneID(id uint64) *RoomWebhookUpdateOne {
	mutation := newRoomWebhookMutation(c.config, OpUpdateOne, withRoomWebhookID(id))
	return &RoomWebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomWebhook.
func (c *RoomWebhookClient) Delete() *RoomWebhookDelete {
	mutation := newRoomWebhookMutation(c.config, OpDelete)
	return &RoomWebhookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoomWebhookClient) DeleteOne(rw *RoomWebhook) *RoomWebhookDeleteOne {
	return c.DeleteOneID(rw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoomWebhookClient) DeleteOneID(id uint64) *RoomWebhookDeleteOne {
	builder := c.Delete().Where(roomwebhook.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomWebhookDeleteOne{builder}
}

// Query returns a query builder for RoomWebhook.
func (c *RoomWebhookClient) Query() *RoomWebhookQuery {
	return &RoomWebhookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoomWebhook},
		inters: c.Interceptors(),
	}
}

// Get returns a RoomWebhook entity by its id.
func (c *RoomWebhookClient) Get(ctx context.Context, id uint64) (*RoomWebhook, error) {
	return c.Query().Where(roomwebhook.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomWebhookClient) GetX(ctx context.Context, id uint64) *RoomWebhook {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoomWebhookClient) Hooks() []Hook {
	return c.hooks.RoomWebhook
}

// Interceptors returns the client interceptors.
func (c *RoomWebhookClient) Interceptors() []Interceptor {
	return c.inters.RoomWebhook
}

func (c *RoomWebhookClient) mutate(ctx context.Context, m *RoomWebhookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoomWebhookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoomWebhookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoomWebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoomWebhookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoomWebhook mutation op: %q", m.Op())
	}
}

// ServiceWebhookLogClient is a client for the ServiceWebhookLog schema.
type ServiceWebhookLogClient struct {
	config
}

// NewServiceWebhookLogClient returns a client for the ServiceWebhookLog from the given config.
func NewServiceWebhookLogClient(c config) *ServiceWebhookLogClient {
	return &ServiceWebhookLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicewebhooklog.Hooks(f(g(h())))`.
func (c *ServiceWebhookLogClient) Use(hooks ...Hook) {
	c.hooks.ServiceWebhookLog = append(c.hooks.ServiceWebhookLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicewebhooklog.Intercept(f(g(h())))`.
func (c *ServiceWebhookLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceWebhookLog = append(c.inters.ServiceWebhookLog, interceptors...)
}

// Create returns a builder for creating a ServiceWebhookLog entity.
func (c *ServiceWebhookLogClient) Create() *ServiceWebhookLogCreate {
	mutation := newServiceWebhookLogMutation(c.config, OpCreate)
	return &ServiceWebhookLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceWebhookLog entities.
func (c *ServiceWebhookLogClient) CreateBulk(builders ...*ServiceWebhookLogCreate) *ServiceWebhookLogCreateBulk {
	return &ServiceWebhookLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceWebhookLog.
func (c *ServiceWebhookLogClient) Update() *ServiceWebhookLogUpdate {
	mutation := newServiceWebhookLogMutation(c.config, OpUpdate)
	return &ServiceWebhookLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceWebhookLogClient) UpdateOne(swl *ServiceWebhookLog) *ServiceWebhookLogUpdateOne {
	mutation := newServiceWebhookLogMutation(c.config, OpUpdateOne, withServiceWebhookLog(swl))
	return &ServiceWebhookLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceWebhookLogClient) UpdateOneID(id uint64) *ServiceWebhookLogUpdateOne {
	mutation := newServiceWebhookLogMutation(c.config, OpUpdateOne, withServiceWebhookLogID(id))
	return &ServiceWebhookLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceWebhookLog.
func (c *ServiceWebhookLogClient) Delete() *ServiceWebhookLogDelete {
	mutation := newServiceWebhookLogMutation(c.config, OpDelete)
	return &ServiceWebhookLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceWebhookLogClient) DeleteOne(swl *ServiceWebhookLog) *ServiceWebhookLogDeleteOne {
	return c.DeleteOneID(swl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceWebhookLogClient) DeleteOneID(id uint64) *ServiceWebhookLogDeleteOne {
	builder := c.Delete().Where(servicewebhooklog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceWebhookLogDeleteOne{builder}
}

// Query returns a query builder for ServiceWebhookLog.
func (c *ServiceWebhookLogClient) Query() *ServiceWebhookLogQuery {
	return &ServiceWebhookLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceWebhookLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceWebhookLog entity by its id.
func (c *ServiceWebhookLogClient) Get(ctx context.Context, id uint64) (*ServiceWebhookLog, error) {
	return c.Query().Where(servicewebhooklog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceWebhookLogClient) GetX(ctx context.Context, id uint64) *ServiceWebhookLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServiceWebhookLogClient) Hooks() []Hook {
	return c.hooks.ServiceWebhookLog
}

// Interceptors returns the client interceptors.
func (c *ServiceWebhookLogClient) Interceptors() []Interceptor {
	return c.inters.ServiceWebhookLog
}

func (c *ServiceWebhookLogClient) mutate(ctx context.Context, m *ServiceWebhookLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceWebhookLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceWebhookLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceWebhookLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceWebhookLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceWebhookLog mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Auth, AuthToken, Link, Room, RoomMessage, RoomVod, RoomWebhook,
		ServiceWebhookLog []ent.Hook
	}
	inters struct {
		Auth, AuthToken, Link, Room, RoomMessage, RoomVod, RoomWebhook,
		ServiceWebhookLog []ent.Interceptor
	}
)
