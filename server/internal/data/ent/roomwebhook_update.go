// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/predicate"
	"faceto-ai/internal/data/ent/roomwebhook"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/livekit/protocol/livekit"
)

// RoomWebhookUpdate is the builder for updating RoomWebhook entities.
type RoomWebhookUpdate struct {
	config
	hooks    []Hook
	mutation *RoomWebhookMutation
}

// Where appends a list predicates to the RoomWebhookUpdate builder.
func (rwu *RoomWebhookUpdate) Where(ps ...predicate.RoomWebhook) *RoomWebhookUpdate {
	rwu.mutation.Where(ps...)
	return rwu
}

// SetUUID sets the "uuid" field.
func (rwu *RoomWebhookUpdate) SetUUID(s string) *RoomWebhookUpdate {
	rwu.mutation.SetUUID(s)
	return rwu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (rwu *RoomWebhookUpdate) SetNillableUUID(s *string) *RoomWebhookUpdate {
	if s != nil {
		rwu.SetUUID(*s)
	}
	return rwu
}

// SetCreatedAt sets the "created_at" field.
func (rwu *RoomWebhookUpdate) SetCreatedAt(t time.Time) *RoomWebhookUpdate {
	rwu.mutation.SetCreatedAt(t)
	return rwu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rwu *RoomWebhookUpdate) SetNillableCreatedAt(t *time.Time) *RoomWebhookUpdate {
	if t != nil {
		rwu.SetCreatedAt(*t)
	}
	return rwu
}

// SetUpdatedAt sets the "updated_at" field.
func (rwu *RoomWebhookUpdate) SetUpdatedAt(t time.Time) *RoomWebhookUpdate {
	rwu.mutation.SetUpdatedAt(t)
	return rwu
}

// SetDeletedAt sets the "deleted_at" field.
func (rwu *RoomWebhookUpdate) SetDeletedAt(t time.Time) *RoomWebhookUpdate {
	rwu.mutation.SetDeletedAt(t)
	return rwu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rwu *RoomWebhookUpdate) SetNillableDeletedAt(t *time.Time) *RoomWebhookUpdate {
	if t != nil {
		rwu.SetDeletedAt(*t)
	}
	return rwu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rwu *RoomWebhookUpdate) ClearDeletedAt() *RoomWebhookUpdate {
	rwu.mutation.ClearDeletedAt()
	return rwu
}

// SetName sets the "name" field.
func (rwu *RoomWebhookUpdate) SetName(s string) *RoomWebhookUpdate {
	rwu.mutation.SetName(s)
	return rwu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rwu *RoomWebhookUpdate) SetNillableName(s *string) *RoomWebhookUpdate {
	if s != nil {
		rwu.SetName(*s)
	}
	return rwu
}

// SetSid sets the "sid" field.
func (rwu *RoomWebhookUpdate) SetSid(s string) *RoomWebhookUpdate {
	rwu.mutation.SetSid(s)
	return rwu
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (rwu *RoomWebhookUpdate) SetNillableSid(s *string) *RoomWebhookUpdate {
	if s != nil {
		rwu.SetSid(*s)
	}
	return rwu
}

// SetEvent sets the "event" field.
func (rwu *RoomWebhookUpdate) SetEvent(s string) *RoomWebhookUpdate {
	rwu.mutation.SetEvent(s)
	return rwu
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (rwu *RoomWebhookUpdate) SetNillableEvent(s *string) *RoomWebhookUpdate {
	if s != nil {
		rwu.SetEvent(*s)
	}
	return rwu
}

// SetEventTime sets the "event_time" field.
func (rwu *RoomWebhookUpdate) SetEventTime(t time.Time) *RoomWebhookUpdate {
	rwu.mutation.SetEventTime(t)
	return rwu
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (rwu *RoomWebhookUpdate) SetNillableEventTime(t *time.Time) *RoomWebhookUpdate {
	if t != nil {
		rwu.SetEventTime(*t)
	}
	return rwu
}

// ClearEventTime clears the value of the "event_time" field.
func (rwu *RoomWebhookUpdate) ClearEventTime() *RoomWebhookUpdate {
	rwu.mutation.ClearEventTime()
	return rwu
}

// SetRoom sets the "room" field.
func (rwu *RoomWebhookUpdate) SetRoom(l *livekit.Room) *RoomWebhookUpdate {
	rwu.mutation.SetRoom(l)
	return rwu
}

// ClearRoom clears the value of the "room" field.
func (rwu *RoomWebhookUpdate) ClearRoom() *RoomWebhookUpdate {
	rwu.mutation.ClearRoom()
	return rwu
}

// SetParticipant sets the "participant" field.
func (rwu *RoomWebhookUpdate) SetParticipant(li *livekit.ParticipantInfo) *RoomWebhookUpdate {
	rwu.mutation.SetParticipant(li)
	return rwu
}

// ClearParticipant clears the value of the "participant" field.
func (rwu *RoomWebhookUpdate) ClearParticipant() *RoomWebhookUpdate {
	rwu.mutation.ClearParticipant()
	return rwu
}

// SetTrack sets the "track" field.
func (rwu *RoomWebhookUpdate) SetTrack(li *livekit.TrackInfo) *RoomWebhookUpdate {
	rwu.mutation.SetTrack(li)
	return rwu
}

// ClearTrack clears the value of the "track" field.
func (rwu *RoomWebhookUpdate) ClearTrack() *RoomWebhookUpdate {
	rwu.mutation.ClearTrack()
	return rwu
}

// SetEgressInfo sets the "egressInfo" field.
func (rwu *RoomWebhookUpdate) SetEgressInfo(li *livekit.EgressInfo) *RoomWebhookUpdate {
	rwu.mutation.SetEgressInfo(li)
	return rwu
}

// ClearEgressInfo clears the value of the "egressInfo" field.
func (rwu *RoomWebhookUpdate) ClearEgressInfo() *RoomWebhookUpdate {
	rwu.mutation.ClearEgressInfo()
	return rwu
}

// SetIngressInfo sets the "ingressInfo" field.
func (rwu *RoomWebhookUpdate) SetIngressInfo(li *livekit.IngressInfo) *RoomWebhookUpdate {
	rwu.mutation.SetIngressInfo(li)
	return rwu
}

// ClearIngressInfo clears the value of the "ingressInfo" field.
func (rwu *RoomWebhookUpdate) ClearIngressInfo() *RoomWebhookUpdate {
	rwu.mutation.ClearIngressInfo()
	return rwu
}

// Mutation returns the RoomWebhookMutation object of the builder.
func (rwu *RoomWebhookUpdate) Mutation() *RoomWebhookMutation {
	return rwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rwu *RoomWebhookUpdate) Save(ctx context.Context) (int, error) {
	rwu.defaults()
	return withHooks(ctx, rwu.sqlSave, rwu.mutation, rwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwu *RoomWebhookUpdate) SaveX(ctx context.Context) int {
	affected, err := rwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rwu *RoomWebhookUpdate) Exec(ctx context.Context) error {
	_, err := rwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwu *RoomWebhookUpdate) ExecX(ctx context.Context) {
	if err := rwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rwu *RoomWebhookUpdate) defaults() {
	if _, ok := rwu.mutation.UpdatedAt(); !ok {
		v := roomwebhook.UpdateDefaultUpdatedAt()
		rwu.mutation.SetUpdatedAt(v)
	}
}

func (rwu *RoomWebhookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(roomwebhook.Table, roomwebhook.Columns, sqlgraph.NewFieldSpec(roomwebhook.FieldID, field.TypeUint64))
	if ps := rwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rwu.mutation.UUID(); ok {
		_spec.SetField(roomwebhook.FieldUUID, field.TypeString, value)
	}
	if value, ok := rwu.mutation.CreatedAt(); ok {
		_spec.SetField(roomwebhook.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rwu.mutation.UpdatedAt(); ok {
		_spec.SetField(roomwebhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rwu.mutation.DeletedAt(); ok {
		_spec.SetField(roomwebhook.FieldDeletedAt, field.TypeTime, value)
	}
	if rwu.mutation.DeletedAtCleared() {
		_spec.ClearField(roomwebhook.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rwu.mutation.Name(); ok {
		_spec.SetField(roomwebhook.FieldName, field.TypeString, value)
	}
	if value, ok := rwu.mutation.Sid(); ok {
		_spec.SetField(roomwebhook.FieldSid, field.TypeString, value)
	}
	if value, ok := rwu.mutation.Event(); ok {
		_spec.SetField(roomwebhook.FieldEvent, field.TypeString, value)
	}
	if value, ok := rwu.mutation.EventTime(); ok {
		_spec.SetField(roomwebhook.FieldEventTime, field.TypeTime, value)
	}
	if rwu.mutation.EventTimeCleared() {
		_spec.ClearField(roomwebhook.FieldEventTime, field.TypeTime)
	}
	if value, ok := rwu.mutation.Room(); ok {
		_spec.SetField(roomwebhook.FieldRoom, field.TypeJSON, value)
	}
	if rwu.mutation.RoomCleared() {
		_spec.ClearField(roomwebhook.FieldRoom, field.TypeJSON)
	}
	if value, ok := rwu.mutation.Participant(); ok {
		_spec.SetField(roomwebhook.FieldParticipant, field.TypeJSON, value)
	}
	if rwu.mutation.ParticipantCleared() {
		_spec.ClearField(roomwebhook.FieldParticipant, field.TypeJSON)
	}
	if value, ok := rwu.mutation.Track(); ok {
		_spec.SetField(roomwebhook.FieldTrack, field.TypeJSON, value)
	}
	if rwu.mutation.TrackCleared() {
		_spec.ClearField(roomwebhook.FieldTrack, field.TypeJSON)
	}
	if value, ok := rwu.mutation.EgressInfo(); ok {
		_spec.SetField(roomwebhook.FieldEgressInfo, field.TypeJSON, value)
	}
	if rwu.mutation.EgressInfoCleared() {
		_spec.ClearField(roomwebhook.FieldEgressInfo, field.TypeJSON)
	}
	if value, ok := rwu.mutation.IngressInfo(); ok {
		_spec.SetField(roomwebhook.FieldIngressInfo, field.TypeJSON, value)
	}
	if rwu.mutation.IngressInfoCleared() {
		_spec.ClearField(roomwebhook.FieldIngressInfo, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomwebhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rwu.mutation.done = true
	return n, nil
}

// RoomWebhookUpdateOne is the builder for updating a single RoomWebhook entity.
type RoomWebhookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomWebhookMutation
}

// SetUUID sets the "uuid" field.
func (rwuo *RoomWebhookUpdateOne) SetUUID(s string) *RoomWebhookUpdateOne {
	rwuo.mutation.SetUUID(s)
	return rwuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (rwuo *RoomWebhookUpdateOne) SetNillableUUID(s *string) *RoomWebhookUpdateOne {
	if s != nil {
		rwuo.SetUUID(*s)
	}
	return rwuo
}

// SetCreatedAt sets the "created_at" field.
func (rwuo *RoomWebhookUpdateOne) SetCreatedAt(t time.Time) *RoomWebhookUpdateOne {
	rwuo.mutation.SetCreatedAt(t)
	return rwuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rwuo *RoomWebhookUpdateOne) SetNillableCreatedAt(t *time.Time) *RoomWebhookUpdateOne {
	if t != nil {
		rwuo.SetCreatedAt(*t)
	}
	return rwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rwuo *RoomWebhookUpdateOne) SetUpdatedAt(t time.Time) *RoomWebhookUpdateOne {
	rwuo.mutation.SetUpdatedAt(t)
	return rwuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rwuo *RoomWebhookUpdateOne) SetDeletedAt(t time.Time) *RoomWebhookUpdateOne {
	rwuo.mutation.SetDeletedAt(t)
	return rwuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rwuo *RoomWebhookUpdateOne) SetNillableDeletedAt(t *time.Time) *RoomWebhookUpdateOne {
	if t != nil {
		rwuo.SetDeletedAt(*t)
	}
	return rwuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rwuo *RoomWebhookUpdateOne) ClearDeletedAt() *RoomWebhookUpdateOne {
	rwuo.mutation.ClearDeletedAt()
	return rwuo
}

// SetName sets the "name" field.
func (rwuo *RoomWebhookUpdateOne) SetName(s string) *RoomWebhookUpdateOne {
	rwuo.mutation.SetName(s)
	return rwuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rwuo *RoomWebhookUpdateOne) SetNillableName(s *string) *RoomWebhookUpdateOne {
	if s != nil {
		rwuo.SetName(*s)
	}
	return rwuo
}

// SetSid sets the "sid" field.
func (rwuo *RoomWebhookUpdateOne) SetSid(s string) *RoomWebhookUpdateOne {
	rwuo.mutation.SetSid(s)
	return rwuo
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (rwuo *RoomWebhookUpdateOne) SetNillableSid(s *string) *RoomWebhookUpdateOne {
	if s != nil {
		rwuo.SetSid(*s)
	}
	return rwuo
}

// SetEvent sets the "event" field.
func (rwuo *RoomWebhookUpdateOne) SetEvent(s string) *RoomWebhookUpdateOne {
	rwuo.mutation.SetEvent(s)
	return rwuo
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (rwuo *RoomWebhookUpdateOne) SetNillableEvent(s *string) *RoomWebhookUpdateOne {
	if s != nil {
		rwuo.SetEvent(*s)
	}
	return rwuo
}

// SetEventTime sets the "event_time" field.
func (rwuo *RoomWebhookUpdateOne) SetEventTime(t time.Time) *RoomWebhookUpdateOne {
	rwuo.mutation.SetEventTime(t)
	return rwuo
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (rwuo *RoomWebhookUpdateOne) SetNillableEventTime(t *time.Time) *RoomWebhookUpdateOne {
	if t != nil {
		rwuo.SetEventTime(*t)
	}
	return rwuo
}

// ClearEventTime clears the value of the "event_time" field.
func (rwuo *RoomWebhookUpdateOne) ClearEventTime() *RoomWebhookUpdateOne {
	rwuo.mutation.ClearEventTime()
	return rwuo
}

// SetRoom sets the "room" field.
func (rwuo *RoomWebhookUpdateOne) SetRoom(l *livekit.Room) *RoomWebhookUpdateOne {
	rwuo.mutation.SetRoom(l)
	return rwuo
}

// ClearRoom clears the value of the "room" field.
func (rwuo *RoomWebhookUpdateOne) ClearRoom() *RoomWebhookUpdateOne {
	rwuo.mutation.ClearRoom()
	return rwuo
}

// SetParticipant sets the "participant" field.
func (rwuo *RoomWebhookUpdateOne) SetParticipant(li *livekit.ParticipantInfo) *RoomWebhookUpdateOne {
	rwuo.mutation.SetParticipant(li)
	return rwuo
}

// ClearParticipant clears the value of the "participant" field.
func (rwuo *RoomWebhookUpdateOne) ClearParticipant() *RoomWebhookUpdateOne {
	rwuo.mutation.ClearParticipant()
	return rwuo
}

// SetTrack sets the "track" field.
func (rwuo *RoomWebhookUpdateOne) SetTrack(li *livekit.TrackInfo) *RoomWebhookUpdateOne {
	rwuo.mutation.SetTrack(li)
	return rwuo
}

// ClearTrack clears the value of the "track" field.
func (rwuo *RoomWebhookUpdateOne) ClearTrack() *RoomWebhookUpdateOne {
	rwuo.mutation.ClearTrack()
	return rwuo
}

// SetEgressInfo sets the "egressInfo" field.
func (rwuo *RoomWebhookUpdateOne) SetEgressInfo(li *livekit.EgressInfo) *RoomWebhookUpdateOne {
	rwuo.mutation.SetEgressInfo(li)
	return rwuo
}

// ClearEgressInfo clears the value of the "egressInfo" field.
func (rwuo *RoomWebhookUpdateOne) ClearEgressInfo() *RoomWebhookUpdateOne {
	rwuo.mutation.ClearEgressInfo()
	return rwuo
}

// SetIngressInfo sets the "ingressInfo" field.
func (rwuo *RoomWebhookUpdateOne) SetIngressInfo(li *livekit.IngressInfo) *RoomWebhookUpdateOne {
	rwuo.mutation.SetIngressInfo(li)
	return rwuo
}

// ClearIngressInfo clears the value of the "ingressInfo" field.
func (rwuo *RoomWebhookUpdateOne) ClearIngressInfo() *RoomWebhookUpdateOne {
	rwuo.mutation.ClearIngressInfo()
	return rwuo
}

// Mutation returns the RoomWebhookMutation object of the builder.
func (rwuo *RoomWebhookUpdateOne) Mutation() *RoomWebhookMutation {
	return rwuo.mutation
}

// Where appends a list predicates to the RoomWebhookUpdate builder.
func (rwuo *RoomWebhookUpdateOne) Where(ps ...predicate.RoomWebhook) *RoomWebhookUpdateOne {
	rwuo.mutation.Where(ps...)
	return rwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rwuo *RoomWebhookUpdateOne) Select(field string, fields ...string) *RoomWebhookUpdateOne {
	rwuo.fields = append([]string{field}, fields...)
	return rwuo
}

// Save executes the query and returns the updated RoomWebhook entity.
func (rwuo *RoomWebhookUpdateOne) Save(ctx context.Context) (*RoomWebhook, error) {
	rwuo.defaults()
	return withHooks(ctx, rwuo.sqlSave, rwuo.mutation, rwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rwuo *RoomWebhookUpdateOne) SaveX(ctx context.Context) *RoomWebhook {
	node, err := rwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rwuo *RoomWebhookUpdateOne) Exec(ctx context.Context) error {
	_, err := rwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwuo *RoomWebhookUpdateOne) ExecX(ctx context.Context) {
	if err := rwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rwuo *RoomWebhookUpdateOne) defaults() {
	if _, ok := rwuo.mutation.UpdatedAt(); !ok {
		v := roomwebhook.UpdateDefaultUpdatedAt()
		rwuo.mutation.SetUpdatedAt(v)
	}
}

func (rwuo *RoomWebhookUpdateOne) sqlSave(ctx context.Context) (_node *RoomWebhook, err error) {
	_spec := sqlgraph.NewUpdateSpec(roomwebhook.Table, roomwebhook.Columns, sqlgraph.NewFieldSpec(roomwebhook.FieldID, field.TypeUint64))
	id, ok := rwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoomWebhook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roomwebhook.FieldID)
		for _, f := range fields {
			if !roomwebhook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roomwebhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rwuo.mutation.UUID(); ok {
		_spec.SetField(roomwebhook.FieldUUID, field.TypeString, value)
	}
	if value, ok := rwuo.mutation.CreatedAt(); ok {
		_spec.SetField(roomwebhook.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(roomwebhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rwuo.mutation.DeletedAt(); ok {
		_spec.SetField(roomwebhook.FieldDeletedAt, field.TypeTime, value)
	}
	if rwuo.mutation.DeletedAtCleared() {
		_spec.ClearField(roomwebhook.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rwuo.mutation.Name(); ok {
		_spec.SetField(roomwebhook.FieldName, field.TypeString, value)
	}
	if value, ok := rwuo.mutation.Sid(); ok {
		_spec.SetField(roomwebhook.FieldSid, field.TypeString, value)
	}
	if value, ok := rwuo.mutation.Event(); ok {
		_spec.SetField(roomwebhook.FieldEvent, field.TypeString, value)
	}
	if value, ok := rwuo.mutation.EventTime(); ok {
		_spec.SetField(roomwebhook.FieldEventTime, field.TypeTime, value)
	}
	if rwuo.mutation.EventTimeCleared() {
		_spec.ClearField(roomwebhook.FieldEventTime, field.TypeTime)
	}
	if value, ok := rwuo.mutation.Room(); ok {
		_spec.SetField(roomwebhook.FieldRoom, field.TypeJSON, value)
	}
	if rwuo.mutation.RoomCleared() {
		_spec.ClearField(roomwebhook.FieldRoom, field.TypeJSON)
	}
	if value, ok := rwuo.mutation.Participant(); ok {
		_spec.SetField(roomwebhook.FieldParticipant, field.TypeJSON, value)
	}
	if rwuo.mutation.ParticipantCleared() {
		_spec.ClearField(roomwebhook.FieldParticipant, field.TypeJSON)
	}
	if value, ok := rwuo.mutation.Track(); ok {
		_spec.SetField(roomwebhook.FieldTrack, field.TypeJSON, value)
	}
	if rwuo.mutation.TrackCleared() {
		_spec.ClearField(roomwebhook.FieldTrack, field.TypeJSON)
	}
	if value, ok := rwuo.mutation.EgressInfo(); ok {
		_spec.SetField(roomwebhook.FieldEgressInfo, field.TypeJSON, value)
	}
	if rwuo.mutation.EgressInfoCleared() {
		_spec.ClearField(roomwebhook.FieldEgressInfo, field.TypeJSON)
	}
	if value, ok := rwuo.mutation.IngressInfo(); ok {
		_spec.SetField(roomwebhook.FieldIngressInfo, field.TypeJSON, value)
	}
	if rwuo.mutation.IngressInfoCleared() {
		_spec.ClearField(roomwebhook.FieldIngressInfo, field.TypeJSON)
	}
	_node = &RoomWebhook{config: rwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomwebhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rwuo.mutation.done = true
	return _node, nil
}
