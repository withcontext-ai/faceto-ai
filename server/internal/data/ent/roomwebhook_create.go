// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/roomwebhook"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/livekit/protocol/livekit"
)

// RoomWebhookCreate is the builder for creating a RoomWebhook entity.
type RoomWebhookCreate struct {
	config
	mutation *RoomWebhookMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (rwc *RoomWebhookCreate) SetUUID(s string) *RoomWebhookCreate {
	rwc.mutation.SetUUID(s)
	return rwc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableUUID(s *string) *RoomWebhookCreate {
	if s != nil {
		rwc.SetUUID(*s)
	}
	return rwc
}

// SetCreatedAt sets the "created_at" field.
func (rwc *RoomWebhookCreate) SetCreatedAt(t time.Time) *RoomWebhookCreate {
	rwc.mutation.SetCreatedAt(t)
	return rwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableCreatedAt(t *time.Time) *RoomWebhookCreate {
	if t != nil {
		rwc.SetCreatedAt(*t)
	}
	return rwc
}

// SetUpdatedAt sets the "updated_at" field.
func (rwc *RoomWebhookCreate) SetUpdatedAt(t time.Time) *RoomWebhookCreate {
	rwc.mutation.SetUpdatedAt(t)
	return rwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableUpdatedAt(t *time.Time) *RoomWebhookCreate {
	if t != nil {
		rwc.SetUpdatedAt(*t)
	}
	return rwc
}

// SetDeletedAt sets the "deleted_at" field.
func (rwc *RoomWebhookCreate) SetDeletedAt(t time.Time) *RoomWebhookCreate {
	rwc.mutation.SetDeletedAt(t)
	return rwc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableDeletedAt(t *time.Time) *RoomWebhookCreate {
	if t != nil {
		rwc.SetDeletedAt(*t)
	}
	return rwc
}

// SetName sets the "name" field.
func (rwc *RoomWebhookCreate) SetName(s string) *RoomWebhookCreate {
	rwc.mutation.SetName(s)
	return rwc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableName(s *string) *RoomWebhookCreate {
	if s != nil {
		rwc.SetName(*s)
	}
	return rwc
}

// SetSid sets the "sid" field.
func (rwc *RoomWebhookCreate) SetSid(s string) *RoomWebhookCreate {
	rwc.mutation.SetSid(s)
	return rwc
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableSid(s *string) *RoomWebhookCreate {
	if s != nil {
		rwc.SetSid(*s)
	}
	return rwc
}

// SetEvent sets the "event" field.
func (rwc *RoomWebhookCreate) SetEvent(s string) *RoomWebhookCreate {
	rwc.mutation.SetEvent(s)
	return rwc
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableEvent(s *string) *RoomWebhookCreate {
	if s != nil {
		rwc.SetEvent(*s)
	}
	return rwc
}

// SetEventTime sets the "event_time" field.
func (rwc *RoomWebhookCreate) SetEventTime(t time.Time) *RoomWebhookCreate {
	rwc.mutation.SetEventTime(t)
	return rwc
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (rwc *RoomWebhookCreate) SetNillableEventTime(t *time.Time) *RoomWebhookCreate {
	if t != nil {
		rwc.SetEventTime(*t)
	}
	return rwc
}

// SetRoom sets the "room" field.
func (rwc *RoomWebhookCreate) SetRoom(l *livekit.Room) *RoomWebhookCreate {
	rwc.mutation.SetRoom(l)
	return rwc
}

// SetParticipant sets the "participant" field.
func (rwc *RoomWebhookCreate) SetParticipant(li *livekit.ParticipantInfo) *RoomWebhookCreate {
	rwc.mutation.SetParticipant(li)
	return rwc
}

// SetTrack sets the "track" field.
func (rwc *RoomWebhookCreate) SetTrack(li *livekit.TrackInfo) *RoomWebhookCreate {
	rwc.mutation.SetTrack(li)
	return rwc
}

// SetEgressInfo sets the "egressInfo" field.
func (rwc *RoomWebhookCreate) SetEgressInfo(li *livekit.EgressInfo) *RoomWebhookCreate {
	rwc.mutation.SetEgressInfo(li)
	return rwc
}

// SetIngressInfo sets the "ingressInfo" field.
func (rwc *RoomWebhookCreate) SetIngressInfo(li *livekit.IngressInfo) *RoomWebhookCreate {
	rwc.mutation.SetIngressInfo(li)
	return rwc
}

// SetID sets the "id" field.
func (rwc *RoomWebhookCreate) SetID(u uint64) *RoomWebhookCreate {
	rwc.mutation.SetID(u)
	return rwc
}

// Mutation returns the RoomWebhookMutation object of the builder.
func (rwc *RoomWebhookCreate) Mutation() *RoomWebhookMutation {
	return rwc.mutation
}

// Save creates the RoomWebhook in the database.
func (rwc *RoomWebhookCreate) Save(ctx context.Context) (*RoomWebhook, error) {
	rwc.defaults()
	return withHooks(ctx, rwc.sqlSave, rwc.mutation, rwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rwc *RoomWebhookCreate) SaveX(ctx context.Context) *RoomWebhook {
	v, err := rwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rwc *RoomWebhookCreate) Exec(ctx context.Context) error {
	_, err := rwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwc *RoomWebhookCreate) ExecX(ctx context.Context) {
	if err := rwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rwc *RoomWebhookCreate) defaults() {
	if _, ok := rwc.mutation.UUID(); !ok {
		v := roomwebhook.DefaultUUID()
		rwc.mutation.SetUUID(v)
	}
	if _, ok := rwc.mutation.CreatedAt(); !ok {
		v := roomwebhook.DefaultCreatedAt()
		rwc.mutation.SetCreatedAt(v)
	}
	if _, ok := rwc.mutation.UpdatedAt(); !ok {
		v := roomwebhook.DefaultUpdatedAt()
		rwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rwc.mutation.Name(); !ok {
		v := roomwebhook.DefaultName
		rwc.mutation.SetName(v)
	}
	if _, ok := rwc.mutation.Sid(); !ok {
		v := roomwebhook.DefaultSid
		rwc.mutation.SetSid(v)
	}
	if _, ok := rwc.mutation.Event(); !ok {
		v := roomwebhook.DefaultEvent
		rwc.mutation.SetEvent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rwc *RoomWebhookCreate) check() error {
	if _, ok := rwc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "RoomWebhook.uuid"`)}
	}
	if _, ok := rwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoomWebhook.created_at"`)}
	}
	if _, ok := rwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoomWebhook.updated_at"`)}
	}
	if _, ok := rwc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RoomWebhook.name"`)}
	}
	if _, ok := rwc.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "RoomWebhook.sid"`)}
	}
	if _, ok := rwc.mutation.Event(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required field "RoomWebhook.event"`)}
	}
	return nil
}

func (rwc *RoomWebhookCreate) sqlSave(ctx context.Context) (*RoomWebhook, error) {
	if err := rwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	rwc.mutation.id = &_node.ID
	rwc.mutation.done = true
	return _node, nil
}

func (rwc *RoomWebhookCreate) createSpec() (*RoomWebhook, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomWebhook{config: rwc.config}
		_spec = sqlgraph.NewCreateSpec(roomwebhook.Table, sqlgraph.NewFieldSpec(roomwebhook.FieldID, field.TypeUint64))
	)
	if id, ok := rwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rwc.mutation.UUID(); ok {
		_spec.SetField(roomwebhook.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := rwc.mutation.CreatedAt(); ok {
		_spec.SetField(roomwebhook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rwc.mutation.UpdatedAt(); ok {
		_spec.SetField(roomwebhook.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rwc.mutation.DeletedAt(); ok {
		_spec.SetField(roomwebhook.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rwc.mutation.Name(); ok {
		_spec.SetField(roomwebhook.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rwc.mutation.Sid(); ok {
		_spec.SetField(roomwebhook.FieldSid, field.TypeString, value)
		_node.Sid = value
	}
	if value, ok := rwc.mutation.Event(); ok {
		_spec.SetField(roomwebhook.FieldEvent, field.TypeString, value)
		_node.Event = value
	}
	if value, ok := rwc.mutation.EventTime(); ok {
		_spec.SetField(roomwebhook.FieldEventTime, field.TypeTime, value)
		_node.EventTime = value
	}
	if value, ok := rwc.mutation.Room(); ok {
		_spec.SetField(roomwebhook.FieldRoom, field.TypeJSON, value)
		_node.Room = value
	}
	if value, ok := rwc.mutation.Participant(); ok {
		_spec.SetField(roomwebhook.FieldParticipant, field.TypeJSON, value)
		_node.Participant = value
	}
	if value, ok := rwc.mutation.Track(); ok {
		_spec.SetField(roomwebhook.FieldTrack, field.TypeJSON, value)
		_node.Track = value
	}
	if value, ok := rwc.mutation.EgressInfo(); ok {
		_spec.SetField(roomwebhook.FieldEgressInfo, field.TypeJSON, value)
		_node.EgressInfo = value
	}
	if value, ok := rwc.mutation.IngressInfo(); ok {
		_spec.SetField(roomwebhook.FieldIngressInfo, field.TypeJSON, value)
		_node.IngressInfo = value
	}
	return _node, _spec
}

// RoomWebhookCreateBulk is the builder for creating many RoomWebhook entities in bulk.
type RoomWebhookCreateBulk struct {
	config
	builders []*RoomWebhookCreate
}

// Save creates the RoomWebhook entities in the database.
func (rwcb *RoomWebhookCreateBulk) Save(ctx context.Context) ([]*RoomWebhook, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rwcb.builders))
	nodes := make([]*RoomWebhook, len(rwcb.builders))
	mutators := make([]Mutator, len(rwcb.builders))
	for i := range rwcb.builders {
		func(i int, root context.Context) {
			builder := rwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomWebhookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rwcb *RoomWebhookCreateBulk) SaveX(ctx context.Context) []*RoomWebhook {
	v, err := rwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rwcb *RoomWebhookCreateBulk) Exec(ctx context.Context) error {
	_, err := rwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rwcb *RoomWebhookCreateBulk) ExecX(ctx context.Context) {
	if err := rwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
