// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/servicewebhooklog"
	"faceto-ai/internal/data/schema"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceWebhookLogCreate is the builder for creating a ServiceWebhookLog entity.
type ServiceWebhookLogCreate struct {
	config
	mutation *ServiceWebhookLogMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (swlc *ServiceWebhookLogCreate) SetUUID(s string) *ServiceWebhookLogCreate {
	swlc.mutation.SetUUID(s)
	return swlc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableUUID(s *string) *ServiceWebhookLogCreate {
	if s != nil {
		swlc.SetUUID(*s)
	}
	return swlc
}

// SetCreatedAt sets the "created_at" field.
func (swlc *ServiceWebhookLogCreate) SetCreatedAt(t time.Time) *ServiceWebhookLogCreate {
	swlc.mutation.SetCreatedAt(t)
	return swlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableCreatedAt(t *time.Time) *ServiceWebhookLogCreate {
	if t != nil {
		swlc.SetCreatedAt(*t)
	}
	return swlc
}

// SetUpdatedAt sets the "updated_at" field.
func (swlc *ServiceWebhookLogCreate) SetUpdatedAt(t time.Time) *ServiceWebhookLogCreate {
	swlc.mutation.SetUpdatedAt(t)
	return swlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableUpdatedAt(t *time.Time) *ServiceWebhookLogCreate {
	if t != nil {
		swlc.SetUpdatedAt(*t)
	}
	return swlc
}

// SetDeletedAt sets the "deleted_at" field.
func (swlc *ServiceWebhookLogCreate) SetDeletedAt(t time.Time) *ServiceWebhookLogCreate {
	swlc.mutation.SetDeletedAt(t)
	return swlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableDeletedAt(t *time.Time) *ServiceWebhookLogCreate {
	if t != nil {
		swlc.SetDeletedAt(*t)
	}
	return swlc
}

// SetName sets the "name" field.
func (swlc *ServiceWebhookLogCreate) SetName(s string) *ServiceWebhookLogCreate {
	swlc.mutation.SetName(s)
	return swlc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableName(s *string) *ServiceWebhookLogCreate {
	if s != nil {
		swlc.SetName(*s)
	}
	return swlc
}

// SetSid sets the "sid" field.
func (swlc *ServiceWebhookLogCreate) SetSid(s string) *ServiceWebhookLogCreate {
	swlc.mutation.SetSid(s)
	return swlc
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableSid(s *string) *ServiceWebhookLogCreate {
	if s != nil {
		swlc.SetSid(*s)
	}
	return swlc
}

// SetURL sets the "url" field.
func (swlc *ServiceWebhookLogCreate) SetURL(s string) *ServiceWebhookLogCreate {
	swlc.mutation.SetURL(s)
	return swlc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableURL(s *string) *ServiceWebhookLogCreate {
	if s != nil {
		swlc.SetURL(*s)
	}
	return swlc
}

// SetStatusCode sets the "status_code" field.
func (swlc *ServiceWebhookLogCreate) SetStatusCode(u uint16) *ServiceWebhookLogCreate {
	swlc.mutation.SetStatusCode(u)
	return swlc
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableStatusCode(u *uint16) *ServiceWebhookLogCreate {
	if u != nil {
		swlc.SetStatusCode(*u)
	}
	return swlc
}

// SetTimes sets the "times" field.
func (swlc *ServiceWebhookLogCreate) SetTimes(u uint8) *ServiceWebhookLogCreate {
	swlc.mutation.SetTimes(u)
	return swlc
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (swlc *ServiceWebhookLogCreate) SetNillableTimes(u *uint8) *ServiceWebhookLogCreate {
	if u != nil {
		swlc.SetTimes(*u)
	}
	return swlc
}

// SetRequest sets the "request" field.
func (swlc *ServiceWebhookLogCreate) SetRequest(sr *schema.WebhookRequest) *ServiceWebhookLogCreate {
	swlc.mutation.SetRequest(sr)
	return swlc
}

// SetResp sets the "resp" field.
func (swlc *ServiceWebhookLogCreate) SetResp(sr *schema.WebhookResp) *ServiceWebhookLogCreate {
	swlc.mutation.SetResp(sr)
	return swlc
}

// SetID sets the "id" field.
func (swlc *ServiceWebhookLogCreate) SetID(u uint64) *ServiceWebhookLogCreate {
	swlc.mutation.SetID(u)
	return swlc
}

// Mutation returns the ServiceWebhookLogMutation object of the builder.
func (swlc *ServiceWebhookLogCreate) Mutation() *ServiceWebhookLogMutation {
	return swlc.mutation
}

// Save creates the ServiceWebhookLog in the database.
func (swlc *ServiceWebhookLogCreate) Save(ctx context.Context) (*ServiceWebhookLog, error) {
	swlc.defaults()
	return withHooks(ctx, swlc.sqlSave, swlc.mutation, swlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (swlc *ServiceWebhookLogCreate) SaveX(ctx context.Context) *ServiceWebhookLog {
	v, err := swlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (swlc *ServiceWebhookLogCreate) Exec(ctx context.Context) error {
	_, err := swlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swlc *ServiceWebhookLogCreate) ExecX(ctx context.Context) {
	if err := swlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (swlc *ServiceWebhookLogCreate) defaults() {
	if _, ok := swlc.mutation.UUID(); !ok {
		v := servicewebhooklog.DefaultUUID()
		swlc.mutation.SetUUID(v)
	}
	if _, ok := swlc.mutation.CreatedAt(); !ok {
		v := servicewebhooklog.DefaultCreatedAt()
		swlc.mutation.SetCreatedAt(v)
	}
	if _, ok := swlc.mutation.UpdatedAt(); !ok {
		v := servicewebhooklog.DefaultUpdatedAt()
		swlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := swlc.mutation.Name(); !ok {
		v := servicewebhooklog.DefaultName
		swlc.mutation.SetName(v)
	}
	if _, ok := swlc.mutation.Sid(); !ok {
		v := servicewebhooklog.DefaultSid
		swlc.mutation.SetSid(v)
	}
	if _, ok := swlc.mutation.URL(); !ok {
		v := servicewebhooklog.DefaultURL
		swlc.mutation.SetURL(v)
	}
	if _, ok := swlc.mutation.StatusCode(); !ok {
		v := servicewebhooklog.DefaultStatusCode
		swlc.mutation.SetStatusCode(v)
	}
	if _, ok := swlc.mutation.Times(); !ok {
		v := servicewebhooklog.DefaultTimes
		swlc.mutation.SetTimes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (swlc *ServiceWebhookLogCreate) check() error {
	if _, ok := swlc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "ServiceWebhookLog.uuid"`)}
	}
	if _, ok := swlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServiceWebhookLog.created_at"`)}
	}
	if _, ok := swlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ServiceWebhookLog.updated_at"`)}
	}
	if _, ok := swlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServiceWebhookLog.name"`)}
	}
	if _, ok := swlc.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "ServiceWebhookLog.sid"`)}
	}
	if _, ok := swlc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "ServiceWebhookLog.url"`)}
	}
	return nil
}

func (swlc *ServiceWebhookLogCreate) sqlSave(ctx context.Context) (*ServiceWebhookLog, error) {
	if err := swlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := swlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, swlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	swlc.mutation.id = &_node.ID
	swlc.mutation.done = true
	return _node, nil
}

func (swlc *ServiceWebhookLogCreate) createSpec() (*ServiceWebhookLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceWebhookLog{config: swlc.config}
		_spec = sqlgraph.NewCreateSpec(servicewebhooklog.Table, sqlgraph.NewFieldSpec(servicewebhooklog.FieldID, field.TypeUint64))
	)
	if id, ok := swlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := swlc.mutation.UUID(); ok {
		_spec.SetField(servicewebhooklog.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := swlc.mutation.CreatedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := swlc.mutation.UpdatedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := swlc.mutation.DeletedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := swlc.mutation.Name(); ok {
		_spec.SetField(servicewebhooklog.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := swlc.mutation.Sid(); ok {
		_spec.SetField(servicewebhooklog.FieldSid, field.TypeString, value)
		_node.Sid = value
	}
	if value, ok := swlc.mutation.URL(); ok {
		_spec.SetField(servicewebhooklog.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := swlc.mutation.StatusCode(); ok {
		_spec.SetField(servicewebhooklog.FieldStatusCode, field.TypeUint16, value)
		_node.StatusCode = value
	}
	if value, ok := swlc.mutation.Times(); ok {
		_spec.SetField(servicewebhooklog.FieldTimes, field.TypeUint8, value)
		_node.Times = value
	}
	if value, ok := swlc.mutation.Request(); ok {
		_spec.SetField(servicewebhooklog.FieldRequest, field.TypeJSON, value)
		_node.Request = value
	}
	if value, ok := swlc.mutation.Resp(); ok {
		_spec.SetField(servicewebhooklog.FieldResp, field.TypeJSON, value)
		_node.Resp = value
	}
	return _node, _spec
}

// ServiceWebhookLogCreateBulk is the builder for creating many ServiceWebhookLog entities in bulk.
type ServiceWebhookLogCreateBulk struct {
	config
	builders []*ServiceWebhookLogCreate
}

// Save creates the ServiceWebhookLog entities in the database.
func (swlcb *ServiceWebhookLogCreateBulk) Save(ctx context.Context) ([]*ServiceWebhookLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(swlcb.builders))
	nodes := make([]*ServiceWebhookLog, len(swlcb.builders))
	mutators := make([]Mutator, len(swlcb.builders))
	for i := range swlcb.builders {
		func(i int, root context.Context) {
			builder := swlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceWebhookLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, swlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, swlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, swlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (swlcb *ServiceWebhookLogCreateBulk) SaveX(ctx context.Context) []*ServiceWebhookLog {
	v, err := swlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (swlcb *ServiceWebhookLogCreateBulk) Exec(ctx context.Context) error {
	_, err := swlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swlcb *ServiceWebhookLogCreateBulk) ExecX(ctx context.Context) {
	if err := swlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
