// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/roomvod"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomVodCreate is the builder for creating a RoomVod entity.
type RoomVodCreate struct {
	config
	mutation *RoomVodMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (rvc *RoomVodCreate) SetUUID(s string) *RoomVodCreate {
	rvc.mutation.SetUUID(s)
	return rvc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableUUID(s *string) *RoomVodCreate {
	if s != nil {
		rvc.SetUUID(*s)
	}
	return rvc
}

// SetCreatedAt sets the "created_at" field.
func (rvc *RoomVodCreate) SetCreatedAt(t time.Time) *RoomVodCreate {
	rvc.mutation.SetCreatedAt(t)
	return rvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableCreatedAt(t *time.Time) *RoomVodCreate {
	if t != nil {
		rvc.SetCreatedAt(*t)
	}
	return rvc
}

// SetUpdatedAt sets the "updated_at" field.
func (rvc *RoomVodCreate) SetUpdatedAt(t time.Time) *RoomVodCreate {
	rvc.mutation.SetUpdatedAt(t)
	return rvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableUpdatedAt(t *time.Time) *RoomVodCreate {
	if t != nil {
		rvc.SetUpdatedAt(*t)
	}
	return rvc
}

// SetDeletedAt sets the "deleted_at" field.
func (rvc *RoomVodCreate) SetDeletedAt(t time.Time) *RoomVodCreate {
	rvc.mutation.SetDeletedAt(t)
	return rvc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableDeletedAt(t *time.Time) *RoomVodCreate {
	if t != nil {
		rvc.SetDeletedAt(*t)
	}
	return rvc
}

// SetName sets the "name" field.
func (rvc *RoomVodCreate) SetName(s string) *RoomVodCreate {
	rvc.mutation.SetName(s)
	return rvc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableName(s *string) *RoomVodCreate {
	if s != nil {
		rvc.SetName(*s)
	}
	return rvc
}

// SetSid sets the "sid" field.
func (rvc *RoomVodCreate) SetSid(s string) *RoomVodCreate {
	rvc.mutation.SetSid(s)
	return rvc
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableSid(s *string) *RoomVodCreate {
	if s != nil {
		rvc.SetSid(*s)
	}
	return rvc
}

// SetEgressID sets the "egress_id" field.
func (rvc *RoomVodCreate) SetEgressID(s string) *RoomVodCreate {
	rvc.mutation.SetEgressID(s)
	return rvc
}

// SetNillableEgressID sets the "egress_id" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableEgressID(s *string) *RoomVodCreate {
	if s != nil {
		rvc.SetEgressID(*s)
	}
	return rvc
}

// SetStatus sets the "status" field.
func (rvc *RoomVodCreate) SetStatus(u uint8) *RoomVodCreate {
	rvc.mutation.SetStatus(u)
	return rvc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableStatus(u *uint8) *RoomVodCreate {
	if u != nil {
		rvc.SetStatus(*u)
	}
	return rvc
}

// SetPlatform sets the "platform" field.
func (rvc *RoomVodCreate) SetPlatform(u uint8) *RoomVodCreate {
	rvc.mutation.SetPlatform(u)
	return rvc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillablePlatform(u *uint8) *RoomVodCreate {
	if u != nil {
		rvc.SetPlatform(*u)
	}
	return rvc
}

// SetVodType sets the "vod_type" field.
func (rvc *RoomVodCreate) SetVodType(u uint8) *RoomVodCreate {
	rvc.mutation.SetVodType(u)
	return rvc
}

// SetNillableVodType sets the "vod_type" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableVodType(u *uint8) *RoomVodCreate {
	if u != nil {
		rvc.SetVodType(*u)
	}
	return rvc
}

// SetVodPath sets the "vod_path" field.
func (rvc *RoomVodCreate) SetVodPath(s string) *RoomVodCreate {
	rvc.mutation.SetVodPath(s)
	return rvc
}

// SetNillableVodPath sets the "vod_path" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableVodPath(s *string) *RoomVodCreate {
	if s != nil {
		rvc.SetVodPath(*s)
	}
	return rvc
}

// SetVodURL sets the "vod_url" field.
func (rvc *RoomVodCreate) SetVodURL(s string) *RoomVodCreate {
	rvc.mutation.SetVodURL(s)
	return rvc
}

// SetNillableVodURL sets the "vod_url" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableVodURL(s *string) *RoomVodCreate {
	if s != nil {
		rvc.SetVodURL(*s)
	}
	return rvc
}

// SetStartTime sets the "start_time" field.
func (rvc *RoomVodCreate) SetStartTime(t time.Time) *RoomVodCreate {
	rvc.mutation.SetStartTime(t)
	return rvc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableStartTime(t *time.Time) *RoomVodCreate {
	if t != nil {
		rvc.SetStartTime(*t)
	}
	return rvc
}

// SetCompleteTime sets the "complete_time" field.
func (rvc *RoomVodCreate) SetCompleteTime(t time.Time) *RoomVodCreate {
	rvc.mutation.SetCompleteTime(t)
	return rvc
}

// SetNillableCompleteTime sets the "complete_time" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableCompleteTime(t *time.Time) *RoomVodCreate {
	if t != nil {
		rvc.SetCompleteTime(*t)
	}
	return rvc
}

// SetDuration sets the "duration" field.
func (rvc *RoomVodCreate) SetDuration(u uint64) *RoomVodCreate {
	rvc.mutation.SetDuration(u)
	return rvc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (rvc *RoomVodCreate) SetNillableDuration(u *uint64) *RoomVodCreate {
	if u != nil {
		rvc.SetDuration(*u)
	}
	return rvc
}

// SetID sets the "id" field.
func (rvc *RoomVodCreate) SetID(u uint64) *RoomVodCreate {
	rvc.mutation.SetID(u)
	return rvc
}

// Mutation returns the RoomVodMutation object of the builder.
func (rvc *RoomVodCreate) Mutation() *RoomVodMutation {
	return rvc.mutation
}

// Save creates the RoomVod in the database.
func (rvc *RoomVodCreate) Save(ctx context.Context) (*RoomVod, error) {
	rvc.defaults()
	return withHooks(ctx, rvc.sqlSave, rvc.mutation, rvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rvc *RoomVodCreate) SaveX(ctx context.Context) *RoomVod {
	v, err := rvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rvc *RoomVodCreate) Exec(ctx context.Context) error {
	_, err := rvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvc *RoomVodCreate) ExecX(ctx context.Context) {
	if err := rvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rvc *RoomVodCreate) defaults() {
	if _, ok := rvc.mutation.UUID(); !ok {
		v := roomvod.DefaultUUID()
		rvc.mutation.SetUUID(v)
	}
	if _, ok := rvc.mutation.CreatedAt(); !ok {
		v := roomvod.DefaultCreatedAt()
		rvc.mutation.SetCreatedAt(v)
	}
	if _, ok := rvc.mutation.UpdatedAt(); !ok {
		v := roomvod.DefaultUpdatedAt()
		rvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rvc.mutation.Name(); !ok {
		v := roomvod.DefaultName
		rvc.mutation.SetName(v)
	}
	if _, ok := rvc.mutation.Sid(); !ok {
		v := roomvod.DefaultSid
		rvc.mutation.SetSid(v)
	}
	if _, ok := rvc.mutation.EgressID(); !ok {
		v := roomvod.DefaultEgressID
		rvc.mutation.SetEgressID(v)
	}
	if _, ok := rvc.mutation.Status(); !ok {
		v := roomvod.DefaultStatus
		rvc.mutation.SetStatus(v)
	}
	if _, ok := rvc.mutation.Platform(); !ok {
		v := roomvod.DefaultPlatform
		rvc.mutation.SetPlatform(v)
	}
	if _, ok := rvc.mutation.VodType(); !ok {
		v := roomvod.DefaultVodType
		rvc.mutation.SetVodType(v)
	}
	if _, ok := rvc.mutation.VodPath(); !ok {
		v := roomvod.DefaultVodPath
		rvc.mutation.SetVodPath(v)
	}
	if _, ok := rvc.mutation.VodURL(); !ok {
		v := roomvod.DefaultVodURL
		rvc.mutation.SetVodURL(v)
	}
	if _, ok := rvc.mutation.Duration(); !ok {
		v := roomvod.DefaultDuration
		rvc.mutation.SetDuration(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rvc *RoomVodCreate) check() error {
	if _, ok := rvc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "RoomVod.uuid"`)}
	}
	if _, ok := rvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoomVod.created_at"`)}
	}
	if _, ok := rvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoomVod.updated_at"`)}
	}
	if _, ok := rvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RoomVod.name"`)}
	}
	if _, ok := rvc.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "RoomVod.sid"`)}
	}
	if _, ok := rvc.mutation.EgressID(); !ok {
		return &ValidationError{Name: "egress_id", err: errors.New(`ent: missing required field "RoomVod.egress_id"`)}
	}
	return nil
}

func (rvc *RoomVodCreate) sqlSave(ctx context.Context) (*RoomVod, error) {
	if err := rvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	rvc.mutation.id = &_node.ID
	rvc.mutation.done = true
	return _node, nil
}

func (rvc *RoomVodCreate) createSpec() (*RoomVod, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomVod{config: rvc.config}
		_spec = sqlgraph.NewCreateSpec(roomvod.Table, sqlgraph.NewFieldSpec(roomvod.FieldID, field.TypeUint64))
	)
	if id, ok := rvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rvc.mutation.UUID(); ok {
		_spec.SetField(roomvod.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := rvc.mutation.CreatedAt(); ok {
		_spec.SetField(roomvod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rvc.mutation.UpdatedAt(); ok {
		_spec.SetField(roomvod.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rvc.mutation.DeletedAt(); ok {
		_spec.SetField(roomvod.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rvc.mutation.Name(); ok {
		_spec.SetField(roomvod.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rvc.mutation.Sid(); ok {
		_spec.SetField(roomvod.FieldSid, field.TypeString, value)
		_node.Sid = value
	}
	if value, ok := rvc.mutation.EgressID(); ok {
		_spec.SetField(roomvod.FieldEgressID, field.TypeString, value)
		_node.EgressID = value
	}
	if value, ok := rvc.mutation.Status(); ok {
		_spec.SetField(roomvod.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := rvc.mutation.Platform(); ok {
		_spec.SetField(roomvod.FieldPlatform, field.TypeUint8, value)
		_node.Platform = value
	}
	if value, ok := rvc.mutation.VodType(); ok {
		_spec.SetField(roomvod.FieldVodType, field.TypeUint8, value)
		_node.VodType = value
	}
	if value, ok := rvc.mutation.VodPath(); ok {
		_spec.SetField(roomvod.FieldVodPath, field.TypeString, value)
		_node.VodPath = value
	}
	if value, ok := rvc.mutation.VodURL(); ok {
		_spec.SetField(roomvod.FieldVodURL, field.TypeString, value)
		_node.VodURL = value
	}
	if value, ok := rvc.mutation.StartTime(); ok {
		_spec.SetField(roomvod.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := rvc.mutation.CompleteTime(); ok {
		_spec.SetField(roomvod.FieldCompleteTime, field.TypeTime, value)
		_node.CompleteTime = value
	}
	if value, ok := rvc.mutation.Duration(); ok {
		_spec.SetField(roomvod.FieldDuration, field.TypeUint64, value)
		_node.Duration = value
	}
	return _node, _spec
}

// RoomVodCreateBulk is the builder for creating many RoomVod entities in bulk.
type RoomVodCreateBulk struct {
	config
	builders []*RoomVodCreate
}

// Save creates the RoomVod entities in the database.
func (rvcb *RoomVodCreateBulk) Save(ctx context.Context) ([]*RoomVod, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rvcb.builders))
	nodes := make([]*RoomVod, len(rvcb.builders))
	mutators := make([]Mutator, len(rvcb.builders))
	for i := range rvcb.builders {
		func(i int, root context.Context) {
			builder := rvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomVodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rvcb *RoomVodCreateBulk) SaveX(ctx context.Context) []*RoomVod {
	v, err := rvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rvcb *RoomVodCreateBulk) Exec(ctx context.Context) error {
	_, err := rvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rvcb *RoomVodCreateBulk) ExecX(ctx context.Context) {
	if err := rvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
