// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"faceto-ai/internal/data/ent/predicate"
	"faceto-ai/internal/data/ent/roomvod"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomVodDelete is the builder for deleting a RoomVod entity.
type RoomVodDelete struct {
	config
	hooks    []Hook
	mutation *RoomVodMutation
}

// Where appends a list predicates to the RoomVodDelete builder.
func (rvd *RoomVodDelete) Where(ps ...predicate.RoomVod) *RoomVodDelete {
	rvd.mutation.Where(ps...)
	return rvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rvd *RoomVodDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rvd.sqlExec, rvd.mutation, rvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rvd *RoomVodDelete) ExecX(ctx context.Context) int {
	n, err := rvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rvd *RoomVodDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(roomvod.Table, sqlgraph.NewFieldSpec(roomvod.FieldID, field.TypeUint64))
	if ps := rvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rvd.mutation.done = true
	return affected, err
}

// RoomVodDeleteOne is the builder for deleting a single RoomVod entity.
type RoomVodDeleteOne struct {
	rvd *RoomVodDelete
}

// Where appends a list predicates to the RoomVodDelete builder.
func (rvdo *RoomVodDeleteOne) Where(ps ...predicate.RoomVod) *RoomVodDeleteOne {
	rvdo.rvd.mutation.Where(ps...)
	return rvdo
}

// Exec executes the deletion query.
func (rvdo *RoomVodDeleteOne) Exec(ctx context.Context) error {
	n, err := rvdo.rvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{roomvod.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rvdo *RoomVodDeleteOne) ExecX(ctx context.Context) {
	if err := rvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
