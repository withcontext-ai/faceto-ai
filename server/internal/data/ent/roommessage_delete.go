// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"faceto-ai/internal/data/ent/predicate"
	"faceto-ai/internal/data/ent/roommessage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomMessageDelete is the builder for deleting a RoomMessage entity.
type RoomMessageDelete struct {
	config
	hooks    []Hook
	mutation *RoomMessageMutation
}

// Where appends a list predicates to the RoomMessageDelete builder.
func (rmd *RoomMessageDelete) Where(ps ...predicate.RoomMessage) *RoomMessageDelete {
	rmd.mutation.Where(ps...)
	return rmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rmd *RoomMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rmd.sqlExec, rmd.mutation, rmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rmd *RoomMessageDelete) ExecX(ctx context.Context) int {
	n, err := rmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rmd *RoomMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(roommessage.Table, sqlgraph.NewFieldSpec(roommessage.FieldID, field.TypeUint64))
	if ps := rmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rmd.mutation.done = true
	return affected, err
}

// RoomMessageDeleteOne is the builder for deleting a single RoomMessage entity.
type RoomMessageDeleteOne struct {
	rmd *RoomMessageDelete
}

// Where appends a list predicates to the RoomMessageDelete builder.
func (rmdo *RoomMessageDeleteOne) Where(ps ...predicate.RoomMessage) *RoomMessageDeleteOne {
	rmdo.rmd.mutation.Where(ps...)
	return rmdo
}

// Exec executes the deletion query.
func (rmdo *RoomMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := rmdo.rmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{roommessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rmdo *RoomMessageDeleteOne) ExecX(ctx context.Context) {
	if err := rmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
