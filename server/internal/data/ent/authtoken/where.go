// Code generated by ent, DO NOT EDIT.

package authtoken

import (
	"faceto-ai/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldUUID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldDeletedAt, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldClientID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldAccessToken, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldRefreshToken, v))
}

// ExpiresIn applies equality check predicate on the "expires_in" field. It's identical to ExpiresInEQ.
func ExpiresIn(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldExpiresIn, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotNull(FieldDeletedAt))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldClientID, v))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenIsNil applies the IsNil predicate on the "access_token" field.
func AccessTokenIsNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIsNull(FieldAccessToken))
}

// AccessTokenNotNil applies the NotNil predicate on the "access_token" field.
func AccessTokenNotNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotNull(FieldAccessToken))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldAccessToken, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenIsNil applies the IsNil predicate on the "refresh_token" field.
func RefreshTokenIsNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIsNull(FieldRefreshToken))
}

// RefreshTokenNotNil applies the NotNil predicate on the "refresh_token" field.
func RefreshTokenNotNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotNull(FieldRefreshToken))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldContainsFold(FieldRefreshToken, v))
}

// ExpiresInEQ applies the EQ predicate on the "expires_in" field.
func ExpiresInEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldEQ(FieldExpiresIn, v))
}

// ExpiresInNEQ applies the NEQ predicate on the "expires_in" field.
func ExpiresInNEQ(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNEQ(FieldExpiresIn, v))
}

// ExpiresInIn applies the In predicate on the "expires_in" field.
func ExpiresInIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIn(FieldExpiresIn, vs...))
}

// ExpiresInNotIn applies the NotIn predicate on the "expires_in" field.
func ExpiresInNotIn(vs ...time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotIn(FieldExpiresIn, vs...))
}

// ExpiresInGT applies the GT predicate on the "expires_in" field.
func ExpiresInGT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGT(FieldExpiresIn, v))
}

// ExpiresInGTE applies the GTE predicate on the "expires_in" field.
func ExpiresInGTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldGTE(FieldExpiresIn, v))
}

// ExpiresInLT applies the LT predicate on the "expires_in" field.
func ExpiresInLT(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLT(FieldExpiresIn, v))
}

// ExpiresInLTE applies the LTE predicate on the "expires_in" field.
func ExpiresInLTE(v time.Time) predicate.AuthToken {
	return predicate.AuthToken(sql.FieldLTE(FieldExpiresIn, v))
}

// ExpiresInIsNil applies the IsNil predicate on the "expires_in" field.
func ExpiresInIsNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldIsNull(FieldExpiresIn))
}

// ExpiresInNotNil applies the NotNil predicate on the "expires_in" field.
func ExpiresInNotNil() predicate.AuthToken {
	return predicate.AuthToken(sql.FieldNotNull(FieldExpiresIn))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthToken) predicate.AuthToken {
	return predicate.AuthToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthToken) predicate.AuthToken {
	return predicate.AuthToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthToken) predicate.AuthToken {
	return predicate.AuthToken(func(s *sql.Selector) {
		p(s.Not())
	})
}
