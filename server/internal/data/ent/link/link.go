// Code generated by ent, DO NOT EDIT.

package link

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the link type in the database.
	Label = "link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldRoomName holds the string denoting the room_name field in the database.
	FieldRoomName = "room_name"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldChatAPI holds the string denoting the chat_api field in the database.
	FieldChatAPI = "chat_api"
	// FieldChatAPIKey holds the string denoting the chat_api_key field in the database.
	FieldChatAPIKey = "chat_api_key"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldWebhook holds the string denoting the webhook field in the database.
	FieldWebhook = "webhook"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// Table holds the table name of the link in the database.
	Table = "link"
)

// Columns holds all SQL columns for link fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldRoomName,
	FieldLink,
	FieldChatAPI,
	FieldChatAPIKey,
	FieldToken,
	FieldConfig,
	FieldWebhook,
	FieldPrompt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultRoomName holds the default value on creation for the "room_name" field.
	DefaultRoomName string
	// DefaultLink holds the default value on creation for the "link" field.
	DefaultLink string
	// DefaultChatAPI holds the default value on creation for the "chat_api" field.
	DefaultChatAPI string
	// DefaultChatAPIKey holds the default value on creation for the "chat_api_key" field.
	DefaultChatAPIKey string
	// DefaultToken holds the default value on creation for the "token" field.
	DefaultToken string
)

// OrderOption defines the ordering options for the Link queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRoomName orders the results by the room_name field.
func ByRoomName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoomName, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByChatAPI orders the results by the chat_api field.
func ByChatAPI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatAPI, opts...).ToFunc()
}

// ByChatAPIKey orders the results by the chat_api_key field.
func ByChatAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatAPIKey, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}
