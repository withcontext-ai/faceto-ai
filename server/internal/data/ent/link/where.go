// Code generated by ent, DO NOT EDIT.

package link

import (
	"faceto-ai/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldUUID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDeletedAt, v))
}

// RoomName applies equality check predicate on the "room_name" field. It's identical to RoomNameEQ.
func RoomName(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldRoomName, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldLink, v))
}

// ChatAPI applies equality check predicate on the "chat_api" field. It's identical to ChatAPIEQ.
func ChatAPI(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldChatAPI, v))
}

// ChatAPIKey applies equality check predicate on the "chat_api_key" field. It's identical to ChatAPIKeyEQ.
func ChatAPIKey(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldChatAPIKey, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldToken, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldDeletedAt))
}

// RoomNameEQ applies the EQ predicate on the "room_name" field.
func RoomNameEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldRoomName, v))
}

// RoomNameNEQ applies the NEQ predicate on the "room_name" field.
func RoomNameNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldRoomName, v))
}

// RoomNameIn applies the In predicate on the "room_name" field.
func RoomNameIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldRoomName, vs...))
}

// RoomNameNotIn applies the NotIn predicate on the "room_name" field.
func RoomNameNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldRoomName, vs...))
}

// RoomNameGT applies the GT predicate on the "room_name" field.
func RoomNameGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldRoomName, v))
}

// RoomNameGTE applies the GTE predicate on the "room_name" field.
func RoomNameGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldRoomName, v))
}

// RoomNameLT applies the LT predicate on the "room_name" field.
func RoomNameLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldRoomName, v))
}

// RoomNameLTE applies the LTE predicate on the "room_name" field.
func RoomNameLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldRoomName, v))
}

// RoomNameContains applies the Contains predicate on the "room_name" field.
func RoomNameContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldRoomName, v))
}

// RoomNameHasPrefix applies the HasPrefix predicate on the "room_name" field.
func RoomNameHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldRoomName, v))
}

// RoomNameHasSuffix applies the HasSuffix predicate on the "room_name" field.
func RoomNameHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldRoomName, v))
}

// RoomNameEqualFold applies the EqualFold predicate on the "room_name" field.
func RoomNameEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldRoomName, v))
}

// RoomNameContainsFold applies the ContainsFold predicate on the "room_name" field.
func RoomNameContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldRoomName, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldLink, v))
}

// LinkIsNil applies the IsNil predicate on the "link" field.
func LinkIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldLink))
}

// LinkNotNil applies the NotNil predicate on the "link" field.
func LinkNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldLink))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldLink, v))
}

// ChatAPIEQ applies the EQ predicate on the "chat_api" field.
func ChatAPIEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldChatAPI, v))
}

// ChatAPINEQ applies the NEQ predicate on the "chat_api" field.
func ChatAPINEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldChatAPI, v))
}

// ChatAPIIn applies the In predicate on the "chat_api" field.
func ChatAPIIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldChatAPI, vs...))
}

// ChatAPINotIn applies the NotIn predicate on the "chat_api" field.
func ChatAPINotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldChatAPI, vs...))
}

// ChatAPIGT applies the GT predicate on the "chat_api" field.
func ChatAPIGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldChatAPI, v))
}

// ChatAPIGTE applies the GTE predicate on the "chat_api" field.
func ChatAPIGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldChatAPI, v))
}

// ChatAPILT applies the LT predicate on the "chat_api" field.
func ChatAPILT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldChatAPI, v))
}

// ChatAPILTE applies the LTE predicate on the "chat_api" field.
func ChatAPILTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldChatAPI, v))
}

// ChatAPIContains applies the Contains predicate on the "chat_api" field.
func ChatAPIContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldChatAPI, v))
}

// ChatAPIHasPrefix applies the HasPrefix predicate on the "chat_api" field.
func ChatAPIHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldChatAPI, v))
}

// ChatAPIHasSuffix applies the HasSuffix predicate on the "chat_api" field.
func ChatAPIHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldChatAPI, v))
}

// ChatAPIIsNil applies the IsNil predicate on the "chat_api" field.
func ChatAPIIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldChatAPI))
}

// ChatAPINotNil applies the NotNil predicate on the "chat_api" field.
func ChatAPINotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldChatAPI))
}

// ChatAPIEqualFold applies the EqualFold predicate on the "chat_api" field.
func ChatAPIEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldChatAPI, v))
}

// ChatAPIContainsFold applies the ContainsFold predicate on the "chat_api" field.
func ChatAPIContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldChatAPI, v))
}

// ChatAPIKeyEQ applies the EQ predicate on the "chat_api_key" field.
func ChatAPIKeyEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldChatAPIKey, v))
}

// ChatAPIKeyNEQ applies the NEQ predicate on the "chat_api_key" field.
func ChatAPIKeyNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldChatAPIKey, v))
}

// ChatAPIKeyIn applies the In predicate on the "chat_api_key" field.
func ChatAPIKeyIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldChatAPIKey, vs...))
}

// ChatAPIKeyNotIn applies the NotIn predicate on the "chat_api_key" field.
func ChatAPIKeyNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldChatAPIKey, vs...))
}

// ChatAPIKeyGT applies the GT predicate on the "chat_api_key" field.
func ChatAPIKeyGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldChatAPIKey, v))
}

// ChatAPIKeyGTE applies the GTE predicate on the "chat_api_key" field.
func ChatAPIKeyGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldChatAPIKey, v))
}

// ChatAPIKeyLT applies the LT predicate on the "chat_api_key" field.
func ChatAPIKeyLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldChatAPIKey, v))
}

// ChatAPIKeyLTE applies the LTE predicate on the "chat_api_key" field.
func ChatAPIKeyLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldChatAPIKey, v))
}

// ChatAPIKeyContains applies the Contains predicate on the "chat_api_key" field.
func ChatAPIKeyContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldChatAPIKey, v))
}

// ChatAPIKeyHasPrefix applies the HasPrefix predicate on the "chat_api_key" field.
func ChatAPIKeyHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldChatAPIKey, v))
}

// ChatAPIKeyHasSuffix applies the HasSuffix predicate on the "chat_api_key" field.
func ChatAPIKeyHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldChatAPIKey, v))
}

// ChatAPIKeyIsNil applies the IsNil predicate on the "chat_api_key" field.
func ChatAPIKeyIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldChatAPIKey))
}

// ChatAPIKeyNotNil applies the NotNil predicate on the "chat_api_key" field.
func ChatAPIKeyNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldChatAPIKey))
}

// ChatAPIKeyEqualFold applies the EqualFold predicate on the "chat_api_key" field.
func ChatAPIKeyEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldChatAPIKey, v))
}

// ChatAPIKeyContainsFold applies the ContainsFold predicate on the "chat_api_key" field.
func ChatAPIKeyContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldChatAPIKey, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldToken, v))
}

// TokenIsNil applies the IsNil predicate on the "token" field.
func TokenIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldToken))
}

// TokenNotNil applies the NotNil predicate on the "token" field.
func TokenNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldToken))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldToken, v))
}

// ConfigIsNil applies the IsNil predicate on the "config" field.
func ConfigIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldConfig))
}

// ConfigNotNil applies the NotNil predicate on the "config" field.
func ConfigNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldConfig))
}

// WebhookIsNil applies the IsNil predicate on the "webhook" field.
func WebhookIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldWebhook))
}

// WebhookNotNil applies the NotNil predicate on the "webhook" field.
func WebhookNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldWebhook))
}

// PromptIsNil applies the IsNil predicate on the "prompt" field.
func PromptIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldPrompt))
}

// PromptNotNil applies the NotNil predicate on the "prompt" field.
func PromptNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldPrompt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Link) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		p(s.Not())
	})
}
