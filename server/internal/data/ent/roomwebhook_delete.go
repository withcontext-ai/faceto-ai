// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"faceto-ai/internal/data/ent/predicate"
	"faceto-ai/internal/data/ent/roomwebhook"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomWebhookDelete is the builder for deleting a RoomWebhook entity.
type RoomWebhookDelete struct {
	config
	hooks    []Hook
	mutation *RoomWebhookMutation
}

// Where appends a list predicates to the RoomWebhookDelete builder.
func (rwd *RoomWebhookDelete) Where(ps ...predicate.RoomWebhook) *RoomWebhookDelete {
	rwd.mutation.Where(ps...)
	return rwd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rwd *RoomWebhookDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rwd.sqlExec, rwd.mutation, rwd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rwd *RoomWebhookDelete) ExecX(ctx context.Context) int {
	n, err := rwd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rwd *RoomWebhookDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(roomwebhook.Table, sqlgraph.NewFieldSpec(roomwebhook.FieldID, field.TypeUint64))
	if ps := rwd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rwd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rwd.mutation.done = true
	return affected, err
}

// RoomWebhookDeleteOne is the builder for deleting a single RoomWebhook entity.
type RoomWebhookDeleteOne struct {
	rwd *RoomWebhookDelete
}

// Where appends a list predicates to the RoomWebhookDelete builder.
func (rwdo *RoomWebhookDeleteOne) Where(ps ...predicate.RoomWebhook) *RoomWebhookDeleteOne {
	rwdo.rwd.mutation.Where(ps...)
	return rwdo
}

// Exec executes the deletion query.
func (rwdo *RoomWebhookDeleteOne) Exec(ctx context.Context) error {
	n, err := rwdo.rwd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{roomwebhook.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rwdo *RoomWebhookDeleteOne) ExecX(ctx context.Context) {
	if err := rwdo.Exec(ctx); err != nil {
		panic(err)
	}
}
