// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/roommessage"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomMessageCreate is the builder for creating a RoomMessage entity.
type RoomMessageCreate struct {
	config
	mutation *RoomMessageMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (rmc *RoomMessageCreate) SetUUID(s string) *RoomMessageCreate {
	rmc.mutation.SetUUID(s)
	return rmc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableUUID(s *string) *RoomMessageCreate {
	if s != nil {
		rmc.SetUUID(*s)
	}
	return rmc
}

// SetCreatedAt sets the "created_at" field.
func (rmc *RoomMessageCreate) SetCreatedAt(t time.Time) *RoomMessageCreate {
	rmc.mutation.SetCreatedAt(t)
	return rmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableCreatedAt(t *time.Time) *RoomMessageCreate {
	if t != nil {
		rmc.SetCreatedAt(*t)
	}
	return rmc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmc *RoomMessageCreate) SetUpdatedAt(t time.Time) *RoomMessageCreate {
	rmc.mutation.SetUpdatedAt(t)
	return rmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableUpdatedAt(t *time.Time) *RoomMessageCreate {
	if t != nil {
		rmc.SetUpdatedAt(*t)
	}
	return rmc
}

// SetDeletedAt sets the "deleted_at" field.
func (rmc *RoomMessageCreate) SetDeletedAt(t time.Time) *RoomMessageCreate {
	rmc.mutation.SetDeletedAt(t)
	return rmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableDeletedAt(t *time.Time) *RoomMessageCreate {
	if t != nil {
		rmc.SetDeletedAt(*t)
	}
	return rmc
}

// SetSid sets the "sid" field.
func (rmc *RoomMessageCreate) SetSid(s string) *RoomMessageCreate {
	rmc.mutation.SetSid(s)
	return rmc
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableSid(s *string) *RoomMessageCreate {
	if s != nil {
		rmc.SetSid(*s)
	}
	return rmc
}

// SetParticipantSid sets the "participant_sid" field.
func (rmc *RoomMessageCreate) SetParticipantSid(s string) *RoomMessageCreate {
	rmc.mutation.SetParticipantSid(s)
	return rmc
}

// SetNillableParticipantSid sets the "participant_sid" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableParticipantSid(s *string) *RoomMessageCreate {
	if s != nil {
		rmc.SetParticipantSid(*s)
	}
	return rmc
}

// SetParticipantName sets the "participant_name" field.
func (rmc *RoomMessageCreate) SetParticipantName(s string) *RoomMessageCreate {
	rmc.mutation.SetParticipantName(s)
	return rmc
}

// SetNillableParticipantName sets the "participant_name" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableParticipantName(s *string) *RoomMessageCreate {
	if s != nil {
		rmc.SetParticipantName(*s)
	}
	return rmc
}

// SetType sets the "type" field.
func (rmc *RoomMessageCreate) SetType(u uint32) *RoomMessageCreate {
	rmc.mutation.SetType(u)
	return rmc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableType(u *uint32) *RoomMessageCreate {
	if u != nil {
		rmc.SetType(*u)
	}
	return rmc
}

// SetIsReply sets the "is_reply" field.
func (rmc *RoomMessageCreate) SetIsReply(u uint32) *RoomMessageCreate {
	rmc.mutation.SetIsReply(u)
	return rmc
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableIsReply(u *uint32) *RoomMessageCreate {
	if u != nil {
		rmc.SetIsReply(*u)
	}
	return rmc
}

// SetReplyID sets the "reply_id" field.
func (rmc *RoomMessageCreate) SetReplyID(u uint64) *RoomMessageCreate {
	rmc.mutation.SetReplyID(u)
	return rmc
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableReplyID(u *uint64) *RoomMessageCreate {
	if u != nil {
		rmc.SetReplyID(*u)
	}
	return rmc
}

// SetEventTime sets the "event_time" field.
func (rmc *RoomMessageCreate) SetEventTime(t time.Time) *RoomMessageCreate {
	rmc.mutation.SetEventTime(t)
	return rmc
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableEventTime(t *time.Time) *RoomMessageCreate {
	if t != nil {
		rmc.SetEventTime(*t)
	}
	return rmc
}

// SetText sets the "text" field.
func (rmc *RoomMessageCreate) SetText(s string) *RoomMessageCreate {
	rmc.mutation.SetText(s)
	return rmc
}

// SetNillableText sets the "text" field if the given value is not nil.
func (rmc *RoomMessageCreate) SetNillableText(s *string) *RoomMessageCreate {
	if s != nil {
		rmc.SetText(*s)
	}
	return rmc
}

// SetID sets the "id" field.
func (rmc *RoomMessageCreate) SetID(u uint64) *RoomMessageCreate {
	rmc.mutation.SetID(u)
	return rmc
}

// Mutation returns the RoomMessageMutation object of the builder.
func (rmc *RoomMessageCreate) Mutation() *RoomMessageMutation {
	return rmc.mutation
}

// Save creates the RoomMessage in the database.
func (rmc *RoomMessageCreate) Save(ctx context.Context) (*RoomMessage, error) {
	rmc.defaults()
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RoomMessageCreate) SaveX(ctx context.Context) *RoomMessage {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RoomMessageCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RoomMessageCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmc *RoomMessageCreate) defaults() {
	if _, ok := rmc.mutation.UUID(); !ok {
		v := roommessage.DefaultUUID()
		rmc.mutation.SetUUID(v)
	}
	if _, ok := rmc.mutation.CreatedAt(); !ok {
		v := roommessage.DefaultCreatedAt()
		rmc.mutation.SetCreatedAt(v)
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		v := roommessage.DefaultUpdatedAt()
		rmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rmc.mutation.Sid(); !ok {
		v := roommessage.DefaultSid
		rmc.mutation.SetSid(v)
	}
	if _, ok := rmc.mutation.ParticipantSid(); !ok {
		v := roommessage.DefaultParticipantSid
		rmc.mutation.SetParticipantSid(v)
	}
	if _, ok := rmc.mutation.ParticipantName(); !ok {
		v := roommessage.DefaultParticipantName
		rmc.mutation.SetParticipantName(v)
	}
	if _, ok := rmc.mutation.GetType(); !ok {
		v := roommessage.DefaultType
		rmc.mutation.SetType(v)
	}
	if _, ok := rmc.mutation.IsReply(); !ok {
		v := roommessage.DefaultIsReply
		rmc.mutation.SetIsReply(v)
	}
	if _, ok := rmc.mutation.ReplyID(); !ok {
		v := roommessage.DefaultReplyID
		rmc.mutation.SetReplyID(v)
	}
	if _, ok := rmc.mutation.Text(); !ok {
		v := roommessage.DefaultText
		rmc.mutation.SetText(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RoomMessageCreate) check() error {
	if _, ok := rmc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "RoomMessage.uuid"`)}
	}
	if _, ok := rmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoomMessage.created_at"`)}
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoomMessage.updated_at"`)}
	}
	if _, ok := rmc.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "RoomMessage.sid"`)}
	}
	if _, ok := rmc.mutation.ParticipantSid(); !ok {
		return &ValidationError{Name: "participant_sid", err: errors.New(`ent: missing required field "RoomMessage.participant_sid"`)}
	}
	if _, ok := rmc.mutation.ParticipantName(); !ok {
		return &ValidationError{Name: "participant_name", err: errors.New(`ent: missing required field "RoomMessage.participant_name"`)}
	}
	if _, ok := rmc.mutation.IsReply(); !ok {
		return &ValidationError{Name: "is_reply", err: errors.New(`ent: missing required field "RoomMessage.is_reply"`)}
	}
	if _, ok := rmc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "RoomMessage.text"`)}
	}
	return nil
}

func (rmc *RoomMessageCreate) sqlSave(ctx context.Context) (*RoomMessage, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RoomMessageCreate) createSpec() (*RoomMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomMessage{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(roommessage.Table, sqlgraph.NewFieldSpec(roommessage.FieldID, field.TypeUint64))
	)
	if id, ok := rmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rmc.mutation.UUID(); ok {
		_spec.SetField(roommessage.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := rmc.mutation.CreatedAt(); ok {
		_spec.SetField(roommessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rmc.mutation.UpdatedAt(); ok {
		_spec.SetField(roommessage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rmc.mutation.DeletedAt(); ok {
		_spec.SetField(roommessage.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rmc.mutation.Sid(); ok {
		_spec.SetField(roommessage.FieldSid, field.TypeString, value)
		_node.Sid = value
	}
	if value, ok := rmc.mutation.ParticipantSid(); ok {
		_spec.SetField(roommessage.FieldParticipantSid, field.TypeString, value)
		_node.ParticipantSid = value
	}
	if value, ok := rmc.mutation.ParticipantName(); ok {
		_spec.SetField(roommessage.FieldParticipantName, field.TypeString, value)
		_node.ParticipantName = value
	}
	if value, ok := rmc.mutation.GetType(); ok {
		_spec.SetField(roommessage.FieldType, field.TypeUint32, value)
		_node.Type = value
	}
	if value, ok := rmc.mutation.IsReply(); ok {
		_spec.SetField(roommessage.FieldIsReply, field.TypeUint32, value)
		_node.IsReply = value
	}
	if value, ok := rmc.mutation.ReplyID(); ok {
		_spec.SetField(roommessage.FieldReplyID, field.TypeUint64, value)
		_node.ReplyID = value
	}
	if value, ok := rmc.mutation.EventTime(); ok {
		_spec.SetField(roommessage.FieldEventTime, field.TypeTime, value)
		_node.EventTime = value
	}
	if value, ok := rmc.mutation.Text(); ok {
		_spec.SetField(roommessage.FieldText, field.TypeString, value)
		_node.Text = value
	}
	return _node, _spec
}

// RoomMessageCreateBulk is the builder for creating many RoomMessage entities in bulk.
type RoomMessageCreateBulk struct {
	config
	builders []*RoomMessageCreate
}

// Save creates the RoomMessage entities in the database.
func (rmcb *RoomMessageCreateBulk) Save(ctx context.Context) ([]*RoomMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RoomMessage, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RoomMessageCreateBulk) SaveX(ctx context.Context) []*RoomMessage {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RoomMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RoomMessageCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
