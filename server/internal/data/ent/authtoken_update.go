// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/authtoken"
	"faceto-ai/internal/data/ent/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthTokenUpdate is the builder for updating AuthToken entities.
type AuthTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AuthTokenMutation
}

// Where appends a list predicates to the AuthTokenUpdate builder.
func (atu *AuthTokenUpdate) Where(ps ...predicate.AuthToken) *AuthTokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetUUID sets the "uuid" field.
func (atu *AuthTokenUpdate) SetUUID(s string) *AuthTokenUpdate {
	atu.mutation.SetUUID(s)
	return atu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableUUID(s *string) *AuthTokenUpdate {
	if s != nil {
		atu.SetUUID(*s)
	}
	return atu
}

// SetCreatedAt sets the "created_at" field.
func (atu *AuthTokenUpdate) SetCreatedAt(t time.Time) *AuthTokenUpdate {
	atu.mutation.SetCreatedAt(t)
	return atu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableCreatedAt(t *time.Time) *AuthTokenUpdate {
	if t != nil {
		atu.SetCreatedAt(*t)
	}
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AuthTokenUpdate) SetUpdatedAt(t time.Time) *AuthTokenUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetDeletedAt sets the "deleted_at" field.
func (atu *AuthTokenUpdate) SetDeletedAt(t time.Time) *AuthTokenUpdate {
	atu.mutation.SetDeletedAt(t)
	return atu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableDeletedAt(t *time.Time) *AuthTokenUpdate {
	if t != nil {
		atu.SetDeletedAt(*t)
	}
	return atu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atu *AuthTokenUpdate) ClearDeletedAt() *AuthTokenUpdate {
	atu.mutation.ClearDeletedAt()
	return atu
}

// SetClientID sets the "client_id" field.
func (atu *AuthTokenUpdate) SetClientID(s string) *AuthTokenUpdate {
	atu.mutation.SetClientID(s)
	return atu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableClientID(s *string) *AuthTokenUpdate {
	if s != nil {
		atu.SetClientID(*s)
	}
	return atu
}

// SetAccessToken sets the "access_token" field.
func (atu *AuthTokenUpdate) SetAccessToken(s string) *AuthTokenUpdate {
	atu.mutation.SetAccessToken(s)
	return atu
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableAccessToken(s *string) *AuthTokenUpdate {
	if s != nil {
		atu.SetAccessToken(*s)
	}
	return atu
}

// ClearAccessToken clears the value of the "access_token" field.
func (atu *AuthTokenUpdate) ClearAccessToken() *AuthTokenUpdate {
	atu.mutation.ClearAccessToken()
	return atu
}

// SetRefreshToken sets the "refresh_token" field.
func (atu *AuthTokenUpdate) SetRefreshToken(s string) *AuthTokenUpdate {
	atu.mutation.SetRefreshToken(s)
	return atu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableRefreshToken(s *string) *AuthTokenUpdate {
	if s != nil {
		atu.SetRefreshToken(*s)
	}
	return atu
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (atu *AuthTokenUpdate) ClearRefreshToken() *AuthTokenUpdate {
	atu.mutation.ClearRefreshToken()
	return atu
}

// SetExpiresIn sets the "expires_in" field.
func (atu *AuthTokenUpdate) SetExpiresIn(t time.Time) *AuthTokenUpdate {
	atu.mutation.SetExpiresIn(t)
	return atu
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (atu *AuthTokenUpdate) SetNillableExpiresIn(t *time.Time) *AuthTokenUpdate {
	if t != nil {
		atu.SetExpiresIn(*t)
	}
	return atu
}

// ClearExpiresIn clears the value of the "expires_in" field.
func (atu *AuthTokenUpdate) ClearExpiresIn() *AuthTokenUpdate {
	atu.mutation.ClearExpiresIn()
	return atu
}

// Mutation returns the AuthTokenMutation object of the builder.
func (atu *AuthTokenUpdate) Mutation() *AuthTokenMutation {
	return atu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AuthTokenUpdate) Save(ctx context.Context) (int, error) {
	atu.defaults()
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AuthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AuthTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AuthTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AuthTokenUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := authtoken.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

func (atu *AuthTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authtoken.Table, authtoken.Columns, sqlgraph.NewFieldSpec(authtoken.FieldID, field.TypeUint64))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UUID(); ok {
		_spec.SetField(authtoken.FieldUUID, field.TypeString, value)
	}
	if value, ok := atu.mutation.CreatedAt(); ok {
		_spec.SetField(authtoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(authtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.DeletedAt(); ok {
		_spec.SetField(authtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if atu.mutation.DeletedAtCleared() {
		_spec.ClearField(authtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := atu.mutation.ClientID(); ok {
		_spec.SetField(authtoken.FieldClientID, field.TypeString, value)
	}
	if value, ok := atu.mutation.AccessToken(); ok {
		_spec.SetField(authtoken.FieldAccessToken, field.TypeString, value)
	}
	if atu.mutation.AccessTokenCleared() {
		_spec.ClearField(authtoken.FieldAccessToken, field.TypeString)
	}
	if value, ok := atu.mutation.RefreshToken(); ok {
		_spec.SetField(authtoken.FieldRefreshToken, field.TypeString, value)
	}
	if atu.mutation.RefreshTokenCleared() {
		_spec.ClearField(authtoken.FieldRefreshToken, field.TypeString)
	}
	if value, ok := atu.mutation.ExpiresIn(); ok {
		_spec.SetField(authtoken.FieldExpiresIn, field.TypeTime, value)
	}
	if atu.mutation.ExpiresInCleared() {
		_spec.ClearField(authtoken.FieldExpiresIn, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AuthTokenUpdateOne is the builder for updating a single AuthToken entity.
type AuthTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthTokenMutation
}

// SetUUID sets the "uuid" field.
func (atuo *AuthTokenUpdateOne) SetUUID(s string) *AuthTokenUpdateOne {
	atuo.mutation.SetUUID(s)
	return atuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableUUID(s *string) *AuthTokenUpdateOne {
	if s != nil {
		atuo.SetUUID(*s)
	}
	return atuo
}

// SetCreatedAt sets the "created_at" field.
func (atuo *AuthTokenUpdateOne) SetCreatedAt(t time.Time) *AuthTokenUpdateOne {
	atuo.mutation.SetCreatedAt(t)
	return atuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *AuthTokenUpdateOne {
	if t != nil {
		atuo.SetCreatedAt(*t)
	}
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AuthTokenUpdateOne) SetUpdatedAt(t time.Time) *AuthTokenUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetDeletedAt sets the "deleted_at" field.
func (atuo *AuthTokenUpdateOne) SetDeletedAt(t time.Time) *AuthTokenUpdateOne {
	atuo.mutation.SetDeletedAt(t)
	return atuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *AuthTokenUpdateOne {
	if t != nil {
		atuo.SetDeletedAt(*t)
	}
	return atuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atuo *AuthTokenUpdateOne) ClearDeletedAt() *AuthTokenUpdateOne {
	atuo.mutation.ClearDeletedAt()
	return atuo
}

// SetClientID sets the "client_id" field.
func (atuo *AuthTokenUpdateOne) SetClientID(s string) *AuthTokenUpdateOne {
	atuo.mutation.SetClientID(s)
	return atuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableClientID(s *string) *AuthTokenUpdateOne {
	if s != nil {
		atuo.SetClientID(*s)
	}
	return atuo
}

// SetAccessToken sets the "access_token" field.
func (atuo *AuthTokenUpdateOne) SetAccessToken(s string) *AuthTokenUpdateOne {
	atuo.mutation.SetAccessToken(s)
	return atuo
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableAccessToken(s *string) *AuthTokenUpdateOne {
	if s != nil {
		atuo.SetAccessToken(*s)
	}
	return atuo
}

// ClearAccessToken clears the value of the "access_token" field.
func (atuo *AuthTokenUpdateOne) ClearAccessToken() *AuthTokenUpdateOne {
	atuo.mutation.ClearAccessToken()
	return atuo
}

// SetRefreshToken sets the "refresh_token" field.
func (atuo *AuthTokenUpdateOne) SetRefreshToken(s string) *AuthTokenUpdateOne {
	atuo.mutation.SetRefreshToken(s)
	return atuo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableRefreshToken(s *string) *AuthTokenUpdateOne {
	if s != nil {
		atuo.SetRefreshToken(*s)
	}
	return atuo
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (atuo *AuthTokenUpdateOne) ClearRefreshToken() *AuthTokenUpdateOne {
	atuo.mutation.ClearRefreshToken()
	return atuo
}

// SetExpiresIn sets the "expires_in" field.
func (atuo *AuthTokenUpdateOne) SetExpiresIn(t time.Time) *AuthTokenUpdateOne {
	atuo.mutation.SetExpiresIn(t)
	return atuo
}

// SetNillableExpiresIn sets the "expires_in" field if the given value is not nil.
func (atuo *AuthTokenUpdateOne) SetNillableExpiresIn(t *time.Time) *AuthTokenUpdateOne {
	if t != nil {
		atuo.SetExpiresIn(*t)
	}
	return atuo
}

// ClearExpiresIn clears the value of the "expires_in" field.
func (atuo *AuthTokenUpdateOne) ClearExpiresIn() *AuthTokenUpdateOne {
	atuo.mutation.ClearExpiresIn()
	return atuo
}

// Mutation returns the AuthTokenMutation object of the builder.
func (atuo *AuthTokenUpdateOne) Mutation() *AuthTokenMutation {
	return atuo.mutation
}

// Where appends a list predicates to the AuthTokenUpdate builder.
func (atuo *AuthTokenUpdateOne) Where(ps ...predicate.AuthToken) *AuthTokenUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AuthTokenUpdateOne) Select(field string, fields ...string) *AuthTokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AuthToken entity.
func (atuo *AuthTokenUpdateOne) Save(ctx context.Context) (*AuthToken, error) {
	atuo.defaults()
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AuthTokenUpdateOne) SaveX(ctx context.Context) *AuthToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AuthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AuthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AuthTokenUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := authtoken.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

func (atuo *AuthTokenUpdateOne) sqlSave(ctx context.Context) (_node *AuthToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(authtoken.Table, authtoken.Columns, sqlgraph.NewFieldSpec(authtoken.FieldID, field.TypeUint64))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authtoken.FieldID)
		for _, f := range fields {
			if !authtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UUID(); ok {
		_spec.SetField(authtoken.FieldUUID, field.TypeString, value)
	}
	if value, ok := atuo.mutation.CreatedAt(); ok {
		_spec.SetField(authtoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(authtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.DeletedAt(); ok {
		_spec.SetField(authtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if atuo.mutation.DeletedAtCleared() {
		_spec.ClearField(authtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.ClientID(); ok {
		_spec.SetField(authtoken.FieldClientID, field.TypeString, value)
	}
	if value, ok := atuo.mutation.AccessToken(); ok {
		_spec.SetField(authtoken.FieldAccessToken, field.TypeString, value)
	}
	if atuo.mutation.AccessTokenCleared() {
		_spec.ClearField(authtoken.FieldAccessToken, field.TypeString)
	}
	if value, ok := atuo.mutation.RefreshToken(); ok {
		_spec.SetField(authtoken.FieldRefreshToken, field.TypeString, value)
	}
	if atuo.mutation.RefreshTokenCleared() {
		_spec.ClearField(authtoken.FieldRefreshToken, field.TypeString)
	}
	if value, ok := atuo.mutation.ExpiresIn(); ok {
		_spec.SetField(authtoken.FieldExpiresIn, field.TypeTime, value)
	}
	if atuo.mutation.ExpiresInCleared() {
		_spec.ClearField(authtoken.FieldExpiresIn, field.TypeTime)
	}
	_node = &AuthToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
