// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/predicate"
	"faceto-ai/internal/data/ent/roommessage"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomMessageUpdate is the builder for updating RoomMessage entities.
type RoomMessageUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMessageMutation
}

// Where appends a list predicates to the RoomMessageUpdate builder.
func (rmu *RoomMessageUpdate) Where(ps ...predicate.RoomMessage) *RoomMessageUpdate {
	rmu.mutation.Where(ps...)
	return rmu
}

// SetUUID sets the "uuid" field.
func (rmu *RoomMessageUpdate) SetUUID(s string) *RoomMessageUpdate {
	rmu.mutation.SetUUID(s)
	return rmu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableUUID(s *string) *RoomMessageUpdate {
	if s != nil {
		rmu.SetUUID(*s)
	}
	return rmu
}

// SetCreatedAt sets the "created_at" field.
func (rmu *RoomMessageUpdate) SetCreatedAt(t time.Time) *RoomMessageUpdate {
	rmu.mutation.SetCreatedAt(t)
	return rmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableCreatedAt(t *time.Time) *RoomMessageUpdate {
	if t != nil {
		rmu.SetCreatedAt(*t)
	}
	return rmu
}

// SetUpdatedAt sets the "updated_at" field.
func (rmu *RoomMessageUpdate) SetUpdatedAt(t time.Time) *RoomMessageUpdate {
	rmu.mutation.SetUpdatedAt(t)
	return rmu
}

// SetDeletedAt sets the "deleted_at" field.
func (rmu *RoomMessageUpdate) SetDeletedAt(t time.Time) *RoomMessageUpdate {
	rmu.mutation.SetDeletedAt(t)
	return rmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableDeletedAt(t *time.Time) *RoomMessageUpdate {
	if t != nil {
		rmu.SetDeletedAt(*t)
	}
	return rmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmu *RoomMessageUpdate) ClearDeletedAt() *RoomMessageUpdate {
	rmu.mutation.ClearDeletedAt()
	return rmu
}

// SetSid sets the "sid" field.
func (rmu *RoomMessageUpdate) SetSid(s string) *RoomMessageUpdate {
	rmu.mutation.SetSid(s)
	return rmu
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableSid(s *string) *RoomMessageUpdate {
	if s != nil {
		rmu.SetSid(*s)
	}
	return rmu
}

// SetParticipantSid sets the "participant_sid" field.
func (rmu *RoomMessageUpdate) SetParticipantSid(s string) *RoomMessageUpdate {
	rmu.mutation.SetParticipantSid(s)
	return rmu
}

// SetNillableParticipantSid sets the "participant_sid" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableParticipantSid(s *string) *RoomMessageUpdate {
	if s != nil {
		rmu.SetParticipantSid(*s)
	}
	return rmu
}

// SetParticipantName sets the "participant_name" field.
func (rmu *RoomMessageUpdate) SetParticipantName(s string) *RoomMessageUpdate {
	rmu.mutation.SetParticipantName(s)
	return rmu
}

// SetNillableParticipantName sets the "participant_name" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableParticipantName(s *string) *RoomMessageUpdate {
	if s != nil {
		rmu.SetParticipantName(*s)
	}
	return rmu
}

// SetType sets the "type" field.
func (rmu *RoomMessageUpdate) SetType(u uint32) *RoomMessageUpdate {
	rmu.mutation.ResetType()
	rmu.mutation.SetType(u)
	return rmu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableType(u *uint32) *RoomMessageUpdate {
	if u != nil {
		rmu.SetType(*u)
	}
	return rmu
}

// AddType adds u to the "type" field.
func (rmu *RoomMessageUpdate) AddType(u int32) *RoomMessageUpdate {
	rmu.mutation.AddType(u)
	return rmu
}

// ClearType clears the value of the "type" field.
func (rmu *RoomMessageUpdate) ClearType() *RoomMessageUpdate {
	rmu.mutation.ClearType()
	return rmu
}

// SetIsReply sets the "is_reply" field.
func (rmu *RoomMessageUpdate) SetIsReply(u uint32) *RoomMessageUpdate {
	rmu.mutation.ResetIsReply()
	rmu.mutation.SetIsReply(u)
	return rmu
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableIsReply(u *uint32) *RoomMessageUpdate {
	if u != nil {
		rmu.SetIsReply(*u)
	}
	return rmu
}

// AddIsReply adds u to the "is_reply" field.
func (rmu *RoomMessageUpdate) AddIsReply(u int32) *RoomMessageUpdate {
	rmu.mutation.AddIsReply(u)
	return rmu
}

// SetReplyID sets the "reply_id" field.
func (rmu *RoomMessageUpdate) SetReplyID(u uint64) *RoomMessageUpdate {
	rmu.mutation.ResetReplyID()
	rmu.mutation.SetReplyID(u)
	return rmu
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableReplyID(u *uint64) *RoomMessageUpdate {
	if u != nil {
		rmu.SetReplyID(*u)
	}
	return rmu
}

// AddReplyID adds u to the "reply_id" field.
func (rmu *RoomMessageUpdate) AddReplyID(u int64) *RoomMessageUpdate {
	rmu.mutation.AddReplyID(u)
	return rmu
}

// ClearReplyID clears the value of the "reply_id" field.
func (rmu *RoomMessageUpdate) ClearReplyID() *RoomMessageUpdate {
	rmu.mutation.ClearReplyID()
	return rmu
}

// SetEventTime sets the "event_time" field.
func (rmu *RoomMessageUpdate) SetEventTime(t time.Time) *RoomMessageUpdate {
	rmu.mutation.SetEventTime(t)
	return rmu
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableEventTime(t *time.Time) *RoomMessageUpdate {
	if t != nil {
		rmu.SetEventTime(*t)
	}
	return rmu
}

// ClearEventTime clears the value of the "event_time" field.
func (rmu *RoomMessageUpdate) ClearEventTime() *RoomMessageUpdate {
	rmu.mutation.ClearEventTime()
	return rmu
}

// SetText sets the "text" field.
func (rmu *RoomMessageUpdate) SetText(s string) *RoomMessageUpdate {
	rmu.mutation.SetText(s)
	return rmu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (rmu *RoomMessageUpdate) SetNillableText(s *string) *RoomMessageUpdate {
	if s != nil {
		rmu.SetText(*s)
	}
	return rmu
}

// Mutation returns the RoomMessageMutation object of the builder.
func (rmu *RoomMessageUpdate) Mutation() *RoomMessageMutation {
	return rmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmu *RoomMessageUpdate) Save(ctx context.Context) (int, error) {
	rmu.defaults()
	return withHooks(ctx, rmu.sqlSave, rmu.mutation, rmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmu *RoomMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := rmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmu *RoomMessageUpdate) Exec(ctx context.Context) error {
	_, err := rmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmu *RoomMessageUpdate) ExecX(ctx context.Context) {
	if err := rmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmu *RoomMessageUpdate) defaults() {
	if _, ok := rmu.mutation.UpdatedAt(); !ok {
		v := roommessage.UpdateDefaultUpdatedAt()
		rmu.mutation.SetUpdatedAt(v)
	}
}

func (rmu *RoomMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(roommessage.Table, roommessage.Columns, sqlgraph.NewFieldSpec(roommessage.FieldID, field.TypeUint64))
	if ps := rmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmu.mutation.UUID(); ok {
		_spec.SetField(roommessage.FieldUUID, field.TypeString, value)
	}
	if value, ok := rmu.mutation.CreatedAt(); ok {
		_spec.SetField(roommessage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rmu.mutation.UpdatedAt(); ok {
		_spec.SetField(roommessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rmu.mutation.DeletedAt(); ok {
		_spec.SetField(roommessage.FieldDeletedAt, field.TypeTime, value)
	}
	if rmu.mutation.DeletedAtCleared() {
		_spec.ClearField(roommessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmu.mutation.Sid(); ok {
		_spec.SetField(roommessage.FieldSid, field.TypeString, value)
	}
	if value, ok := rmu.mutation.ParticipantSid(); ok {
		_spec.SetField(roommessage.FieldParticipantSid, field.TypeString, value)
	}
	if value, ok := rmu.mutation.ParticipantName(); ok {
		_spec.SetField(roommessage.FieldParticipantName, field.TypeString, value)
	}
	if value, ok := rmu.mutation.GetType(); ok {
		_spec.SetField(roommessage.FieldType, field.TypeUint32, value)
	}
	if value, ok := rmu.mutation.AddedType(); ok {
		_spec.AddField(roommessage.FieldType, field.TypeUint32, value)
	}
	if rmu.mutation.TypeCleared() {
		_spec.ClearField(roommessage.FieldType, field.TypeUint32)
	}
	if value, ok := rmu.mutation.IsReply(); ok {
		_spec.SetField(roommessage.FieldIsReply, field.TypeUint32, value)
	}
	if value, ok := rmu.mutation.AddedIsReply(); ok {
		_spec.AddField(roommessage.FieldIsReply, field.TypeUint32, value)
	}
	if value, ok := rmu.mutation.ReplyID(); ok {
		_spec.SetField(roommessage.FieldReplyID, field.TypeUint64, value)
	}
	if value, ok := rmu.mutation.AddedReplyID(); ok {
		_spec.AddField(roommessage.FieldReplyID, field.TypeUint64, value)
	}
	if rmu.mutation.ReplyIDCleared() {
		_spec.ClearField(roommessage.FieldReplyID, field.TypeUint64)
	}
	if value, ok := rmu.mutation.EventTime(); ok {
		_spec.SetField(roommessage.FieldEventTime, field.TypeTime, value)
	}
	if rmu.mutation.EventTimeCleared() {
		_spec.ClearField(roommessage.FieldEventTime, field.TypeTime)
	}
	if value, ok := rmu.mutation.Text(); ok {
		_spec.SetField(roommessage.FieldText, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roommessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmu.mutation.done = true
	return n, nil
}

// RoomMessageUpdateOne is the builder for updating a single RoomMessage entity.
type RoomMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMessageMutation
}

// SetUUID sets the "uuid" field.
func (rmuo *RoomMessageUpdateOne) SetUUID(s string) *RoomMessageUpdateOne {
	rmuo.mutation.SetUUID(s)
	return rmuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableUUID(s *string) *RoomMessageUpdateOne {
	if s != nil {
		rmuo.SetUUID(*s)
	}
	return rmuo
}

// SetCreatedAt sets the "created_at" field.
func (rmuo *RoomMessageUpdateOne) SetCreatedAt(t time.Time) *RoomMessageUpdateOne {
	rmuo.mutation.SetCreatedAt(t)
	return rmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableCreatedAt(t *time.Time) *RoomMessageUpdateOne {
	if t != nil {
		rmuo.SetCreatedAt(*t)
	}
	return rmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rmuo *RoomMessageUpdateOne) SetUpdatedAt(t time.Time) *RoomMessageUpdateOne {
	rmuo.mutation.SetUpdatedAt(t)
	return rmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rmuo *RoomMessageUpdateOne) SetDeletedAt(t time.Time) *RoomMessageUpdateOne {
	rmuo.mutation.SetDeletedAt(t)
	return rmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableDeletedAt(t *time.Time) *RoomMessageUpdateOne {
	if t != nil {
		rmuo.SetDeletedAt(*t)
	}
	return rmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rmuo *RoomMessageUpdateOne) ClearDeletedAt() *RoomMessageUpdateOne {
	rmuo.mutation.ClearDeletedAt()
	return rmuo
}

// SetSid sets the "sid" field.
func (rmuo *RoomMessageUpdateOne) SetSid(s string) *RoomMessageUpdateOne {
	rmuo.mutation.SetSid(s)
	return rmuo
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableSid(s *string) *RoomMessageUpdateOne {
	if s != nil {
		rmuo.SetSid(*s)
	}
	return rmuo
}

// SetParticipantSid sets the "participant_sid" field.
func (rmuo *RoomMessageUpdateOne) SetParticipantSid(s string) *RoomMessageUpdateOne {
	rmuo.mutation.SetParticipantSid(s)
	return rmuo
}

// SetNillableParticipantSid sets the "participant_sid" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableParticipantSid(s *string) *RoomMessageUpdateOne {
	if s != nil {
		rmuo.SetParticipantSid(*s)
	}
	return rmuo
}

// SetParticipantName sets the "participant_name" field.
func (rmuo *RoomMessageUpdateOne) SetParticipantName(s string) *RoomMessageUpdateOne {
	rmuo.mutation.SetParticipantName(s)
	return rmuo
}

// SetNillableParticipantName sets the "participant_name" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableParticipantName(s *string) *RoomMessageUpdateOne {
	if s != nil {
		rmuo.SetParticipantName(*s)
	}
	return rmuo
}

// SetType sets the "type" field.
func (rmuo *RoomMessageUpdateOne) SetType(u uint32) *RoomMessageUpdateOne {
	rmuo.mutation.ResetType()
	rmuo.mutation.SetType(u)
	return rmuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableType(u *uint32) *RoomMessageUpdateOne {
	if u != nil {
		rmuo.SetType(*u)
	}
	return rmuo
}

// AddType adds u to the "type" field.
func (rmuo *RoomMessageUpdateOne) AddType(u int32) *RoomMessageUpdateOne {
	rmuo.mutation.AddType(u)
	return rmuo
}

// ClearType clears the value of the "type" field.
func (rmuo *RoomMessageUpdateOne) ClearType() *RoomMessageUpdateOne {
	rmuo.mutation.ClearType()
	return rmuo
}

// SetIsReply sets the "is_reply" field.
func (rmuo *RoomMessageUpdateOne) SetIsReply(u uint32) *RoomMessageUpdateOne {
	rmuo.mutation.ResetIsReply()
	rmuo.mutation.SetIsReply(u)
	return rmuo
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableIsReply(u *uint32) *RoomMessageUpdateOne {
	if u != nil {
		rmuo.SetIsReply(*u)
	}
	return rmuo
}

// AddIsReply adds u to the "is_reply" field.
func (rmuo *RoomMessageUpdateOne) AddIsReply(u int32) *RoomMessageUpdateOne {
	rmuo.mutation.AddIsReply(u)
	return rmuo
}

// SetReplyID sets the "reply_id" field.
func (rmuo *RoomMessageUpdateOne) SetReplyID(u uint64) *RoomMessageUpdateOne {
	rmuo.mutation.ResetReplyID()
	rmuo.mutation.SetReplyID(u)
	return rmuo
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableReplyID(u *uint64) *RoomMessageUpdateOne {
	if u != nil {
		rmuo.SetReplyID(*u)
	}
	return rmuo
}

// AddReplyID adds u to the "reply_id" field.
func (rmuo *RoomMessageUpdateOne) AddReplyID(u int64) *RoomMessageUpdateOne {
	rmuo.mutation.AddReplyID(u)
	return rmuo
}

// ClearReplyID clears the value of the "reply_id" field.
func (rmuo *RoomMessageUpdateOne) ClearReplyID() *RoomMessageUpdateOne {
	rmuo.mutation.ClearReplyID()
	return rmuo
}

// SetEventTime sets the "event_time" field.
func (rmuo *RoomMessageUpdateOne) SetEventTime(t time.Time) *RoomMessageUpdateOne {
	rmuo.mutation.SetEventTime(t)
	return rmuo
}

// SetNillableEventTime sets the "event_time" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableEventTime(t *time.Time) *RoomMessageUpdateOne {
	if t != nil {
		rmuo.SetEventTime(*t)
	}
	return rmuo
}

// ClearEventTime clears the value of the "event_time" field.
func (rmuo *RoomMessageUpdateOne) ClearEventTime() *RoomMessageUpdateOne {
	rmuo.mutation.ClearEventTime()
	return rmuo
}

// SetText sets the "text" field.
func (rmuo *RoomMessageUpdateOne) SetText(s string) *RoomMessageUpdateOne {
	rmuo.mutation.SetText(s)
	return rmuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (rmuo *RoomMessageUpdateOne) SetNillableText(s *string) *RoomMessageUpdateOne {
	if s != nil {
		rmuo.SetText(*s)
	}
	return rmuo
}

// Mutation returns the RoomMessageMutation object of the builder.
func (rmuo *RoomMessageUpdateOne) Mutation() *RoomMessageMutation {
	return rmuo.mutation
}

// Where appends a list predicates to the RoomMessageUpdate builder.
func (rmuo *RoomMessageUpdateOne) Where(ps ...predicate.RoomMessage) *RoomMessageUpdateOne {
	rmuo.mutation.Where(ps...)
	return rmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmuo *RoomMessageUpdateOne) Select(field string, fields ...string) *RoomMessageUpdateOne {
	rmuo.fields = append([]string{field}, fields...)
	return rmuo
}

// Save executes the query and returns the updated RoomMessage entity.
func (rmuo *RoomMessageUpdateOne) Save(ctx context.Context) (*RoomMessage, error) {
	rmuo.defaults()
	return withHooks(ctx, rmuo.sqlSave, rmuo.mutation, rmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmuo *RoomMessageUpdateOne) SaveX(ctx context.Context) *RoomMessage {
	node, err := rmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmuo *RoomMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := rmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmuo *RoomMessageUpdateOne) ExecX(ctx context.Context) {
	if err := rmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmuo *RoomMessageUpdateOne) defaults() {
	if _, ok := rmuo.mutation.UpdatedAt(); !ok {
		v := roommessage.UpdateDefaultUpdatedAt()
		rmuo.mutation.SetUpdatedAt(v)
	}
}

func (rmuo *RoomMessageUpdateOne) sqlSave(ctx context.Context) (_node *RoomMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(roommessage.Table, roommessage.Columns, sqlgraph.NewFieldSpec(roommessage.FieldID, field.TypeUint64))
	id, ok := rmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoomMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roommessage.FieldID)
		for _, f := range fields {
			if !roommessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roommessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmuo.mutation.UUID(); ok {
		_spec.SetField(roommessage.FieldUUID, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.CreatedAt(); ok {
		_spec.SetField(roommessage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(roommessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rmuo.mutation.DeletedAt(); ok {
		_spec.SetField(roommessage.FieldDeletedAt, field.TypeTime, value)
	}
	if rmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(roommessage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rmuo.mutation.Sid(); ok {
		_spec.SetField(roommessage.FieldSid, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.ParticipantSid(); ok {
		_spec.SetField(roommessage.FieldParticipantSid, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.ParticipantName(); ok {
		_spec.SetField(roommessage.FieldParticipantName, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.GetType(); ok {
		_spec.SetField(roommessage.FieldType, field.TypeUint32, value)
	}
	if value, ok := rmuo.mutation.AddedType(); ok {
		_spec.AddField(roommessage.FieldType, field.TypeUint32, value)
	}
	if rmuo.mutation.TypeCleared() {
		_spec.ClearField(roommessage.FieldType, field.TypeUint32)
	}
	if value, ok := rmuo.mutation.IsReply(); ok {
		_spec.SetField(roommessage.FieldIsReply, field.TypeUint32, value)
	}
	if value, ok := rmuo.mutation.AddedIsReply(); ok {
		_spec.AddField(roommessage.FieldIsReply, field.TypeUint32, value)
	}
	if value, ok := rmuo.mutation.ReplyID(); ok {
		_spec.SetField(roommessage.FieldReplyID, field.TypeUint64, value)
	}
	if value, ok := rmuo.mutation.AddedReplyID(); ok {
		_spec.AddField(roommessage.FieldReplyID, field.TypeUint64, value)
	}
	if rmuo.mutation.ReplyIDCleared() {
		_spec.ClearField(roommessage.FieldReplyID, field.TypeUint64)
	}
	if value, ok := rmuo.mutation.EventTime(); ok {
		_spec.SetField(roommessage.FieldEventTime, field.TypeTime, value)
	}
	if rmuo.mutation.EventTimeCleared() {
		_spec.ClearField(roommessage.FieldEventTime, field.TypeTime)
	}
	if value, ok := rmuo.mutation.Text(); ok {
		_spec.SetField(roommessage.FieldText, field.TypeString, value)
	}
	_node = &RoomMessage{config: rmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roommessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmuo.mutation.done = true
	return _node, nil
}
