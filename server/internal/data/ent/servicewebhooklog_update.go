// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/predicate"
	"faceto-ai/internal/data/ent/servicewebhooklog"
	"faceto-ai/internal/data/schema"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceWebhookLogUpdate is the builder for updating ServiceWebhookLog entities.
type ServiceWebhookLogUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceWebhookLogMutation
}

// Where appends a list predicates to the ServiceWebhookLogUpdate builder.
func (swlu *ServiceWebhookLogUpdate) Where(ps ...predicate.ServiceWebhookLog) *ServiceWebhookLogUpdate {
	swlu.mutation.Where(ps...)
	return swlu
}

// SetUUID sets the "uuid" field.
func (swlu *ServiceWebhookLogUpdate) SetUUID(s string) *ServiceWebhookLogUpdate {
	swlu.mutation.SetUUID(s)
	return swlu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableUUID(s *string) *ServiceWebhookLogUpdate {
	if s != nil {
		swlu.SetUUID(*s)
	}
	return swlu
}

// SetCreatedAt sets the "created_at" field.
func (swlu *ServiceWebhookLogUpdate) SetCreatedAt(t time.Time) *ServiceWebhookLogUpdate {
	swlu.mutation.SetCreatedAt(t)
	return swlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableCreatedAt(t *time.Time) *ServiceWebhookLogUpdate {
	if t != nil {
		swlu.SetCreatedAt(*t)
	}
	return swlu
}

// SetUpdatedAt sets the "updated_at" field.
func (swlu *ServiceWebhookLogUpdate) SetUpdatedAt(t time.Time) *ServiceWebhookLogUpdate {
	swlu.mutation.SetUpdatedAt(t)
	return swlu
}

// SetDeletedAt sets the "deleted_at" field.
func (swlu *ServiceWebhookLogUpdate) SetDeletedAt(t time.Time) *ServiceWebhookLogUpdate {
	swlu.mutation.SetDeletedAt(t)
	return swlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableDeletedAt(t *time.Time) *ServiceWebhookLogUpdate {
	if t != nil {
		swlu.SetDeletedAt(*t)
	}
	return swlu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (swlu *ServiceWebhookLogUpdate) ClearDeletedAt() *ServiceWebhookLogUpdate {
	swlu.mutation.ClearDeletedAt()
	return swlu
}

// SetName sets the "name" field.
func (swlu *ServiceWebhookLogUpdate) SetName(s string) *ServiceWebhookLogUpdate {
	swlu.mutation.SetName(s)
	return swlu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableName(s *string) *ServiceWebhookLogUpdate {
	if s != nil {
		swlu.SetName(*s)
	}
	return swlu
}

// SetSid sets the "sid" field.
func (swlu *ServiceWebhookLogUpdate) SetSid(s string) *ServiceWebhookLogUpdate {
	swlu.mutation.SetSid(s)
	return swlu
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableSid(s *string) *ServiceWebhookLogUpdate {
	if s != nil {
		swlu.SetSid(*s)
	}
	return swlu
}

// SetURL sets the "url" field.
func (swlu *ServiceWebhookLogUpdate) SetURL(s string) *ServiceWebhookLogUpdate {
	swlu.mutation.SetURL(s)
	return swlu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableURL(s *string) *ServiceWebhookLogUpdate {
	if s != nil {
		swlu.SetURL(*s)
	}
	return swlu
}

// SetStatusCode sets the "status_code" field.
func (swlu *ServiceWebhookLogUpdate) SetStatusCode(u uint16) *ServiceWebhookLogUpdate {
	swlu.mutation.ResetStatusCode()
	swlu.mutation.SetStatusCode(u)
	return swlu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableStatusCode(u *uint16) *ServiceWebhookLogUpdate {
	if u != nil {
		swlu.SetStatusCode(*u)
	}
	return swlu
}

// AddStatusCode adds u to the "status_code" field.
func (swlu *ServiceWebhookLogUpdate) AddStatusCode(u int16) *ServiceWebhookLogUpdate {
	swlu.mutation.AddStatusCode(u)
	return swlu
}

// ClearStatusCode clears the value of the "status_code" field.
func (swlu *ServiceWebhookLogUpdate) ClearStatusCode() *ServiceWebhookLogUpdate {
	swlu.mutation.ClearStatusCode()
	return swlu
}

// SetTimes sets the "times" field.
func (swlu *ServiceWebhookLogUpdate) SetTimes(u uint8) *ServiceWebhookLogUpdate {
	swlu.mutation.ResetTimes()
	swlu.mutation.SetTimes(u)
	return swlu
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (swlu *ServiceWebhookLogUpdate) SetNillableTimes(u *uint8) *ServiceWebhookLogUpdate {
	if u != nil {
		swlu.SetTimes(*u)
	}
	return swlu
}

// AddTimes adds u to the "times" field.
func (swlu *ServiceWebhookLogUpdate) AddTimes(u int8) *ServiceWebhookLogUpdate {
	swlu.mutation.AddTimes(u)
	return swlu
}

// ClearTimes clears the value of the "times" field.
func (swlu *ServiceWebhookLogUpdate) ClearTimes() *ServiceWebhookLogUpdate {
	swlu.mutation.ClearTimes()
	return swlu
}

// SetRequest sets the "request" field.
func (swlu *ServiceWebhookLogUpdate) SetRequest(sr *schema.WebhookRequest) *ServiceWebhookLogUpdate {
	swlu.mutation.SetRequest(sr)
	return swlu
}

// ClearRequest clears the value of the "request" field.
func (swlu *ServiceWebhookLogUpdate) ClearRequest() *ServiceWebhookLogUpdate {
	swlu.mutation.ClearRequest()
	return swlu
}

// SetResp sets the "resp" field.
func (swlu *ServiceWebhookLogUpdate) SetResp(sr *schema.WebhookResp) *ServiceWebhookLogUpdate {
	swlu.mutation.SetResp(sr)
	return swlu
}

// ClearResp clears the value of the "resp" field.
func (swlu *ServiceWebhookLogUpdate) ClearResp() *ServiceWebhookLogUpdate {
	swlu.mutation.ClearResp()
	return swlu
}

// Mutation returns the ServiceWebhookLogMutation object of the builder.
func (swlu *ServiceWebhookLogUpdate) Mutation() *ServiceWebhookLogMutation {
	return swlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (swlu *ServiceWebhookLogUpdate) Save(ctx context.Context) (int, error) {
	swlu.defaults()
	return withHooks(ctx, swlu.sqlSave, swlu.mutation, swlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (swlu *ServiceWebhookLogUpdate) SaveX(ctx context.Context) int {
	affected, err := swlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (swlu *ServiceWebhookLogUpdate) Exec(ctx context.Context) error {
	_, err := swlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swlu *ServiceWebhookLogUpdate) ExecX(ctx context.Context) {
	if err := swlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (swlu *ServiceWebhookLogUpdate) defaults() {
	if _, ok := swlu.mutation.UpdatedAt(); !ok {
		v := servicewebhooklog.UpdateDefaultUpdatedAt()
		swlu.mutation.SetUpdatedAt(v)
	}
}

func (swlu *ServiceWebhookLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(servicewebhooklog.Table, servicewebhooklog.Columns, sqlgraph.NewFieldSpec(servicewebhooklog.FieldID, field.TypeUint64))
	if ps := swlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := swlu.mutation.UUID(); ok {
		_spec.SetField(servicewebhooklog.FieldUUID, field.TypeString, value)
	}
	if value, ok := swlu.mutation.CreatedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := swlu.mutation.UpdatedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := swlu.mutation.DeletedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldDeletedAt, field.TypeTime, value)
	}
	if swlu.mutation.DeletedAtCleared() {
		_spec.ClearField(servicewebhooklog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := swlu.mutation.Name(); ok {
		_spec.SetField(servicewebhooklog.FieldName, field.TypeString, value)
	}
	if value, ok := swlu.mutation.Sid(); ok {
		_spec.SetField(servicewebhooklog.FieldSid, field.TypeString, value)
	}
	if value, ok := swlu.mutation.URL(); ok {
		_spec.SetField(servicewebhooklog.FieldURL, field.TypeString, value)
	}
	if value, ok := swlu.mutation.StatusCode(); ok {
		_spec.SetField(servicewebhooklog.FieldStatusCode, field.TypeUint16, value)
	}
	if value, ok := swlu.mutation.AddedStatusCode(); ok {
		_spec.AddField(servicewebhooklog.FieldStatusCode, field.TypeUint16, value)
	}
	if swlu.mutation.StatusCodeCleared() {
		_spec.ClearField(servicewebhooklog.FieldStatusCode, field.TypeUint16)
	}
	if value, ok := swlu.mutation.Times(); ok {
		_spec.SetField(servicewebhooklog.FieldTimes, field.TypeUint8, value)
	}
	if value, ok := swlu.mutation.AddedTimes(); ok {
		_spec.AddField(servicewebhooklog.FieldTimes, field.TypeUint8, value)
	}
	if swlu.mutation.TimesCleared() {
		_spec.ClearField(servicewebhooklog.FieldTimes, field.TypeUint8)
	}
	if value, ok := swlu.mutation.Request(); ok {
		_spec.SetField(servicewebhooklog.FieldRequest, field.TypeJSON, value)
	}
	if swlu.mutation.RequestCleared() {
		_spec.ClearField(servicewebhooklog.FieldRequest, field.TypeJSON)
	}
	if value, ok := swlu.mutation.Resp(); ok {
		_spec.SetField(servicewebhooklog.FieldResp, field.TypeJSON, value)
	}
	if swlu.mutation.RespCleared() {
		_spec.ClearField(servicewebhooklog.FieldResp, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, swlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicewebhooklog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	swlu.mutation.done = true
	return n, nil
}

// ServiceWebhookLogUpdateOne is the builder for updating a single ServiceWebhookLog entity.
type ServiceWebhookLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceWebhookLogMutation
}

// SetUUID sets the "uuid" field.
func (swluo *ServiceWebhookLogUpdateOne) SetUUID(s string) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetUUID(s)
	return swluo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableUUID(s *string) *ServiceWebhookLogUpdateOne {
	if s != nil {
		swluo.SetUUID(*s)
	}
	return swluo
}

// SetCreatedAt sets the "created_at" field.
func (swluo *ServiceWebhookLogUpdateOne) SetCreatedAt(t time.Time) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetCreatedAt(t)
	return swluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableCreatedAt(t *time.Time) *ServiceWebhookLogUpdateOne {
	if t != nil {
		swluo.SetCreatedAt(*t)
	}
	return swluo
}

// SetUpdatedAt sets the "updated_at" field.
func (swluo *ServiceWebhookLogUpdateOne) SetUpdatedAt(t time.Time) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetUpdatedAt(t)
	return swluo
}

// SetDeletedAt sets the "deleted_at" field.
func (swluo *ServiceWebhookLogUpdateOne) SetDeletedAt(t time.Time) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetDeletedAt(t)
	return swluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableDeletedAt(t *time.Time) *ServiceWebhookLogUpdateOne {
	if t != nil {
		swluo.SetDeletedAt(*t)
	}
	return swluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (swluo *ServiceWebhookLogUpdateOne) ClearDeletedAt() *ServiceWebhookLogUpdateOne {
	swluo.mutation.ClearDeletedAt()
	return swluo
}

// SetName sets the "name" field.
func (swluo *ServiceWebhookLogUpdateOne) SetName(s string) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetName(s)
	return swluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableName(s *string) *ServiceWebhookLogUpdateOne {
	if s != nil {
		swluo.SetName(*s)
	}
	return swluo
}

// SetSid sets the "sid" field.
func (swluo *ServiceWebhookLogUpdateOne) SetSid(s string) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetSid(s)
	return swluo
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableSid(s *string) *ServiceWebhookLogUpdateOne {
	if s != nil {
		swluo.SetSid(*s)
	}
	return swluo
}

// SetURL sets the "url" field.
func (swluo *ServiceWebhookLogUpdateOne) SetURL(s string) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetURL(s)
	return swluo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableURL(s *string) *ServiceWebhookLogUpdateOne {
	if s != nil {
		swluo.SetURL(*s)
	}
	return swluo
}

// SetStatusCode sets the "status_code" field.
func (swluo *ServiceWebhookLogUpdateOne) SetStatusCode(u uint16) *ServiceWebhookLogUpdateOne {
	swluo.mutation.ResetStatusCode()
	swluo.mutation.SetStatusCode(u)
	return swluo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableStatusCode(u *uint16) *ServiceWebhookLogUpdateOne {
	if u != nil {
		swluo.SetStatusCode(*u)
	}
	return swluo
}

// AddStatusCode adds u to the "status_code" field.
func (swluo *ServiceWebhookLogUpdateOne) AddStatusCode(u int16) *ServiceWebhookLogUpdateOne {
	swluo.mutation.AddStatusCode(u)
	return swluo
}

// ClearStatusCode clears the value of the "status_code" field.
func (swluo *ServiceWebhookLogUpdateOne) ClearStatusCode() *ServiceWebhookLogUpdateOne {
	swluo.mutation.ClearStatusCode()
	return swluo
}

// SetTimes sets the "times" field.
func (swluo *ServiceWebhookLogUpdateOne) SetTimes(u uint8) *ServiceWebhookLogUpdateOne {
	swluo.mutation.ResetTimes()
	swluo.mutation.SetTimes(u)
	return swluo
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (swluo *ServiceWebhookLogUpdateOne) SetNillableTimes(u *uint8) *ServiceWebhookLogUpdateOne {
	if u != nil {
		swluo.SetTimes(*u)
	}
	return swluo
}

// AddTimes adds u to the "times" field.
func (swluo *ServiceWebhookLogUpdateOne) AddTimes(u int8) *ServiceWebhookLogUpdateOne {
	swluo.mutation.AddTimes(u)
	return swluo
}

// ClearTimes clears the value of the "times" field.
func (swluo *ServiceWebhookLogUpdateOne) ClearTimes() *ServiceWebhookLogUpdateOne {
	swluo.mutation.ClearTimes()
	return swluo
}

// SetRequest sets the "request" field.
func (swluo *ServiceWebhookLogUpdateOne) SetRequest(sr *schema.WebhookRequest) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetRequest(sr)
	return swluo
}

// ClearRequest clears the value of the "request" field.
func (swluo *ServiceWebhookLogUpdateOne) ClearRequest() *ServiceWebhookLogUpdateOne {
	swluo.mutation.ClearRequest()
	return swluo
}

// SetResp sets the "resp" field.
func (swluo *ServiceWebhookLogUpdateOne) SetResp(sr *schema.WebhookResp) *ServiceWebhookLogUpdateOne {
	swluo.mutation.SetResp(sr)
	return swluo
}

// ClearResp clears the value of the "resp" field.
func (swluo *ServiceWebhookLogUpdateOne) ClearResp() *ServiceWebhookLogUpdateOne {
	swluo.mutation.ClearResp()
	return swluo
}

// Mutation returns the ServiceWebhookLogMutation object of the builder.
func (swluo *ServiceWebhookLogUpdateOne) Mutation() *ServiceWebhookLogMutation {
	return swluo.mutation
}

// Where appends a list predicates to the ServiceWebhookLogUpdate builder.
func (swluo *ServiceWebhookLogUpdateOne) Where(ps ...predicate.ServiceWebhookLog) *ServiceWebhookLogUpdateOne {
	swluo.mutation.Where(ps...)
	return swluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (swluo *ServiceWebhookLogUpdateOne) Select(field string, fields ...string) *ServiceWebhookLogUpdateOne {
	swluo.fields = append([]string{field}, fields...)
	return swluo
}

// Save executes the query and returns the updated ServiceWebhookLog entity.
func (swluo *ServiceWebhookLogUpdateOne) Save(ctx context.Context) (*ServiceWebhookLog, error) {
	swluo.defaults()
	return withHooks(ctx, swluo.sqlSave, swluo.mutation, swluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (swluo *ServiceWebhookLogUpdateOne) SaveX(ctx context.Context) *ServiceWebhookLog {
	node, err := swluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (swluo *ServiceWebhookLogUpdateOne) Exec(ctx context.Context) error {
	_, err := swluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swluo *ServiceWebhookLogUpdateOne) ExecX(ctx context.Context) {
	if err := swluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (swluo *ServiceWebhookLogUpdateOne) defaults() {
	if _, ok := swluo.mutation.UpdatedAt(); !ok {
		v := servicewebhooklog.UpdateDefaultUpdatedAt()
		swluo.mutation.SetUpdatedAt(v)
	}
}

func (swluo *ServiceWebhookLogUpdateOne) sqlSave(ctx context.Context) (_node *ServiceWebhookLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(servicewebhooklog.Table, servicewebhooklog.Columns, sqlgraph.NewFieldSpec(servicewebhooklog.FieldID, field.TypeUint64))
	id, ok := swluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceWebhookLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := swluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicewebhooklog.FieldID)
		for _, f := range fields {
			if !servicewebhooklog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicewebhooklog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := swluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := swluo.mutation.UUID(); ok {
		_spec.SetField(servicewebhooklog.FieldUUID, field.TypeString, value)
	}
	if value, ok := swluo.mutation.CreatedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := swluo.mutation.UpdatedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := swluo.mutation.DeletedAt(); ok {
		_spec.SetField(servicewebhooklog.FieldDeletedAt, field.TypeTime, value)
	}
	if swluo.mutation.DeletedAtCleared() {
		_spec.ClearField(servicewebhooklog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := swluo.mutation.Name(); ok {
		_spec.SetField(servicewebhooklog.FieldName, field.TypeString, value)
	}
	if value, ok := swluo.mutation.Sid(); ok {
		_spec.SetField(servicewebhooklog.FieldSid, field.TypeString, value)
	}
	if value, ok := swluo.mutation.URL(); ok {
		_spec.SetField(servicewebhooklog.FieldURL, field.TypeString, value)
	}
	if value, ok := swluo.mutation.StatusCode(); ok {
		_spec.SetField(servicewebhooklog.FieldStatusCode, field.TypeUint16, value)
	}
	if value, ok := swluo.mutation.AddedStatusCode(); ok {
		_spec.AddField(servicewebhooklog.FieldStatusCode, field.TypeUint16, value)
	}
	if swluo.mutation.StatusCodeCleared() {
		_spec.ClearField(servicewebhooklog.FieldStatusCode, field.TypeUint16)
	}
	if value, ok := swluo.mutation.Times(); ok {
		_spec.SetField(servicewebhooklog.FieldTimes, field.TypeUint8, value)
	}
	if value, ok := swluo.mutation.AddedTimes(); ok {
		_spec.AddField(servicewebhooklog.FieldTimes, field.TypeUint8, value)
	}
	if swluo.mutation.TimesCleared() {
		_spec.ClearField(servicewebhooklog.FieldTimes, field.TypeUint8)
	}
	if value, ok := swluo.mutation.Request(); ok {
		_spec.SetField(servicewebhooklog.FieldRequest, field.TypeJSON, value)
	}
	if swluo.mutation.RequestCleared() {
		_spec.ClearField(servicewebhooklog.FieldRequest, field.TypeJSON)
	}
	if value, ok := swluo.mutation.Resp(); ok {
		_spec.SetField(servicewebhooklog.FieldResp, field.TypeJSON, value)
	}
	if swluo.mutation.RespCleared() {
		_spec.ClearField(servicewebhooklog.FieldResp, field.TypeJSON)
	}
	_node = &ServiceWebhookLog{config: swluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, swluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicewebhooklog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	swluo.mutation.done = true
	return _node, nil
}
