// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"faceto-ai/internal/data/ent/predicate"
	"faceto-ai/internal/data/ent/room"
	"faceto-ai/internal/data/schema"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUUID sets the "uuid" field.
func (ru *RoomUpdate) SetUUID(s string) *RoomUpdate {
	ru.mutation.SetUUID(s)
	return ru
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableUUID(s *string) *RoomUpdate {
	if s != nil {
		ru.SetUUID(*s)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RoomUpdate) SetCreatedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableCreatedAt(t *time.Time) *RoomUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoomUpdate) SetUpdatedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RoomUpdate) SetDeletedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableDeletedAt(t *time.Time) *RoomUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RoomUpdate) ClearDeletedAt() *RoomUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetName sets the "name" field.
func (ru *RoomUpdate) SetName(s string) *RoomUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableName(s *string) *RoomUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetSid sets the "sid" field.
func (ru *RoomUpdate) SetSid(s string) *RoomUpdate {
	ru.mutation.SetSid(s)
	return ru
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableSid(s *string) *RoomUpdate {
	if s != nil {
		ru.SetSid(*s)
	}
	return ru
}

// SetStatus sets the "status" field.
func (ru *RoomUpdate) SetStatus(u uint8) *RoomUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(u)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableStatus(u *uint8) *RoomUpdate {
	if u != nil {
		ru.SetStatus(*u)
	}
	return ru
}

// AddStatus adds u to the "status" field.
func (ru *RoomUpdate) AddStatus(u int8) *RoomUpdate {
	ru.mutation.AddStatus(u)
	return ru
}

// SetStartTime sets the "start_time" field.
func (ru *RoomUpdate) SetStartTime(t time.Time) *RoomUpdate {
	ru.mutation.SetStartTime(t)
	return ru
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableStartTime(t *time.Time) *RoomUpdate {
	if t != nil {
		ru.SetStartTime(*t)
	}
	return ru
}

// ClearStartTime clears the value of the "start_time" field.
func (ru *RoomUpdate) ClearStartTime() *RoomUpdate {
	ru.mutation.ClearStartTime()
	return ru
}

// SetLeftTime sets the "left_time" field.
func (ru *RoomUpdate) SetLeftTime(t time.Time) *RoomUpdate {
	ru.mutation.SetLeftTime(t)
	return ru
}

// SetNillableLeftTime sets the "left_time" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableLeftTime(t *time.Time) *RoomUpdate {
	if t != nil {
		ru.SetLeftTime(*t)
	}
	return ru
}

// ClearLeftTime clears the value of the "left_time" field.
func (ru *RoomUpdate) ClearLeftTime() *RoomUpdate {
	ru.mutation.ClearLeftTime()
	return ru
}

// SetEndTime sets the "end_time" field.
func (ru *RoomUpdate) SetEndTime(t time.Time) *RoomUpdate {
	ru.mutation.SetEndTime(t)
	return ru
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableEndTime(t *time.Time) *RoomUpdate {
	if t != nil {
		ru.SetEndTime(*t)
	}
	return ru
}

// ClearEndTime clears the value of the "end_time" field.
func (ru *RoomUpdate) ClearEndTime() *RoomUpdate {
	ru.mutation.ClearEndTime()
	return ru
}

// SetVodStatus sets the "vod_status" field.
func (ru *RoomUpdate) SetVodStatus(u uint8) *RoomUpdate {
	ru.mutation.ResetVodStatus()
	ru.mutation.SetVodStatus(u)
	return ru
}

// SetNillableVodStatus sets the "vod_status" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableVodStatus(u *uint8) *RoomUpdate {
	if u != nil {
		ru.SetVodStatus(*u)
	}
	return ru
}

// AddVodStatus adds u to the "vod_status" field.
func (ru *RoomUpdate) AddVodStatus(u int8) *RoomUpdate {
	ru.mutation.AddVodStatus(u)
	return ru
}

// ClearVodStatus clears the value of the "vod_status" field.
func (ru *RoomUpdate) ClearVodStatus() *RoomUpdate {
	ru.mutation.ClearVodStatus()
	return ru
}

// SetMetadata sets the "metadata" field.
func (ru *RoomUpdate) SetMetadata(s *schema.Metadata) *RoomUpdate {
	ru.mutation.SetMetadata(s)
	return ru
}

// ClearMetadata clears the value of the "metadata" field.
func (ru *RoomUpdate) ClearMetadata() *RoomUpdate {
	ru.mutation.ClearMetadata()
	return ru
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoomUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeUint64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UUID(); ok {
		_spec.SetField(room.FieldUUID, field.TypeString, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(room.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(room.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(room.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(room.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Sid(); ok {
		_spec.SetField(room.FieldSid, field.TypeString, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(room.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.AddField(room.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ru.mutation.StartTime(); ok {
		_spec.SetField(room.FieldStartTime, field.TypeTime, value)
	}
	if ru.mutation.StartTimeCleared() {
		_spec.ClearField(room.FieldStartTime, field.TypeTime)
	}
	if value, ok := ru.mutation.LeftTime(); ok {
		_spec.SetField(room.FieldLeftTime, field.TypeTime, value)
	}
	if ru.mutation.LeftTimeCleared() {
		_spec.ClearField(room.FieldLeftTime, field.TypeTime)
	}
	if value, ok := ru.mutation.EndTime(); ok {
		_spec.SetField(room.FieldEndTime, field.TypeTime, value)
	}
	if ru.mutation.EndTimeCleared() {
		_spec.ClearField(room.FieldEndTime, field.TypeTime)
	}
	if value, ok := ru.mutation.VodStatus(); ok {
		_spec.SetField(room.FieldVodStatus, field.TypeUint8, value)
	}
	if value, ok := ru.mutation.AddedVodStatus(); ok {
		_spec.AddField(room.FieldVodStatus, field.TypeUint8, value)
	}
	if ru.mutation.VodStatusCleared() {
		_spec.ClearField(room.FieldVodStatus, field.TypeUint8)
	}
	if value, ok := ru.mutation.Metadata(); ok {
		_spec.SetField(room.FieldMetadata, field.TypeJSON, value)
	}
	if ru.mutation.MetadataCleared() {
		_spec.ClearField(room.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetUUID sets the "uuid" field.
func (ruo *RoomUpdateOne) SetUUID(s string) *RoomUpdateOne {
	ruo.mutation.SetUUID(s)
	return ruo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableUUID(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetUUID(*s)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RoomUpdateOne) SetCreatedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableCreatedAt(t *time.Time) *RoomUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoomUpdateOne) SetUpdatedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RoomUpdateOne) SetDeletedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableDeletedAt(t *time.Time) *RoomUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RoomUpdateOne) ClearDeletedAt() *RoomUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RoomUpdateOne) SetName(s string) *RoomUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableName(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetSid sets the "sid" field.
func (ruo *RoomUpdateOne) SetSid(s string) *RoomUpdateOne {
	ruo.mutation.SetSid(s)
	return ruo
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableSid(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetSid(*s)
	}
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RoomUpdateOne) SetStatus(u uint8) *RoomUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(u)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableStatus(u *uint8) *RoomUpdateOne {
	if u != nil {
		ruo.SetStatus(*u)
	}
	return ruo
}

// AddStatus adds u to the "status" field.
func (ruo *RoomUpdateOne) AddStatus(u int8) *RoomUpdateOne {
	ruo.mutation.AddStatus(u)
	return ruo
}

// SetStartTime sets the "start_time" field.
func (ruo *RoomUpdateOne) SetStartTime(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetStartTime(t)
	return ruo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableStartTime(t *time.Time) *RoomUpdateOne {
	if t != nil {
		ruo.SetStartTime(*t)
	}
	return ruo
}

// ClearStartTime clears the value of the "start_time" field.
func (ruo *RoomUpdateOne) ClearStartTime() *RoomUpdateOne {
	ruo.mutation.ClearStartTime()
	return ruo
}

// SetLeftTime sets the "left_time" field.
func (ruo *RoomUpdateOne) SetLeftTime(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetLeftTime(t)
	return ruo
}

// SetNillableLeftTime sets the "left_time" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableLeftTime(t *time.Time) *RoomUpdateOne {
	if t != nil {
		ruo.SetLeftTime(*t)
	}
	return ruo
}

// ClearLeftTime clears the value of the "left_time" field.
func (ruo *RoomUpdateOne) ClearLeftTime() *RoomUpdateOne {
	ruo.mutation.ClearLeftTime()
	return ruo
}

// SetEndTime sets the "end_time" field.
func (ruo *RoomUpdateOne) SetEndTime(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetEndTime(t)
	return ruo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableEndTime(t *time.Time) *RoomUpdateOne {
	if t != nil {
		ruo.SetEndTime(*t)
	}
	return ruo
}

// ClearEndTime clears the value of the "end_time" field.
func (ruo *RoomUpdateOne) ClearEndTime() *RoomUpdateOne {
	ruo.mutation.ClearEndTime()
	return ruo
}

// SetVodStatus sets the "vod_status" field.
func (ruo *RoomUpdateOne) SetVodStatus(u uint8) *RoomUpdateOne {
	ruo.mutation.ResetVodStatus()
	ruo.mutation.SetVodStatus(u)
	return ruo
}

// SetNillableVodStatus sets the "vod_status" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableVodStatus(u *uint8) *RoomUpdateOne {
	if u != nil {
		ruo.SetVodStatus(*u)
	}
	return ruo
}

// AddVodStatus adds u to the "vod_status" field.
func (ruo *RoomUpdateOne) AddVodStatus(u int8) *RoomUpdateOne {
	ruo.mutation.AddVodStatus(u)
	return ruo
}

// ClearVodStatus clears the value of the "vod_status" field.
func (ruo *RoomUpdateOne) ClearVodStatus() *RoomUpdateOne {
	ruo.mutation.ClearVodStatus()
	return ruo
}

// SetMetadata sets the "metadata" field.
func (ruo *RoomUpdateOne) SetMetadata(s *schema.Metadata) *RoomUpdateOne {
	ruo.mutation.SetMetadata(s)
	return ruo
}

// ClearMetadata clears the value of the "metadata" field.
func (ruo *RoomUpdateOne) ClearMetadata() *RoomUpdateOne {
	ruo.mutation.ClearMetadata()
	return ruo
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoomUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeUint64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UUID(); ok {
		_spec.SetField(room.FieldUUID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(room.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(room.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(room.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(room.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Sid(); ok {
		_spec.SetField(room.FieldSid, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(room.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.AddField(room.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := ruo.mutation.StartTime(); ok {
		_spec.SetField(room.FieldStartTime, field.TypeTime, value)
	}
	if ruo.mutation.StartTimeCleared() {
		_spec.ClearField(room.FieldStartTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.LeftTime(); ok {
		_spec.SetField(room.FieldLeftTime, field.TypeTime, value)
	}
	if ruo.mutation.LeftTimeCleared() {
		_spec.ClearField(room.FieldLeftTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.EndTime(); ok {
		_spec.SetField(room.FieldEndTime, field.TypeTime, value)
	}
	if ruo.mutation.EndTimeCleared() {
		_spec.ClearField(room.FieldEndTime, field.TypeTime)
	}
	if value, ok := ruo.mutation.VodStatus(); ok {
		_spec.SetField(room.FieldVodStatus, field.TypeUint8, value)
	}
	if value, ok := ruo.mutation.AddedVodStatus(); ok {
		_spec.AddField(room.FieldVodStatus, field.TypeUint8, value)
	}
	if ruo.mutation.VodStatusCleared() {
		_spec.ClearField(room.FieldVodStatus, field.TypeUint8)
	}
	if value, ok := ruo.mutation.Metadata(); ok {
		_spec.SetField(room.FieldMetadata, field.TypeJSON, value)
	}
	if ruo.mutation.MetadataCleared() {
		_spec.ClearField(room.FieldMetadata, field.TypeJSON)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
