// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"faceto-ai/internal/data/ent/servicewebhooklog"
	"faceto-ai/internal/data/schema"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ServiceWebhookLog is the model entity for the ServiceWebhookLog schema.
type ServiceWebhookLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Sid holds the value of the "sid" field.
	Sid string `json:"sid,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode uint16 `json:"status_code,omitempty"`
	// Times holds the value of the "times" field.
	Times uint8 `json:"times,omitempty"`
	// Request holds the value of the "request" field.
	Request *schema.WebhookRequest `json:"request,omitempty"`
	// Resp holds the value of the "resp" field.
	Resp         *schema.WebhookResp `json:"resp,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceWebhookLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicewebhooklog.FieldRequest, servicewebhooklog.FieldResp:
			values[i] = new([]byte)
		case servicewebhooklog.FieldID, servicewebhooklog.FieldStatusCode, servicewebhooklog.FieldTimes:
			values[i] = new(sql.NullInt64)
		case servicewebhooklog.FieldUUID, servicewebhooklog.FieldName, servicewebhooklog.FieldSid, servicewebhooklog.FieldURL:
			values[i] = new(sql.NullString)
		case servicewebhooklog.FieldCreatedAt, servicewebhooklog.FieldUpdatedAt, servicewebhooklog.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceWebhookLog fields.
func (swl *ServiceWebhookLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicewebhooklog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			swl.ID = uint64(value.Int64)
		case servicewebhooklog.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				swl.UUID = value.String
			}
		case servicewebhooklog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				swl.CreatedAt = value.Time
			}
		case servicewebhooklog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				swl.UpdatedAt = value.Time
			}
		case servicewebhooklog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				swl.DeletedAt = value.Time
			}
		case servicewebhooklog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				swl.Name = value.String
			}
		case servicewebhooklog.FieldSid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sid", values[i])
			} else if value.Valid {
				swl.Sid = value.String
			}
		case servicewebhooklog.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				swl.URL = value.String
			}
		case servicewebhooklog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				swl.StatusCode = uint16(value.Int64)
			}
		case servicewebhooklog.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				swl.Times = uint8(value.Int64)
			}
		case servicewebhooklog.FieldRequest:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field request", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &swl.Request); err != nil {
					return fmt.Errorf("unmarshal field request: %w", err)
				}
			}
		case servicewebhooklog.FieldResp:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resp", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &swl.Resp); err != nil {
					return fmt.Errorf("unmarshal field resp: %w", err)
				}
			}
		default:
			swl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceWebhookLog.
// This includes values selected through modifiers, order, etc.
func (swl *ServiceWebhookLog) Value(name string) (ent.Value, error) {
	return swl.selectValues.Get(name)
}

// Update returns a builder for updating this ServiceWebhookLog.
// Note that you need to call ServiceWebhookLog.Unwrap() before calling this method if this ServiceWebhookLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (swl *ServiceWebhookLog) Update() *ServiceWebhookLogUpdateOne {
	return NewServiceWebhookLogClient(swl.config).UpdateOne(swl)
}

// Unwrap unwraps the ServiceWebhookLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (swl *ServiceWebhookLog) Unwrap() *ServiceWebhookLog {
	_tx, ok := swl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceWebhookLog is not a transactional entity")
	}
	swl.config.driver = _tx.drv
	return swl
}

// String implements the fmt.Stringer.
func (swl *ServiceWebhookLog) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceWebhookLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", swl.ID))
	builder.WriteString("uuid=")
	builder.WriteString(swl.UUID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(swl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(swl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(swl.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(swl.Name)
	builder.WriteString(", ")
	builder.WriteString("sid=")
	builder.WriteString(swl.Sid)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(swl.URL)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", swl.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("times=")
	builder.WriteString(fmt.Sprintf("%v", swl.Times))
	builder.WriteString(", ")
	builder.WriteString("request=")
	builder.WriteString(fmt.Sprintf("%v", swl.Request))
	builder.WriteString(", ")
	builder.WriteString("resp=")
	builder.WriteString(fmt.Sprintf("%v", swl.Resp))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceWebhookLogs is a parsable slice of ServiceWebhookLog.
type ServiceWebhookLogs []*ServiceWebhookLog
