// Code generated by ent, DO NOT EDIT.

package ent

import (
	"faceto-ai/internal/data/ent/authtoken"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuthToken is the model entity for the AuthToken schema.
type AuthToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// ExpiresIn holds the value of the "expires_in" field.
	ExpiresIn    time.Time `json:"expires_in,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldID:
			values[i] = new(sql.NullInt64)
		case authtoken.FieldUUID, authtoken.FieldClientID, authtoken.FieldAccessToken, authtoken.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case authtoken.FieldCreatedAt, authtoken.FieldUpdatedAt, authtoken.FieldDeletedAt, authtoken.FieldExpiresIn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthToken fields.
func (at *AuthToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authtoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = uint64(value.Int64)
		case authtoken.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				at.UUID = value.String
			}
		case authtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case authtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case authtoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				at.DeletedAt = value.Time
			}
		case authtoken.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				at.ClientID = value.String
			}
		case authtoken.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				at.AccessToken = value.String
			}
		case authtoken.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				at.RefreshToken = value.String
			}
		case authtoken.FieldExpiresIn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_in", values[i])
			} else if value.Valid {
				at.ExpiresIn = value.Time
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthToken.
// This includes values selected through modifiers, order, etc.
func (at *AuthToken) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// Update returns a builder for updating this AuthToken.
// Note that you need to call AuthToken.Unwrap() before calling this method if this AuthToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AuthToken) Update() *AuthTokenUpdateOne {
	return NewAuthTokenClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AuthToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AuthToken) Unwrap() *AuthToken {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthToken is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AuthToken) String() string {
	var builder strings.Builder
	builder.WriteString("AuthToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("uuid=")
	builder.WriteString(at.UUID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(at.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(at.ClientID)
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(at.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(at.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("expires_in=")
	builder.WriteString(at.ExpiresIn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuthTokens is a parsable slice of AuthToken.
type AuthTokens []*AuthToken
