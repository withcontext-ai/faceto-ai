// Code generated by ent, DO NOT EDIT.

package auth

import (
	"faceto-ai/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUUID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldDeletedAt, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldClientSecret, v))
}

// GrantScope applies equality check predicate on the "grant_scope" field. It's identical to GrantScopeEQ.
func GrantScope(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldGrantScope, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldUUID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldDeletedAt))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretIsNil applies the IsNil predicate on the "client_secret" field.
func ClientSecretIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldClientSecret))
}

// ClientSecretNotNil applies the NotNil predicate on the "client_secret" field.
func ClientSecretNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldClientSecret))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldClientSecret, v))
}

// GrantScopeEQ applies the EQ predicate on the "grant_scope" field.
func GrantScopeEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldGrantScope, v))
}

// GrantScopeNEQ applies the NEQ predicate on the "grant_scope" field.
func GrantScopeNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldGrantScope, v))
}

// GrantScopeIn applies the In predicate on the "grant_scope" field.
func GrantScopeIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldGrantScope, vs...))
}

// GrantScopeNotIn applies the NotIn predicate on the "grant_scope" field.
func GrantScopeNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldGrantScope, vs...))
}

// GrantScopeGT applies the GT predicate on the "grant_scope" field.
func GrantScopeGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldGrantScope, v))
}

// GrantScopeGTE applies the GTE predicate on the "grant_scope" field.
func GrantScopeGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldGrantScope, v))
}

// GrantScopeLT applies the LT predicate on the "grant_scope" field.
func GrantScopeLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldGrantScope, v))
}

// GrantScopeLTE applies the LTE predicate on the "grant_scope" field.
func GrantScopeLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldGrantScope, v))
}

// GrantScopeContains applies the Contains predicate on the "grant_scope" field.
func GrantScopeContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldGrantScope, v))
}

// GrantScopeHasPrefix applies the HasPrefix predicate on the "grant_scope" field.
func GrantScopeHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldGrantScope, v))
}

// GrantScopeHasSuffix applies the HasSuffix predicate on the "grant_scope" field.
func GrantScopeHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldGrantScope, v))
}

// GrantScopeIsNil applies the IsNil predicate on the "grant_scope" field.
func GrantScopeIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldGrantScope))
}

// GrantScopeNotNil applies the NotNil predicate on the "grant_scope" field.
func GrantScopeNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldGrantScope))
}

// GrantScopeEqualFold applies the EqualFold predicate on the "grant_scope" field.
func GrantScopeEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldGrantScope, v))
}

// GrantScopeContainsFold applies the ContainsFold predicate on the "grant_scope" field.
func GrantScopeContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldGrantScope, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Auth) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Auth) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Auth) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		p(s.Not())
	})
}
