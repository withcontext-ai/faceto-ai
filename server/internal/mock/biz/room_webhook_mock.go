// Code generated by MockGen. DO NOT EDIT.
// Source: room_webhook.go

// Package biz is a generated GoMock package.
package biz

import (
	context "context"
	biz "faceto-ai/internal/biz"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoomWebhookRepo is a mock of RoomWebhookRepo interface.
type MockRoomWebhookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRoomWebhookRepoMockRecorder
}

// MockRoomWebhookRepoMockRecorder is the mock recorder for MockRoomWebhookRepo.
type MockRoomWebhookRepoMockRecorder struct {
	mock *MockRoomWebhookRepo
}

// NewMockRoomWebhookRepo creates a new mock instance.
func NewMockRoomWebhookRepo(ctrl *gomock.Controller) *MockRoomWebhookRepo {
	mock := &MockRoomWebhookRepo{ctrl: ctrl}
	mock.recorder = &MockRoomWebhookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomWebhookRepo) EXPECT() *MockRoomWebhookRepoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRoomWebhookRepo) Save(ctx context.Context, room *biz.RoomWebhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRoomWebhookRepoMockRecorder) Save(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRoomWebhookRepo)(nil).Save), ctx, room)
}

// MockLiveGPTWebhook is a mock of LiveGPTWebhook interface.
type MockLiveGPTWebhook struct {
	ctrl     *gomock.Controller
	recorder *MockLiveGPTWebhookMockRecorder
}

// MockLiveGPTWebhookMockRecorder is the mock recorder for MockLiveGPTWebhook.
type MockLiveGPTWebhookMockRecorder struct {
	mock *MockLiveGPTWebhook
}

// NewMockLiveGPTWebhook creates a new mock instance.
func NewMockLiveGPTWebhook(ctrl *gomock.Controller) *MockLiveGPTWebhook {
	mock := &MockLiveGPTWebhook{ctrl: ctrl}
	mock.recorder = &MockLiveGPTWebhookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveGPTWebhook) EXPECT() *MockLiveGPTWebhookMockRecorder {
	return m.recorder
}

// EventParticipantJoined mocks base method.
func (m *MockLiveGPTWebhook) EventParticipantJoined(ctx context.Context, roomName, roomSid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventParticipantJoined", ctx, roomName, roomSid)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventParticipantJoined indicates an expected call of EventParticipantJoined.
func (mr *MockLiveGPTWebhookMockRecorder) EventParticipantJoined(ctx, roomName, roomSid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventParticipantJoined", reflect.TypeOf((*MockLiveGPTWebhook)(nil).EventParticipantJoined), ctx, roomName, roomSid)
}

// EventParticipantLeft mocks base method.
func (m *MockLiveGPTWebhook) EventParticipantLeft(ctx context.Context, roomName, roomSid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventParticipantLeft", ctx, roomName, roomSid)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventParticipantLeft indicates an expected call of EventParticipantLeft.
func (mr *MockLiveGPTWebhookMockRecorder) EventParticipantLeft(ctx, roomName, roomSid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventParticipantLeft", reflect.TypeOf((*MockLiveGPTWebhook)(nil).EventParticipantLeft), ctx, roomName, roomSid)
}

// EventRoomEgressEnded mocks base method.
func (m *MockLiveGPTWebhook) EventRoomEgressEnded(ctx context.Context, roomName, roomSid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRoomEgressEnded", ctx, roomName, roomSid)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventRoomEgressEnded indicates an expected call of EventRoomEgressEnded.
func (mr *MockLiveGPTWebhookMockRecorder) EventRoomEgressEnded(ctx, roomName, roomSid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRoomEgressEnded", reflect.TypeOf((*MockLiveGPTWebhook)(nil).EventRoomEgressEnded), ctx, roomName, roomSid)
}

// EventRoomFinished mocks base method.
func (m *MockLiveGPTWebhook) EventRoomFinished(ctx context.Context, roomName, roomSid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRoomFinished", ctx, roomName, roomSid)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventRoomFinished indicates an expected call of EventRoomFinished.
func (mr *MockLiveGPTWebhookMockRecorder) EventRoomFinished(ctx, roomName, roomSid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRoomFinished", reflect.TypeOf((*MockLiveGPTWebhook)(nil).EventRoomFinished), ctx, roomName, roomSid)
}

// EventRoomStarted mocks base method.
func (m *MockLiveGPTWebhook) EventRoomStarted(ctx context.Context, roomName, roomSid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventRoomStarted", ctx, roomName, roomSid)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventRoomStarted indicates an expected call of EventRoomStarted.
func (mr *MockLiveGPTWebhookMockRecorder) EventRoomStarted(ctx, roomName, roomSid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventRoomStarted", reflect.TypeOf((*MockLiveGPTWebhook)(nil).EventRoomStarted), ctx, roomName, roomSid)
}

// Save mocks base method.
func (m *MockLiveGPTWebhook) Save(ctx context.Context, swlog *biz.ServiceWebhookLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, swlog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLiveGPTWebhookMockRecorder) Save(ctx, swlog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLiveGPTWebhook)(nil).Save), ctx, swlog)
}
