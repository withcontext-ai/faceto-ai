// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.3
// source: voice/v1/voice.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVoiceAddVoice = "/voice.v1.Voice/AddVoice"
const OperationVoiceEditVoice = "/voice.v1.Voice/EditVoice"
const OperationVoiceGetVoice = "/voice.v1.Voice/GetVoice"
const OperationVoiceVoices = "/voice.v1.Voice/Voices"

type VoiceHTTPServer interface {
	// AddVoice Add Voice
	AddVoice(context.Context, *AddVoiceRequest) (*Nil, error)
	// EditVoice Edit Voice
	EditVoice(context.Context, *EditVoiceRequest) (*Nil, error)
	// GetVoice Get Voice
	GetVoice(context.Context, *GetVoiceRequest) (*VoiceConfig, error)
	// Voices Get Voices
	Voices(context.Context, *VoicesRequest) (*VoicesReply, error)
}

func RegisterVoiceHTTPServer(s *http.Server, srv VoiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/voices", _Voice_Voices0_HTTP_Handler(srv))
	r.GET("/v1/voices/{voice_id}", _Voice_GetVoice0_HTTP_Handler(srv))
	r.POST("/v1/voices/{voice_id}/settings/edit", _Voice_EditVoice0_HTTP_Handler(srv))
	r.POST("/v1/voices/add", _Voice_AddVoice0_HTTP_Handler(srv))
}

func _Voice_Voices0_HTTP_Handler(srv VoiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VoicesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVoiceVoices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Voices(ctx, req.(*VoicesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VoicesReply)
		return ctx.Result(200, reply)
	}
}

func _Voice_GetVoice0_HTTP_Handler(srv VoiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVoiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVoiceGetVoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVoice(ctx, req.(*GetVoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VoiceConfig)
		return ctx.Result(200, reply)
	}
}

func _Voice_EditVoice0_HTTP_Handler(srv VoiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditVoiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVoiceEditVoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditVoice(ctx, req.(*EditVoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Nil)
		return ctx.Result(200, reply)
	}
}

func _Voice_AddVoice0_HTTP_Handler(srv VoiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddVoiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVoiceAddVoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddVoice(ctx, req.(*AddVoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Nil)
		return ctx.Result(200, reply)
	}
}

type VoiceHTTPClient interface {
	AddVoice(ctx context.Context, req *AddVoiceRequest, opts ...http.CallOption) (rsp *Nil, err error)
	EditVoice(ctx context.Context, req *EditVoiceRequest, opts ...http.CallOption) (rsp *Nil, err error)
	GetVoice(ctx context.Context, req *GetVoiceRequest, opts ...http.CallOption) (rsp *VoiceConfig, err error)
	Voices(ctx context.Context, req *VoicesRequest, opts ...http.CallOption) (rsp *VoicesReply, err error)
}

type VoiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVoiceHTTPClient(client *http.Client) VoiceHTTPClient {
	return &VoiceHTTPClientImpl{client}
}

func (c *VoiceHTTPClientImpl) AddVoice(ctx context.Context, in *AddVoiceRequest, opts ...http.CallOption) (*Nil, error) {
	var out Nil
	pattern := "/v1/voices/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVoiceAddVoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VoiceHTTPClientImpl) EditVoice(ctx context.Context, in *EditVoiceRequest, opts ...http.CallOption) (*Nil, error) {
	var out Nil
	pattern := "/v1/voices/{voice_id}/settings/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVoiceEditVoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VoiceHTTPClientImpl) GetVoice(ctx context.Context, in *GetVoiceRequest, opts ...http.CallOption) (*VoiceConfig, error) {
	var out VoiceConfig
	pattern := "/v1/voices/{voice_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVoiceGetVoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VoiceHTTPClientImpl) Voices(ctx context.Context, in *VoicesRequest, opts ...http.CallOption) (*VoicesReply, error) {
	var out VoicesReply
	pattern := "/v1/voices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVoiceVoices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
