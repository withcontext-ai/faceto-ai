// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: voice/v1/voice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Voice_Voices_FullMethodName    = "/voice.v1.Voice/Voices"
	Voice_GetVoice_FullMethodName  = "/voice.v1.Voice/GetVoice"
	Voice_EditVoice_FullMethodName = "/voice.v1.Voice/EditVoice"
	Voice_AddVoice_FullMethodName  = "/voice.v1.Voice/AddVoice"
)

// VoiceClient is the client API for Voice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceClient interface {
	// Get Voices
	Voices(ctx context.Context, in *VoicesRequest, opts ...grpc.CallOption) (*VoicesReply, error)
	// Get Voice
	GetVoice(ctx context.Context, in *GetVoiceRequest, opts ...grpc.CallOption) (*VoiceConfig, error)
	// Edit Voice
	EditVoice(ctx context.Context, in *EditVoiceRequest, opts ...grpc.CallOption) (*Nil, error)
	// Add Voice
	AddVoice(ctx context.Context, in *AddVoiceRequest, opts ...grpc.CallOption) (*Nil, error)
}

type voiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceClient(cc grpc.ClientConnInterface) VoiceClient {
	return &voiceClient{cc}
}

func (c *voiceClient) Voices(ctx context.Context, in *VoicesRequest, opts ...grpc.CallOption) (*VoicesReply, error) {
	out := new(VoicesReply)
	err := c.cc.Invoke(ctx, Voice_Voices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceClient) GetVoice(ctx context.Context, in *GetVoiceRequest, opts ...grpc.CallOption) (*VoiceConfig, error) {
	out := new(VoiceConfig)
	err := c.cc.Invoke(ctx, Voice_GetVoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceClient) EditVoice(ctx context.Context, in *EditVoiceRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, Voice_EditVoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceClient) AddVoice(ctx context.Context, in *AddVoiceRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, Voice_AddVoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceServer is the server API for Voice service.
// All implementations must embed UnimplementedVoiceServer
// for forward compatibility
type VoiceServer interface {
	// Get Voices
	Voices(context.Context, *VoicesRequest) (*VoicesReply, error)
	// Get Voice
	GetVoice(context.Context, *GetVoiceRequest) (*VoiceConfig, error)
	// Edit Voice
	EditVoice(context.Context, *EditVoiceRequest) (*Nil, error)
	// Add Voice
	AddVoice(context.Context, *AddVoiceRequest) (*Nil, error)
	mustEmbedUnimplementedVoiceServer()
}

// UnimplementedVoiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceServer struct {
}

func (UnimplementedVoiceServer) Voices(context.Context, *VoicesRequest) (*VoicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Voices not implemented")
}
func (UnimplementedVoiceServer) GetVoice(context.Context, *GetVoiceRequest) (*VoiceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoice not implemented")
}
func (UnimplementedVoiceServer) EditVoice(context.Context, *EditVoiceRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditVoice not implemented")
}
func (UnimplementedVoiceServer) AddVoice(context.Context, *AddVoiceRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoice not implemented")
}
func (UnimplementedVoiceServer) mustEmbedUnimplementedVoiceServer() {}

// UnsafeVoiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceServer will
// result in compilation errors.
type UnsafeVoiceServer interface {
	mustEmbedUnimplementedVoiceServer()
}

func RegisterVoiceServer(s grpc.ServiceRegistrar, srv VoiceServer) {
	s.RegisterService(&Voice_ServiceDesc, srv)
}

func _Voice_Voices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).Voices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voice_Voices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).Voices(ctx, req.(*VoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voice_GetVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).GetVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voice_GetVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).GetVoice(ctx, req.(*GetVoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voice_EditVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditVoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).EditVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voice_EditVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).EditVoice(ctx, req.(*EditVoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voice_AddVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).AddVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Voice_AddVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).AddVoice(ctx, req.(*AddVoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Voice_ServiceDesc is the grpc.ServiceDesc for Voice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.v1.Voice",
	HandlerType: (*VoiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Voices",
			Handler:    _Voice_Voices_Handler,
		},
		{
			MethodName: "GetVoice",
			Handler:    _Voice_GetVoice_Handler,
		},
		{
			MethodName: "EditVoice",
			Handler:    _Voice_EditVoice_Handler,
		},
		{
			MethodName: "AddVoice",
			Handler:    _Voice_AddVoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voice/v1/voice.proto",
}
