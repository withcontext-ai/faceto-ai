// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: voice/v1/voice.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Nil with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Nil) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Nil with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NilMultiError, or nil if none found.
func (m *Nil) ValidateAll() error {
	return m.validate(true)
}

func (m *Nil) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NilMultiError(errors)
	}

	return nil
}

// NilMultiError is an error wrapping multiple validation errors returned by
// Nil.ValidateAll() if the designated constraints aren't met.
type NilMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NilMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NilMultiError) AllErrors() []error { return m }

// NilValidationError is the validation error returned by Nil.Validate if the
// designated constraints aren't met.
type NilValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NilValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NilValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NilValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NilValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NilValidationError) ErrorName() string { return "NilValidationError" }

// Error satisfies the builtin error interface
func (e NilValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNil.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NilValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NilValidationError{}

// Validate checks the field values on VoicesRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoicesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoicesRequestMultiError, or
// nil if none found.
func (m *VoicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VoicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	if len(errors) > 0 {
		return VoicesRequestMultiError(errors)
	}

	return nil
}

// VoicesRequestMultiError is an error wrapping multiple validation errors
// returned by VoicesRequest.ValidateAll() if the designated constraints
// aren't met.
type VoicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoicesRequestMultiError) AllErrors() []error { return m }

// VoicesRequestValidationError is the validation error returned by
// VoicesRequest.Validate if the designated constraints aren't met.
type VoicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoicesRequestValidationError) ErrorName() string { return "VoicesRequestValidationError" }

// Error satisfies the builtin error interface
func (e VoicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoicesRequestValidationError{}

// Validate checks the field values on VoicesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoicesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoicesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoicesReplyMultiError, or
// nil if none found.
func (m *VoicesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VoicesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVoices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VoicesReplyValidationError{
						field:  fmt.Sprintf("Voices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VoicesReplyValidationError{
						field:  fmt.Sprintf("Voices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VoicesReplyValidationError{
					field:  fmt.Sprintf("Voices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VoicesReplyMultiError(errors)
	}

	return nil
}

// VoicesReplyMultiError is an error wrapping multiple validation errors
// returned by VoicesReply.ValidateAll() if the designated constraints aren't met.
type VoicesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoicesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoicesReplyMultiError) AllErrors() []error { return m }

// VoicesReplyValidationError is the validation error returned by
// VoicesReply.Validate if the designated constraints aren't met.
type VoicesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoicesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoicesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoicesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoicesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoicesReplyValidationError) ErrorName() string { return "VoicesReplyValidationError" }

// Error satisfies the builtin error interface
func (e VoicesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoicesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoicesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoicesReplyValidationError{}

// Validate checks the field values on VoiceConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoiceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoiceConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoiceConfigMultiError, or
// nil if none found.
func (m *VoiceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *VoiceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for VoiceId

	// no validation rules for PreviewUrl

	// no validation rules for Category

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoiceConfigValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoiceConfigValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoiceConfigValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLabels()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VoiceConfigValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VoiceConfigValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoiceConfigValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VoiceConfigMultiError(errors)
	}

	return nil
}

// VoiceConfigMultiError is an error wrapping multiple validation errors
// returned by VoiceConfig.ValidateAll() if the designated constraints aren't met.
type VoiceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoiceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoiceConfigMultiError) AllErrors() []error { return m }

// VoiceConfigValidationError is the validation error returned by
// VoiceConfig.Validate if the designated constraints aren't met.
type VoiceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceConfigValidationError) ErrorName() string { return "VoiceConfigValidationError" }

// Error satisfies the builtin error interface
func (e VoiceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceConfigValidationError{}

// Validate checks the field values on VoiceSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoiceSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoiceSetting with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoiceSettingMultiError, or
// nil if none found.
func (m *VoiceSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *VoiceSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SimilarityBoost

	// no validation rules for Stability

	if len(errors) > 0 {
		return VoiceSettingMultiError(errors)
	}

	return nil
}

// VoiceSettingMultiError is an error wrapping multiple validation errors
// returned by VoiceSetting.ValidateAll() if the designated constraints aren't met.
type VoiceSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoiceSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoiceSettingMultiError) AllErrors() []error { return m }

// VoiceSettingValidationError is the validation error returned by
// VoiceSetting.Validate if the designated constraints aren't met.
type VoiceSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceSettingValidationError) ErrorName() string { return "VoiceSettingValidationError" }

// Error satisfies the builtin error interface
func (e VoiceSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceSettingValidationError{}

// Validate checks the field values on VoiceLabel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VoiceLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VoiceLabel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VoiceLabelMultiError, or
// nil if none found.
func (m *VoiceLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *VoiceLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Accent

	// no validation rules for Age

	// no validation rules for Gender

	if len(errors) > 0 {
		return VoiceLabelMultiError(errors)
	}

	return nil
}

// VoiceLabelMultiError is an error wrapping multiple validation errors
// returned by VoiceLabel.ValidateAll() if the designated constraints aren't met.
type VoiceLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoiceLabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoiceLabelMultiError) AllErrors() []error { return m }

// VoiceLabelValidationError is the validation error returned by
// VoiceLabel.Validate if the designated constraints aren't met.
type VoiceLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoiceLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoiceLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoiceLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoiceLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoiceLabelValidationError) ErrorName() string { return "VoiceLabelValidationError" }

// Error satisfies the builtin error interface
func (e VoiceLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoiceLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoiceLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoiceLabelValidationError{}

// Validate checks the field values on GetVoiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVoiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVoiceRequestMultiError, or nil if none found.
func (m *GetVoiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVoiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoiceId

	// no validation rules for WithSettings

	if len(errors) > 0 {
		return GetVoiceRequestMultiError(errors)
	}

	return nil
}

// GetVoiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetVoiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVoiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVoiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVoiceRequestMultiError) AllErrors() []error { return m }

// GetVoiceRequestValidationError is the validation error returned by
// GetVoiceRequest.Validate if the designated constraints aren't met.
type GetVoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVoiceRequestValidationError) ErrorName() string { return "GetVoiceRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetVoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVoiceRequestValidationError{}

// Validate checks the field values on EditVoiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditVoiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditVoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditVoiceRequestMultiError, or nil if none found.
func (m *EditVoiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditVoiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoiceId

	// no validation rules for SimilarityBoost

	// no validation rules for Stability

	if len(errors) > 0 {
		return EditVoiceRequestMultiError(errors)
	}

	return nil
}

// EditVoiceRequestMultiError is an error wrapping multiple validation errors
// returned by EditVoiceRequest.ValidateAll() if the designated constraints
// aren't met.
type EditVoiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditVoiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditVoiceRequestMultiError) AllErrors() []error { return m }

// EditVoiceRequestValidationError is the validation error returned by
// EditVoiceRequest.Validate if the designated constraints aren't met.
type EditVoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditVoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditVoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditVoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditVoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditVoiceRequestValidationError) ErrorName() string { return "EditVoiceRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditVoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditVoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditVoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditVoiceRequestValidationError{}

// Validate checks the field values on AddVoiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddVoiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddVoiceRequestMultiError, or nil if none found.
func (m *AddVoiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVoiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for Description

	if len(errors) > 0 {
		return AddVoiceRequestMultiError(errors)
	}

	return nil
}

// AddVoiceRequestMultiError is an error wrapping multiple validation errors
// returned by AddVoiceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddVoiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVoiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVoiceRequestMultiError) AllErrors() []error { return m }

// AddVoiceRequestValidationError is the validation error returned by
// AddVoiceRequest.Validate if the designated constraints aren't met.
type AddVoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVoiceRequestValidationError) ErrorName() string { return "AddVoiceRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddVoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVoiceRequestValidationError{}

// Validate checks the field values on FileUploadReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileUploadReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileUploadReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileUploadReplyMultiError, or nil if none found.
func (m *FileUploadReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FileUploadReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return FileUploadReplyMultiError(errors)
	}

	return nil
}

// FileUploadReplyMultiError is an error wrapping multiple validation errors
// returned by FileUploadReply.ValidateAll() if the designated constraints
// aren't met.
type FileUploadReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileUploadReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileUploadReplyMultiError) AllErrors() []error { return m }

// FileUploadReplyValidationError is the validation error returned by
// FileUploadReply.Validate if the designated constraints aren't met.
type FileUploadReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileUploadReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileUploadReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileUploadReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileUploadReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileUploadReplyValidationError) ErrorName() string { return "FileUploadReplyValidationError" }

// Error satisfies the builtin error interface
func (e FileUploadReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileUploadReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileUploadReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileUploadReplyValidationError{}
