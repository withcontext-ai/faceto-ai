// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: faceto/v1/room.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Room_Token_FullMethodName        = "/faceto.v1.Room/Token"
	Room_Link_FullMethodName         = "/faceto.v1.Room/Link"
	Room_AuthCreate_FullMethodName   = "/faceto.v1.Room/AuthCreate"
	Room_Auth_FullMethodName         = "/faceto.v1.Room/Auth"
	Room_AuthExchange_FullMethodName = "/faceto.v1.Room/AuthExchange"
)

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomClient interface {
	// Token Create API Auth Token
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error)
	// Token Get Room Link
	Link(ctx context.Context, in *RoomLinkRequest, opts ...grpc.CallOption) (*RoomLinkReply, error)
	// OAuth Create API
	AuthCreate(ctx context.Context, in *AuthCreateRequest, opts ...grpc.CallOption) (*AuthCreateReply, error)
	// OAuth Token API
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error)
	// OAuth Token Exchange API
	AuthExchange(ctx context.Context, in *AuthExchangeRequest, opts ...grpc.CallOption) (*AuthReply, error)
}

type roomClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomClient(cc grpc.ClientConnInterface) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error) {
	out := new(TokenReply)
	err := c.cc.Invoke(ctx, Room_Token_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) Link(ctx context.Context, in *RoomLinkRequest, opts ...grpc.CallOption) (*RoomLinkReply, error) {
	out := new(RoomLinkReply)
	err := c.cc.Invoke(ctx, Room_Link_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) AuthCreate(ctx context.Context, in *AuthCreateRequest, opts ...grpc.CallOption) (*AuthCreateReply, error) {
	out := new(AuthCreateReply)
	err := c.cc.Invoke(ctx, Room_AuthCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, Room_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) AuthExchange(ctx context.Context, in *AuthExchangeRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, Room_AuthExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServer is the server API for Room service.
// All implementations must embed UnimplementedRoomServer
// for forward compatibility
type RoomServer interface {
	// Token Create API Auth Token
	Token(context.Context, *TokenRequest) (*TokenReply, error)
	// Token Get Room Link
	Link(context.Context, *RoomLinkRequest) (*RoomLinkReply, error)
	// OAuth Create API
	AuthCreate(context.Context, *AuthCreateRequest) (*AuthCreateReply, error)
	// OAuth Token API
	Auth(context.Context, *AuthRequest) (*AuthReply, error)
	// OAuth Token Exchange API
	AuthExchange(context.Context, *AuthExchangeRequest) (*AuthReply, error)
	mustEmbedUnimplementedRoomServer()
}

// UnimplementedRoomServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServer struct {
}

func (UnimplementedRoomServer) Token(context.Context, *TokenRequest) (*TokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedRoomServer) Link(context.Context, *RoomLinkRequest) (*RoomLinkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedRoomServer) AuthCreate(context.Context, *AuthCreateRequest) (*AuthCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCreate not implemented")
}
func (UnimplementedRoomServer) Auth(context.Context, *AuthRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedRoomServer) AuthExchange(context.Context, *AuthExchangeRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExchange not implemented")
}
func (UnimplementedRoomServer) mustEmbedUnimplementedRoomServer() {}

// UnsafeRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServer will
// result in compilation errors.
type UnsafeRoomServer interface {
	mustEmbedUnimplementedRoomServer()
}

func RegisterRoomServer(s grpc.ServiceRegistrar, srv RoomServer) {
	s.RegisterService(&Room_ServiceDesc, srv)
}

func _Room_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_Link_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).Link(ctx, req.(*RoomLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_AuthCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).AuthCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_AuthCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).AuthCreate(ctx, req.(*AuthCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_AuthExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).AuthExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_AuthExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).AuthExchange(ctx, req.(*AuthExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Room_ServiceDesc is the grpc.ServiceDesc for Room service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Room_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faceto.v1.Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _Room_Token_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _Room_Link_Handler,
		},
		{
			MethodName: "AuthCreate",
			Handler:    _Room_AuthCreate_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Room_Auth_Handler,
		},
		{
			MethodName: "AuthExchange",
			Handler:    _Room_AuthExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faceto/v1/room.proto",
}
