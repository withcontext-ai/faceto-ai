// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: faceto/v1/room.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NilReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NilReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NilReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NilReplyMultiError, or nil
// if none found.
func (m *NilReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NilReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NilReplyMultiError(errors)
	}

	return nil
}

// NilReplyMultiError is an error wrapping multiple validation errors returned
// by NilReply.ValidateAll() if the designated constraints aren't met.
type NilReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NilReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NilReplyMultiError) AllErrors() []error { return m }

// NilReplyValidationError is the validation error returned by
// NilReply.Validate if the designated constraints aren't met.
type NilReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NilReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NilReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NilReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NilReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NilReplyValidationError) ErrorName() string { return "NilReplyValidationError" }

// Error satisfies the builtin error interface
func (e NilReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNilReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NilReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NilReplyValidationError{}

// Validate checks the field values on TokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRequestMultiError, or
// nil if none found.
func (m *TokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for ExpireAt

	if len(errors) > 0 {
		return TokenRequestMultiError(errors)
	}

	return nil
}

// TokenRequestMultiError is an error wrapping multiple validation errors
// returned by TokenRequest.ValidateAll() if the designated constraints aren't met.
type TokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRequestMultiError) AllErrors() []error { return m }

// TokenRequestValidationError is the validation error returned by
// TokenRequest.Validate if the designated constraints aren't met.
type TokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRequestValidationError) ErrorName() string { return "TokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRequestValidationError{}

// Validate checks the field values on TokenReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenReplyMultiError, or
// nil if none found.
func (m *TokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpireAt

	if len(errors) > 0 {
		return TokenReplyMultiError(errors)
	}

	return nil
}

// TokenReplyMultiError is an error wrapping multiple validation errors
// returned by TokenReply.ValidateAll() if the designated constraints aren't met.
type TokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenReplyMultiError) AllErrors() []error { return m }

// TokenReplyValidationError is the validation error returned by
// TokenReply.Validate if the designated constraints aren't met.
type TokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenReplyValidationError) ErrorName() string { return "TokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e TokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenReplyValidationError{}

// Validate checks the field values on RoomLinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomLinkRequestMultiError, or nil if none found.
func (m *RoomLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChatapi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Chatapi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Chatapi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatapi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomLinkRequestValidationError{
				field:  "Chatapi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomLinkRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebhook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomLinkRequestValidationError{
				field:  "Webhook",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrompt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Prompt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomLinkRequestValidationError{
					field:  "Prompt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrompt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomLinkRequestValidationError{
				field:  "Prompt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomLinkRequestMultiError(errors)
	}

	return nil
}

// RoomLinkRequestMultiError is an error wrapping multiple validation errors
// returned by RoomLinkRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomLinkRequestMultiError) AllErrors() []error { return m }

// RoomLinkRequestValidationError is the validation error returned by
// RoomLinkRequest.Validate if the designated constraints aren't met.
type RoomLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomLinkRequestValidationError) ErrorName() string { return "RoomLinkRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoomLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomLinkRequestValidationError{}

// Validate checks the field values on RoomLinkReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomLinkReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomLinkReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomLinkReplyMultiError, or
// nil if none found.
func (m *RoomLinkReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomLinkReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Name

	// no validation rules for Link

	if len(errors) > 0 {
		return RoomLinkReplyMultiError(errors)
	}

	return nil
}

// RoomLinkReplyMultiError is an error wrapping multiple validation errors
// returned by RoomLinkReply.ValidateAll() if the designated constraints
// aren't met.
type RoomLinkReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomLinkReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomLinkReplyMultiError) AllErrors() []error { return m }

// RoomLinkReplyValidationError is the validation error returned by
// RoomLinkReply.Validate if the designated constraints aren't met.
type RoomLinkReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomLinkReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomLinkReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomLinkReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomLinkReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomLinkReplyValidationError) ErrorName() string { return "RoomLinkReplyValidationError" }

// Error satisfies the builtin error interface
func (e RoomLinkReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomLinkReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomLinkReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomLinkReplyValidationError{}

// Validate checks the field values on AuthRedirectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRedirectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRedirectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRedirectRequestMultiError, or nil if none found.
func (m *AuthRedirectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRedirectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResponseType

	// no validation rules for ClientId

	// no validation rules for Scope

	// no validation rules for RedirectUri

	// no validation rules for State

	if len(errors) > 0 {
		return AuthRedirectRequestMultiError(errors)
	}

	return nil
}

// AuthRedirectRequestMultiError is an error wrapping multiple validation
// errors returned by AuthRedirectRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthRedirectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRedirectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRedirectRequestMultiError) AllErrors() []error { return m }

// AuthRedirectRequestValidationError is the validation error returned by
// AuthRedirectRequest.Validate if the designated constraints aren't met.
type AuthRedirectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRedirectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRedirectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRedirectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRedirectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRedirectRequestValidationError) ErrorName() string {
	return "AuthRedirectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRedirectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRedirectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRedirectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRedirectRequestValidationError{}

// Validate checks the field values on AuthCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCreateRequestMultiError, or nil if none found.
func (m *AuthCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for GrantScope

	if len(errors) > 0 {
		return AuthCreateRequestMultiError(errors)
	}

	return nil
}

// AuthCreateRequestMultiError is an error wrapping multiple validation errors
// returned by AuthCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCreateRequestMultiError) AllErrors() []error { return m }

// AuthCreateRequestValidationError is the validation error returned by
// AuthCreateRequest.Validate if the designated constraints aren't met.
type AuthCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCreateRequestValidationError) ErrorName() string {
	return "AuthCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCreateRequestValidationError{}

// Validate checks the field values on AuthCreateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthCreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthCreateReplyMultiError, or nil if none found.
func (m *AuthCreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthCreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return AuthCreateReplyMultiError(errors)
	}

	return nil
}

// AuthCreateReplyMultiError is an error wrapping multiple validation errors
// returned by AuthCreateReply.ValidateAll() if the designated constraints
// aren't met.
type AuthCreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthCreateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthCreateReplyMultiError) AllErrors() []error { return m }

// AuthCreateReplyValidationError is the validation error returned by
// AuthCreateReply.Validate if the designated constraints aren't met.
type AuthCreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthCreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthCreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthCreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthCreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthCreateReplyValidationError) ErrorName() string { return "AuthCreateReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthCreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthCreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthCreateReplyValidationError{}

// Validate checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthRequestMultiError, or
// nil if none found.
func (m *AuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantType

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for Code

	// no validation rules for RedirectUri

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AuthRequestMultiError(errors)
	}

	return nil
}

// AuthRequestMultiError is an error wrapping multiple validation errors
// returned by AuthRequest.ValidateAll() if the designated constraints aren't met.
type AuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRequestMultiError) AllErrors() []error { return m }

// AuthRequestValidationError is the validation error returned by
// AuthRequest.Validate if the designated constraints aren't met.
type AuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRequestValidationError) ErrorName() string { return "AuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRequestValidationError{}

// Validate checks the field values on AuthReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthReplyMultiError, or nil
// if none found.
func (m *AuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for TokenType

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return AuthReplyMultiError(errors)
	}

	return nil
}

// AuthReplyMultiError is an error wrapping multiple validation errors returned
// by AuthReply.ValidateAll() if the designated constraints aren't met.
type AuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthReplyMultiError) AllErrors() []error { return m }

// AuthReplyValidationError is the validation error returned by
// AuthReply.Validate if the designated constraints aren't met.
type AuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReplyValidationError) ErrorName() string { return "AuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReplyValidationError{}

// Validate checks the field values on AuthExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthExchangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthExchangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthExchangeRequestMultiError, or nil if none found.
func (m *AuthExchangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthExchangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AuthExchangeRequestMultiError(errors)
	}

	return nil
}

// AuthExchangeRequestMultiError is an error wrapping multiple validation
// errors returned by AuthExchangeRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthExchangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthExchangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthExchangeRequestMultiError) AllErrors() []error { return m }

// AuthExchangeRequestValidationError is the validation error returned by
// AuthExchangeRequest.Validate if the designated constraints aren't met.
type AuthExchangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthExchangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthExchangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthExchangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthExchangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthExchangeRequestValidationError) ErrorName() string {
	return "AuthExchangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthExchangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthExchangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthExchangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthExchangeRequestValidationError{}

// Validate checks the field values on RoomLinkRequest_ChatAPI with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomLinkRequest_ChatAPI) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomLinkRequest_ChatAPI with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomLinkRequest_ChatAPIMultiError, or nil if none found.
func (m *RoomLinkRequest_ChatAPI) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomLinkRequest_ChatAPI) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Api

	// no validation rules for Key

	if len(errors) > 0 {
		return RoomLinkRequest_ChatAPIMultiError(errors)
	}

	return nil
}

// RoomLinkRequest_ChatAPIMultiError is an error wrapping multiple validation
// errors returned by RoomLinkRequest_ChatAPI.ValidateAll() if the designated
// constraints aren't met.
type RoomLinkRequest_ChatAPIMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomLinkRequest_ChatAPIMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomLinkRequest_ChatAPIMultiError) AllErrors() []error { return m }

// RoomLinkRequest_ChatAPIValidationError is the validation error returned by
// RoomLinkRequest_ChatAPI.Validate if the designated constraints aren't met.
type RoomLinkRequest_ChatAPIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomLinkRequest_ChatAPIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomLinkRequest_ChatAPIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomLinkRequest_ChatAPIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomLinkRequest_ChatAPIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomLinkRequest_ChatAPIValidationError) ErrorName() string {
	return "RoomLinkRequest_ChatAPIValidationError"
}

// Error satisfies the builtin error interface
func (e RoomLinkRequest_ChatAPIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomLinkRequest_ChatAPI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomLinkRequest_ChatAPIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomLinkRequest_ChatAPIValidationError{}

// Validate checks the field values on RoomLinkRequest_Config with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomLinkRequest_Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomLinkRequest_Config with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomLinkRequest_ConfigMultiError, or nil if none found.
func (m *RoomLinkRequest_Config) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomLinkRequest_Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Duration

	// no validation rules for Greeting

	// no validation rules for VoiceId

	// no validation rules for Username

	// no validation rules for Botname

	if len(errors) > 0 {
		return RoomLinkRequest_ConfigMultiError(errors)
	}

	return nil
}

// RoomLinkRequest_ConfigMultiError is an error wrapping multiple validation
// errors returned by RoomLinkRequest_Config.ValidateAll() if the designated
// constraints aren't met.
type RoomLinkRequest_ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomLinkRequest_ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomLinkRequest_ConfigMultiError) AllErrors() []error { return m }

// RoomLinkRequest_ConfigValidationError is the validation error returned by
// RoomLinkRequest_Config.Validate if the designated constraints aren't met.
type RoomLinkRequest_ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomLinkRequest_ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomLinkRequest_ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomLinkRequest_ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomLinkRequest_ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomLinkRequest_ConfigValidationError) ErrorName() string {
	return "RoomLinkRequest_ConfigValidationError"
}

// Error satisfies the builtin error interface
func (e RoomLinkRequest_ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomLinkRequest_Config.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomLinkRequest_ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomLinkRequest_ConfigValidationError{}

// Validate checks the field values on RoomLinkRequest_Webhook with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomLinkRequest_Webhook) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomLinkRequest_Webhook with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomLinkRequest_WebhookMultiError, or nil if none found.
func (m *RoomLinkRequest_Webhook) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomLinkRequest_Webhook) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Api

	// no validation rules for Key

	if len(errors) > 0 {
		return RoomLinkRequest_WebhookMultiError(errors)
	}

	return nil
}

// RoomLinkRequest_WebhookMultiError is an error wrapping multiple validation
// errors returned by RoomLinkRequest_Webhook.ValidateAll() if the designated
// constraints aren't met.
type RoomLinkRequest_WebhookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomLinkRequest_WebhookMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomLinkRequest_WebhookMultiError) AllErrors() []error { return m }

// RoomLinkRequest_WebhookValidationError is the validation error returned by
// RoomLinkRequest_Webhook.Validate if the designated constraints aren't met.
type RoomLinkRequest_WebhookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomLinkRequest_WebhookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomLinkRequest_WebhookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomLinkRequest_WebhookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomLinkRequest_WebhookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomLinkRequest_WebhookValidationError) ErrorName() string {
	return "RoomLinkRequest_WebhookValidationError"
}

// Error satisfies the builtin error interface
func (e RoomLinkRequest_WebhookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomLinkRequest_Webhook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomLinkRequest_WebhookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomLinkRequest_WebhookValidationError{}

// Validate checks the field values on RoomLinkRequest_Prompt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomLinkRequest_Prompt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomLinkRequest_Prompt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomLinkRequest_PromptMultiError, or nil if none found.
func (m *RoomLinkRequest_Prompt) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomLinkRequest_Prompt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	if len(errors) > 0 {
		return RoomLinkRequest_PromptMultiError(errors)
	}

	return nil
}

// RoomLinkRequest_PromptMultiError is an error wrapping multiple validation
// errors returned by RoomLinkRequest_Prompt.ValidateAll() if the designated
// constraints aren't met.
type RoomLinkRequest_PromptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomLinkRequest_PromptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomLinkRequest_PromptMultiError) AllErrors() []error { return m }

// RoomLinkRequest_PromptValidationError is the validation error returned by
// RoomLinkRequest_Prompt.Validate if the designated constraints aren't met.
type RoomLinkRequest_PromptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomLinkRequest_PromptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomLinkRequest_PromptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomLinkRequest_PromptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomLinkRequest_PromptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomLinkRequest_PromptValidationError) ErrorName() string {
	return "RoomLinkRequest_PromptValidationError"
}

// Error satisfies the builtin error interface
func (e RoomLinkRequest_PromptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomLinkRequest_Prompt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomLinkRequest_PromptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomLinkRequest_PromptValidationError{}
