// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: room/v1/room.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HelloReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReplyMultiError, or
// nil if none found.
func (m *HelloReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloReplyMultiError(errors)
	}

	return nil
}

// HelloReplyMultiError is an error wrapping multiple validation errors
// returned by HelloReply.ValidateAll() if the designated constraints aren't met.
type HelloReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReplyMultiError) AllErrors() []error { return m }

// HelloReplyValidationError is the validation error returned by
// HelloReply.Validate if the designated constraints aren't met.
type HelloReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReplyValidationError) ErrorName() string { return "HelloReplyValidationError" }

// Error satisfies the builtin error interface
func (e HelloReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReplyValidationError{}

// Validate checks the field values on NilReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NilReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NilReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NilReplyMultiError, or nil
// if none found.
func (m *NilReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NilReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NilReplyMultiError(errors)
	}

	return nil
}

// NilReplyMultiError is an error wrapping multiple validation errors returned
// by NilReply.ValidateAll() if the designated constraints aren't met.
type NilReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NilReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NilReplyMultiError) AllErrors() []error { return m }

// NilReplyValidationError is the validation error returned by
// NilReply.Validate if the designated constraints aren't met.
type NilReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NilReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NilReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NilReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NilReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NilReplyValidationError) ErrorName() string { return "NilReplyValidationError" }

// Error satisfies the builtin error interface
func (e NilReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNilReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NilReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NilReplyValidationError{}

// Validate checks the field values on HealthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthRequestMultiError, or
// nil if none found.
func (m *HealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthRequestMultiError(errors)
	}

	return nil
}

// HealthRequestMultiError is an error wrapping multiple validation errors
// returned by HealthRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthRequestMultiError) AllErrors() []error { return m }

// HealthRequestValidationError is the validation error returned by
// HealthRequest.Validate if the designated constraints aren't met.
type HealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthRequestValidationError) ErrorName() string { return "HealthRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthRequestValidationError{}

// Validate checks the field values on JoinRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinRoomRequestMultiError, or nil if none found.
func (m *JoinRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return JoinRoomRequestMultiError(errors)
	}

	return nil
}

// JoinRoomRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRoomRequestMultiError) AllErrors() []error { return m }

// JoinRoomRequestValidationError is the validation error returned by
// JoinRoomRequest.Validate if the designated constraints aren't met.
type JoinRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRoomRequestValidationError) ErrorName() string { return "JoinRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRoomRequestValidationError{}

// Validate checks the field values on JoinRoomReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinRoomReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRoomReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinRoomReplyMultiError, or
// nil if none found.
func (m *JoinRoomReply) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRoomReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sid

	if len(errors) > 0 {
		return JoinRoomReplyMultiError(errors)
	}

	return nil
}

// JoinRoomReplyMultiError is an error wrapping multiple validation errors
// returned by JoinRoomReply.ValidateAll() if the designated constraints
// aren't met.
type JoinRoomReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRoomReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRoomReplyMultiError) AllErrors() []error { return m }

// JoinRoomReplyValidationError is the validation error returned by
// JoinRoomReply.Validate if the designated constraints aren't met.
type JoinRoomReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRoomReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRoomReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRoomReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRoomReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRoomReplyValidationError) ErrorName() string { return "JoinRoomReplyValidationError" }

// Error satisfies the builtin error interface
func (e JoinRoomReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRoomReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRoomReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRoomReplyValidationError{}

// Validate checks the field values on WebhookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebhookRequestMultiError,
// or nil if none found.
func (m *WebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WebhookRequestMultiError(errors)
	}

	return nil
}

// WebhookRequestMultiError is an error wrapping multiple validation errors
// returned by WebhookRequest.ValidateAll() if the designated constraints
// aren't met.
type WebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookRequestMultiError) AllErrors() []error { return m }

// WebhookRequestValidationError is the validation error returned by
// WebhookRequest.Validate if the designated constraints aren't met.
type WebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookRequestValidationError) ErrorName() string { return "WebhookRequestValidationError" }

// Error satisfies the builtin error interface
func (e WebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookRequestValidationError{}

// Validate checks the field values on CheckRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckRoomRequestMultiError, or nil if none found.
func (m *CheckRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for C

	if len(errors) > 0 {
		return CheckRoomRequestMultiError(errors)
	}

	return nil
}

// CheckRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CheckRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRoomRequestMultiError) AllErrors() []error { return m }

// CheckRoomRequestValidationError is the validation error returned by
// CheckRoomRequest.Validate if the designated constraints aren't met.
type CheckRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRoomRequestValidationError) ErrorName() string { return "CheckRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRoomRequestValidationError{}

// Validate checks the field values on CheckRoomReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckRoomReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRoomReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckRoomReplyMultiError,
// or nil if none found.
func (m *CheckRoomReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRoomReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return CheckRoomReplyMultiError(errors)
	}

	return nil
}

// CheckRoomReplyMultiError is an error wrapping multiple validation errors
// returned by CheckRoomReply.ValidateAll() if the designated constraints
// aren't met.
type CheckRoomReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRoomReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRoomReplyMultiError) AllErrors() []error { return m }

// CheckRoomReplyValidationError is the validation error returned by
// CheckRoomReply.Validate if the designated constraints aren't met.
type CheckRoomReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRoomReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRoomReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRoomReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRoomReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRoomReplyValidationError) ErrorName() string { return "CheckRoomReplyValidationError" }

// Error satisfies the builtin error interface
func (e CheckRoomReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRoomReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRoomReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRoomReplyValidationError{}

// Validate checks the field values on RoomTranscriptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomTranscriptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomTranscriptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomTranscriptRequestMultiError, or nil if none found.
func (m *RoomTranscriptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomTranscriptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Page

	if len(errors) > 0 {
		return RoomTranscriptRequestMultiError(errors)
	}

	return nil
}

// RoomTranscriptRequestMultiError is an error wrapping multiple validation
// errors returned by RoomTranscriptRequest.ValidateAll() if the designated
// constraints aren't met.
type RoomTranscriptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomTranscriptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomTranscriptRequestMultiError) AllErrors() []error { return m }

// RoomTranscriptRequestValidationError is the validation error returned by
// RoomTranscriptRequest.Validate if the designated constraints aren't met.
type RoomTranscriptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomTranscriptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomTranscriptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomTranscriptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomTranscriptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomTranscriptRequestValidationError) ErrorName() string {
	return "RoomTranscriptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoomTranscriptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomTranscriptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomTranscriptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomTranscriptRequestValidationError{}

// Validate checks the field values on RoomTranscriptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomTranscriptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomTranscriptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomTranscriptReplyMultiError, or nil if none found.
func (m *RoomTranscriptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomTranscriptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomTranscriptReplyValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomTranscriptReplyValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomTranscriptReplyValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTranscript()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomTranscriptReplyValidationError{
					field:  "Transcript",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomTranscriptReplyValidationError{
					field:  "Transcript",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranscript()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomTranscriptReplyValidationError{
				field:  "Transcript",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomTranscriptReplyValidationError{
					field:  "Vod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomTranscriptReplyValidationError{
					field:  "Vod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomTranscriptReplyValidationError{
				field:  "Vod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomTranscriptReplyMultiError(errors)
	}

	return nil
}

// RoomTranscriptReplyMultiError is an error wrapping multiple validation
// errors returned by RoomTranscriptReply.ValidateAll() if the designated
// constraints aren't met.
type RoomTranscriptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomTranscriptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomTranscriptReplyMultiError) AllErrors() []error { return m }

// RoomTranscriptReplyValidationError is the validation error returned by
// RoomTranscriptReply.Validate if the designated constraints aren't met.
type RoomTranscriptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomTranscriptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomTranscriptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomTranscriptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomTranscriptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomTranscriptReplyValidationError) ErrorName() string {
	return "RoomTranscriptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RoomTranscriptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomTranscriptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomTranscriptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomTranscriptReplyValidationError{}

// Validate checks the field values on SetRoomVoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetRoomVoiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRoomVoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRoomVoiceRequestMultiError, or nil if none found.
func (m *SetRoomVoiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRoomVoiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomName

	// no validation rules for VoiceId

	if len(errors) > 0 {
		return SetRoomVoiceRequestMultiError(errors)
	}

	return nil
}

// SetRoomVoiceRequestMultiError is an error wrapping multiple validation
// errors returned by SetRoomVoiceRequest.ValidateAll() if the designated
// constraints aren't met.
type SetRoomVoiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRoomVoiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRoomVoiceRequestMultiError) AllErrors() []error { return m }

// SetRoomVoiceRequestValidationError is the validation error returned by
// SetRoomVoiceRequest.Validate if the designated constraints aren't met.
type SetRoomVoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRoomVoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRoomVoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRoomVoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRoomVoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRoomVoiceRequestValidationError) ErrorName() string {
	return "SetRoomVoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetRoomVoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRoomVoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRoomVoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRoomVoiceRequestValidationError{}

// Validate checks the field values on RoomEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomEventRequestMultiError, or nil if none found.
func (m *RoomEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomEventRequestMultiError(errors)
	}

	return nil
}

// RoomEventRequestMultiError is an error wrapping multiple validation errors
// returned by RoomEventRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomEventRequestMultiError) AllErrors() []error { return m }

// RoomEventRequestValidationError is the validation error returned by
// RoomEventRequest.Validate if the designated constraints aren't met.
type RoomEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomEventRequestValidationError) ErrorName() string { return "RoomEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoomEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomEventRequestValidationError{}

// Validate checks the field values on RoomTranscriptReply_Transcript with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomTranscriptReply_Transcript) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomTranscriptReply_Transcript with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RoomTranscriptReply_TranscriptMultiError, or nil if none found.
func (m *RoomTranscriptReply_Transcript) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomTranscriptReply_Transcript) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomTranscriptReply_TranscriptValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomTranscriptReply_TranscriptValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomTranscriptReply_TranscriptValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoomTranscriptReply_TranscriptMultiError(errors)
	}

	return nil
}

// RoomTranscriptReply_TranscriptMultiError is an error wrapping multiple
// validation errors returned by RoomTranscriptReply_Transcript.ValidateAll()
// if the designated constraints aren't met.
type RoomTranscriptReply_TranscriptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomTranscriptReply_TranscriptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomTranscriptReply_TranscriptMultiError) AllErrors() []error { return m }

// RoomTranscriptReply_TranscriptValidationError is the validation error
// returned by RoomTranscriptReply_Transcript.Validate if the designated
// constraints aren't met.
type RoomTranscriptReply_TranscriptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomTranscriptReply_TranscriptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomTranscriptReply_TranscriptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomTranscriptReply_TranscriptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomTranscriptReply_TranscriptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomTranscriptReply_TranscriptValidationError) ErrorName() string {
	return "RoomTranscriptReply_TranscriptValidationError"
}

// Error satisfies the builtin error interface
func (e RoomTranscriptReply_TranscriptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomTranscriptReply_Transcript.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomTranscriptReply_TranscriptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomTranscriptReply_TranscriptValidationError{}

// Validate checks the field values on RoomTranscriptReply_Room with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomTranscriptReply_Room) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomTranscriptReply_Room with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomTranscriptReply_RoomMultiError, or nil if none found.
func (m *RoomTranscriptReply_Room) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomTranscriptReply_Room) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sid

	if len(errors) > 0 {
		return RoomTranscriptReply_RoomMultiError(errors)
	}

	return nil
}

// RoomTranscriptReply_RoomMultiError is an error wrapping multiple validation
// errors returned by RoomTranscriptReply_Room.ValidateAll() if the designated
// constraints aren't met.
type RoomTranscriptReply_RoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomTranscriptReply_RoomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomTranscriptReply_RoomMultiError) AllErrors() []error { return m }

// RoomTranscriptReply_RoomValidationError is the validation error returned by
// RoomTranscriptReply_Room.Validate if the designated constraints aren't met.
type RoomTranscriptReply_RoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomTranscriptReply_RoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomTranscriptReply_RoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomTranscriptReply_RoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomTranscriptReply_RoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomTranscriptReply_RoomValidationError) ErrorName() string {
	return "RoomTranscriptReply_RoomValidationError"
}

// Error satisfies the builtin error interface
func (e RoomTranscriptReply_RoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomTranscriptReply_Room.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomTranscriptReply_RoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomTranscriptReply_RoomValidationError{}

// Validate checks the field values on RoomTranscriptReply_Vod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomTranscriptReply_Vod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomTranscriptReply_Vod with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomTranscriptReply_VodMultiError, or nil if none found.
func (m *RoomTranscriptReply_Vod) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomTranscriptReply_Vod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EgressId

	// no validation rules for Url

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for CompleteTime

	// no validation rules for Duration

	if len(errors) > 0 {
		return RoomTranscriptReply_VodMultiError(errors)
	}

	return nil
}

// RoomTranscriptReply_VodMultiError is an error wrapping multiple validation
// errors returned by RoomTranscriptReply_Vod.ValidateAll() if the designated
// constraints aren't met.
type RoomTranscriptReply_VodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomTranscriptReply_VodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomTranscriptReply_VodMultiError) AllErrors() []error { return m }

// RoomTranscriptReply_VodValidationError is the validation error returned by
// RoomTranscriptReply_Vod.Validate if the designated constraints aren't met.
type RoomTranscriptReply_VodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomTranscriptReply_VodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomTranscriptReply_VodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomTranscriptReply_VodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomTranscriptReply_VodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomTranscriptReply_VodValidationError) ErrorName() string {
	return "RoomTranscriptReply_VodValidationError"
}

// Error satisfies the builtin error interface
func (e RoomTranscriptReply_VodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomTranscriptReply_Vod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomTranscriptReply_VodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomTranscriptReply_VodValidationError{}

// Validate checks the field values on RoomTranscriptReply_Transcript_List with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RoomTranscriptReply_Transcript_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomTranscriptReply_Transcript_List
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RoomTranscriptReply_Transcript_ListMultiError, or nil if none found.
func (m *RoomTranscriptReply_Transcript_List) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomTranscriptReply_Transcript_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsBot

	// no validation rules for Name

	// no validation rules for Text

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return RoomTranscriptReply_Transcript_ListMultiError(errors)
	}

	return nil
}

// RoomTranscriptReply_Transcript_ListMultiError is an error wrapping multiple
// validation errors returned by
// RoomTranscriptReply_Transcript_List.ValidateAll() if the designated
// constraints aren't met.
type RoomTranscriptReply_Transcript_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomTranscriptReply_Transcript_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomTranscriptReply_Transcript_ListMultiError) AllErrors() []error { return m }

// RoomTranscriptReply_Transcript_ListValidationError is the validation error
// returned by RoomTranscriptReply_Transcript_List.Validate if the designated
// constraints aren't met.
type RoomTranscriptReply_Transcript_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomTranscriptReply_Transcript_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomTranscriptReply_Transcript_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomTranscriptReply_Transcript_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomTranscriptReply_Transcript_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomTranscriptReply_Transcript_ListValidationError) ErrorName() string {
	return "RoomTranscriptReply_Transcript_ListValidationError"
}

// Error satisfies the builtin error interface
func (e RoomTranscriptReply_Transcript_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomTranscriptReply_Transcript_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomTranscriptReply_Transcript_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomTranscriptReply_Transcript_ListValidationError{}

// Validate checks the field values on RoomEventRequest_Event with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomEventRequest_Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomEventRequest_Event with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomEventRequest_EventMultiError, or nil if none found.
func (m *RoomEventRequest_Event) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomEventRequest_Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Status

	if len(errors) > 0 {
		return RoomEventRequest_EventMultiError(errors)
	}

	return nil
}

// RoomEventRequest_EventMultiError is an error wrapping multiple validation
// errors returned by RoomEventRequest_Event.ValidateAll() if the designated
// constraints aren't met.
type RoomEventRequest_EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomEventRequest_EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomEventRequest_EventMultiError) AllErrors() []error { return m }

// RoomEventRequest_EventValidationError is the validation error returned by
// RoomEventRequest_Event.Validate if the designated constraints aren't met.
type RoomEventRequest_EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomEventRequest_EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomEventRequest_EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomEventRequest_EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomEventRequest_EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomEventRequest_EventValidationError) ErrorName() string {
	return "RoomEventRequest_EventValidationError"
}

// Error satisfies the builtin error interface
func (e RoomEventRequest_EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomEventRequest_Event.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomEventRequest_EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomEventRequest_EventValidationError{}
