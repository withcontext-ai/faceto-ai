// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.3
// source: room/v1/room.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoomCheckRoom = "/interview.v1.Room/CheckRoom"
const OperationRoomHealth = "/interview.v1.Room/Health"
const OperationRoomJoinRoom = "/interview.v1.Room/JoinRoom"
const OperationRoomRoomEvent = "/interview.v1.Room/RoomEvent"
const OperationRoomRoomTranscript = "/interview.v1.Room/RoomTranscript"
const OperationRoomRoomTranscriptOnline = "/interview.v1.Room/RoomTranscriptOnline"
const OperationRoomSetRoomVoice = "/interview.v1.Room/SetRoomVoice"

type RoomHTTPServer interface {
	// CheckRoom CheckRoom check room valid
	CheckRoom(context.Context, *CheckRoomRequest) (*CheckRoomReply, error)
	// Health Health check
	Health(context.Context, *HealthRequest) (*HelloReply, error)
	// JoinRoom JoinRoom local join room
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomReply, error)
	// RoomEvent Accept room event
	RoomEvent(context.Context, *RoomEventRequest) (*NilReply, error)
	// RoomTranscript RoomTranscript. Get room transcript in real time or cache, compatible with above interface
	RoomTranscript(context.Context, *RoomTranscriptRequest) (*RoomTranscriptReply, error)
	// RoomTranscriptOnline RoomTranscript. Get conversation transcripts in real time
	RoomTranscriptOnline(context.Context, *RoomTranscriptRequest) (*RoomTranscriptReply, error)
	// SetRoomVoice Set Room Voice
	SetRoomVoice(context.Context, *SetRoomVoiceRequest) (*NilReply, error)
}

func RegisterRoomHTTPServer(s *http.Server, srv RoomHTTPServer) {
	r := s.Route("/")
	r.GET("/", _Room_Health0_HTTP_Handler(srv))
	r.POST("/check/{name}", _Room_CheckRoom0_HTTP_Handler(srv))
	r.POST("/join/{name}", _Room_JoinRoom0_HTTP_Handler(srv))
	r.POST("/{name}/transcript", _Room_RoomTranscriptOnline0_HTTP_Handler(srv))
	r.POST("/v1/room/transcript", _Room_RoomTranscript0_HTTP_Handler(srv))
	r.POST("/v1/room/set_voice", _Room_SetRoomVoice0_HTTP_Handler(srv))
	r.POST("/v1/room/{name}/event", _Room_RoomEvent0_HTTP_Handler(srv))
}

func _Room_Health0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Health(ctx, req.(*HealthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Room_CheckRoom0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomCheckRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckRoom(ctx, req.(*CheckRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Room_JoinRoom0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JoinRoomRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomJoinRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JoinRoom(ctx, req.(*JoinRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JoinRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Room_RoomTranscriptOnline0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoomTranscriptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomRoomTranscriptOnline)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoomTranscriptOnline(ctx, req.(*RoomTranscriptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoomTranscriptReply)
		return ctx.Result(200, reply)
	}
}

func _Room_RoomTranscript0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoomTranscriptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomRoomTranscript)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoomTranscript(ctx, req.(*RoomTranscriptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoomTranscriptReply)
		return ctx.Result(200, reply)
	}
}

func _Room_SetRoomVoice0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRoomVoiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomSetRoomVoice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRoomVoice(ctx, req.(*SetRoomVoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NilReply)
		return ctx.Result(200, reply)
	}
}

func _Room_RoomEvent0_HTTP_Handler(srv RoomHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoomEventRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoomRoomEvent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoomEvent(ctx, req.(*RoomEventRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NilReply)
		return ctx.Result(200, reply)
	}
}

type RoomHTTPClient interface {
	CheckRoom(ctx context.Context, req *CheckRoomRequest, opts ...http.CallOption) (rsp *CheckRoomReply, err error)
	Health(ctx context.Context, req *HealthRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
	JoinRoom(ctx context.Context, req *JoinRoomRequest, opts ...http.CallOption) (rsp *JoinRoomReply, err error)
	RoomEvent(ctx context.Context, req *RoomEventRequest, opts ...http.CallOption) (rsp *NilReply, err error)
	RoomTranscript(ctx context.Context, req *RoomTranscriptRequest, opts ...http.CallOption) (rsp *RoomTranscriptReply, err error)
	RoomTranscriptOnline(ctx context.Context, req *RoomTranscriptRequest, opts ...http.CallOption) (rsp *RoomTranscriptReply, err error)
	SetRoomVoice(ctx context.Context, req *SetRoomVoiceRequest, opts ...http.CallOption) (rsp *NilReply, err error)
}

type RoomHTTPClientImpl struct {
	cc *http.Client
}

func NewRoomHTTPClient(client *http.Client) RoomHTTPClient {
	return &RoomHTTPClientImpl{client}
}

func (c *RoomHTTPClientImpl) CheckRoom(ctx context.Context, in *CheckRoomRequest, opts ...http.CallOption) (*CheckRoomReply, error) {
	var out CheckRoomReply
	pattern := "/check/{name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomCheckRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoomHTTPClientImpl) Health(ctx context.Context, in *HealthRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoomHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoomHTTPClientImpl) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...http.CallOption) (*JoinRoomReply, error) {
	var out JoinRoomReply
	pattern := "/join/{name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomJoinRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoomHTTPClientImpl) RoomEvent(ctx context.Context, in *RoomEventRequest, opts ...http.CallOption) (*NilReply, error) {
	var out NilReply
	pattern := "/v1/room/{name}/event"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomRoomEvent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoomHTTPClientImpl) RoomTranscript(ctx context.Context, in *RoomTranscriptRequest, opts ...http.CallOption) (*RoomTranscriptReply, error) {
	var out RoomTranscriptReply
	pattern := "/v1/room/transcript"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomRoomTranscript))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoomHTTPClientImpl) RoomTranscriptOnline(ctx context.Context, in *RoomTranscriptRequest, opts ...http.CallOption) (*RoomTranscriptReply, error) {
	var out RoomTranscriptReply
	pattern := "/{name}/transcript"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomRoomTranscriptOnline))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoomHTTPClientImpl) SetRoomVoice(ctx context.Context, in *SetRoomVoiceRequest, opts ...http.CallOption) (*NilReply, error) {
	var out NilReply
	pattern := "/v1/room/set_voice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoomSetRoomVoice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
