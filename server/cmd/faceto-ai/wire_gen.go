// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"faceto-ai/internal/biz"
	"faceto-ai/internal/conf"
	"faceto-ai/internal/data"
	"faceto-ai/internal/server"
	"faceto-ai/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
	_ "net/http/pprof"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, confServer *conf.Server, confData *conf.Data, thirdApi *conf.ThirdApi, storage *conf.Storage, liveKit *conf.LiveKit, gcpCredentials *conf.GcpCredentials, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(confServer, logger)
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	linkRepo := data.NewLinkRepo(dataData, logger)
	linkUseCase := biz.NewLinkUseCase(logger, thirdApi, linkRepo)
	roomRepo := data.NewRoomRepo(dataData, logger)
	roomVodRepo := data.NewRoomVodRepo(dataData, logger)
	roomVodUseCase := biz.NewRoomVodUseCase(logger, storage, roomRepo, roomVodRepo)
	roomWebhookRepo := data.NewRoomWebhookRepo(dataData, logger)
	roomMessageRepo := data.NewRoomMsgRepo(dataData, logger)
	authRepo := data.NewAuthRepo(dataData, logger)
	liveGPTWebhook := data.NewLiveGPTWebhook(dataData, logger, linkRepo, roomRepo, roomMessageRepo, roomVodRepo, authRepo)
	roomWebhookUseCase := biz.NewRoomWebhookUseCase(logger, liveKit, storage, linkUseCase, roomVodUseCase, roomWebhookRepo, roomRepo, liveGPTWebhook)
	roomUseCase := biz.NewRoomUseCase(logger, roomRepo, linkRepo)
	roomMessageUseCase := biz.NewRoomMsgUseCase(logger, roomRepo, roomMessageRepo)
	authUseCase := biz.NewAuthUseCase(logger, thirdApi, authRepo)
	voiceRepo := data.NewVoiceRepo(thirdApi, logger)
	storageRepo := data.NewStorageRepo(storage, dataData, logger)
	voiceUseCase := biz.NewVoiceUseCase(logger, thirdApi, voiceRepo, storageRepo)
	roomService := service.NewRoomService(logger, thirdApi, storage, liveKit, gcpCredentials, linkUseCase, roomWebhookUseCase, roomUseCase, roomMessageUseCase, roomVodUseCase, authUseCase, voiceUseCase)
	faceToService := service.NewFaceToService(logger, linkUseCase, authUseCase)
	voiceService := service.NewVoiceService(logger, voiceUseCase)
	httpServer := server.NewHTTPServer(confServer, roomService, faceToService, voiceService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
